typedef char __nv_bool;
# 58 ".././mpi_s/mpi.h"
enum elementary_datatypes {
# 58 ".././mpi_s/mpi.h"
MPI_CHAR,
# 59 ".././mpi_s/mpi.h"
MPI_SHORT,
# 60 ".././mpi_s/mpi.h"
MPI_INT,
# 61 ".././mpi_s/mpi.h"
MPI_LONG,
# 62 ".././mpi_s/mpi.h"
MPI_UNSIGNED_CHAR,
# 63 ".././mpi_s/mpi.h"
MPI_UNSIGNED_SHORT,
# 64 ".././mpi_s/mpi.h"
MPI_UNSIGNED,
# 65 ".././mpi_s/mpi.h"
MPI_UNSIGNED_LONG,
# 66 ".././mpi_s/mpi.h"
MPI_FLOAT,
# 67 ".././mpi_s/mpi.h"
MPI_DOUBLE,
# 68 ".././mpi_s/mpi.h"
MPI_LONG_DOUBLE,
# 69 ".././mpi_s/mpi.h"
MPI_BYTE,
# 70 ".././mpi_s/mpi.h"
MPI_PACKED};
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 194 "/usr/include/sys/types.h" 3
typedef signed char int8_t;
# 25 ".././mpi_s/mpi.h"
typedef int MPI_Handle;
# 28 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Datatype;
#if !defined(__CUDABE__)
# 145 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) int printf(const char *__restrict__, ...);
#endif
# 150 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) void free(void *);
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
#if !defined(__CUDABE__)
# 244 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) double fabs(double);
#endif
#if !defined(__CUDABE__)
# 430 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double sin(double);
#endif
#if !defined(__CUDABE__)
# 463 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double cos(double);
#endif
#if !defined(__CUDABE__)
# 612 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double sqrt(double);
#endif
#if !defined(__CUDABE__)
# 1181 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double log(double);
#endif
#if !defined(__CUDABE__)
# 1447 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) double floor(double);
#endif
#if !defined(__CUDABE__)
# 2920 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) double ceil(double);
#endif
#if !defined(__CUDABE__)
# 7221 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) double copysign(double, double);
#endif
# 134 "util.c"
___device__(extern  __no_sc__) double _Z11dot_productPKdS0_(const double *, const double *);
# 146 "util.c"
___device__(extern  __no_sc__) void _Z13cross_productPKdS0_Pd(const double *, const double *, double *);
# 162 "util.c"
___device__(extern  __no_sc__) double _Z7modulusPKd(const double *);
# 185 "util.c"
___device__(extern  __no_sc__) void _Z13rotate_vectorPdPKd(double *, const double *);
# 258 "util.c"
___device__(extern  __no_sc__) int _Z4iminii(const int, const int);
# 262 "util.c"
___device__(extern  __no_sc__) int _Z4imaxii(const int, const int);
# 266 "util.c"
___device__(extern  __no_sc__) double _Z4dmindd(const double, const double);
# 270 "util.c"
___device__(extern  __no_sc__) double _Z4dmaxdd(const double, const double);
# 1163 "util.c"
___device__(extern  __no_sc__) int _Z12util_dpythagddPd(double, double, double *);
#include "common_functions.h"
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
# 134 "util.c"
___device__( __no_sc__) double _Z11dot_productPKdS0_(
# 134 "util.c"
const double *a, 
# 134 "util.c"
const double *b){
# 134 "util.c"
{
# 136 "util.c"
return (((a[X]) * (b[X])) + ((a[Y]) * (b[Y]))) + ((a[Z]) * (b[Z]));
# 137 "util.c"
}}
# 146 "util.c"
___device__( __no_sc__) void _Z13cross_productPKdS0_Pd(
# 146 "util.c"
const double *a, 
# 146 "util.c"
const double *b, 
# 146 "util.c"
double *result){
# 146 "util.c"
{
# 148 "util.c"
(result[X]) = (((a[Y]) * (b[Z])) - ((a[Z]) * (b[Y])));
# 149 "util.c"
(result[Y]) = (((a[Z]) * (b[X])) - ((a[X]) * (b[Z])));
# 150 "util.c"
(result[Z]) = (((a[X]) * (b[Y])) - ((a[Y]) * (b[X])));
# 152 "util.c"
return;
# 153 "util.c"
}}
# 162 "util.c"
___device__( __no_sc__) double _Z7modulusPKd(
# 162 "util.c"
const double *a){
# 162 "util.c"
{
# 164 "util.c"
return sqrt(((((a[X]) * (a[X])) + ((a[Y]) * (a[Y]))) + ((a[Z]) * (a[Z]))));
# 165 "util.c"
}}
# 185 "util.c"
___device__( __no_sc__) void _Z13rotate_vectorPdPKd(
# 185 "util.c"
double *v, 
# 185 "util.c"
const double *w){
# 185 "util.c"
{
# 187 "util.c"
 double __cuda_local_var_15468_10_non_const_what[3];
# 187 "util.c"
 double __cuda_local_var_15468_19_non_const_vrot[3];
# 188 "util.c"
 double __cuda_local_var_15469_10_non_const_theta;
# 188 "util.c"
 double __cuda_local_var_15469_17_non_const_ct;
# 188 "util.c"
 double __cuda_local_var_15469_21_non_const_st;
# 189 "util.c"
 double __cuda_local_var_15470_10_non_const_vdotw;
# 191 "util.c"
__cuda_local_var_15469_10_non_const_theta = (sqrt(((((w[X]) * (w[X])) + ((w[Y]) * (w[Y]))) + ((w[Z]) * (w[Z])))));
# 193 "util.c"
if (__cuda_local_var_15469_10_non_const_theta == (0.0))
# 193 "util.c"
{
# 195 "util.c"
}
# 196 "util.c"
else 
# 196 "util.c"
{
# 199 "util.c"
((__cuda_local_var_15468_10_non_const_what)[X]) = ( fdivide((w[X]) , __cuda_local_var_15469_10_non_const_theta));
# 200 "util.c"
((__cuda_local_var_15468_10_non_const_what)[Y]) = ( fdivide((w[Y]) , __cuda_local_var_15469_10_non_const_theta));
# 201 "util.c"
((__cuda_local_var_15468_10_non_const_what)[Z]) = ( fdivide((w[Z]) , __cuda_local_var_15469_10_non_const_theta));
# 205 "util.c"
__cuda_local_var_15469_21_non_const_st = (sin(__cuda_local_var_15469_10_non_const_theta));
# 206 "util.c"
__cuda_local_var_15469_17_non_const_ct = (cos(__cuda_local_var_15469_10_non_const_theta));
# 207 "util.c"
__cuda_local_var_15470_10_non_const_vdotw = ((((v[X]) * ((__cuda_local_var_15468_10_non_const_what)[X])) + ((v[Y]) * ((__cuda_local_var_15468_10_non_const_what)[Y]))) + ((v[Z]) * ((__cuda_local_var_15468_10_non_const_what)[Z])));
# 209 "util.c"
((__cuda_local_var_15468_19_non_const_vrot)[X]) = ((__cuda_local_var_15469_17_non_const_ct * (v[X])) + (__cuda_local_var_15469_21_non_const_st * ((((__cuda_local_var_15468_10_non_const_what)[Y]) * (v[Z])) - (((__cuda_local_var_15468_10_non_const_what)[Z]) * (v[Y])))));
# 210 "util.c"
((__cuda_local_var_15468_19_non_const_vrot)[Y]) = ((__cuda_local_var_15469_17_non_const_ct * (v[Y])) + (__cuda_local_var_15469_21_non_const_st * ((((__cuda_local_var_15468_10_non_const_what)[Z]) * (v[X])) - (((__cuda_local_var_15468_10_non_const_what)[X]) * (v[Z])))));
# 211 "util.c"
((__cuda_local_var_15468_19_non_const_vrot)[Z]) = ((__cuda_local_var_15469_17_non_const_ct * (v[Z])) + (__cuda_local_var_15469_21_non_const_st * ((((__cuda_local_var_15468_10_non_const_what)[X]) * (v[Y])) - (((__cuda_local_var_15468_10_non_const_what)[Y]) * (v[X])))));
# 212 "util.c"
(v[X]) = (((((1.0) - __cuda_local_var_15469_17_non_const_ct) * __cuda_local_var_15470_10_non_const_vdotw) * ((__cuda_local_var_15468_10_non_const_what)[X])) + ((__cuda_local_var_15468_19_non_const_vrot)[X]));
# 213 "util.c"
(v[Y]) = (((((1.0) - __cuda_local_var_15469_17_non_const_ct) * __cuda_local_var_15470_10_non_const_vdotw) * ((__cuda_local_var_15468_10_non_const_what)[Y])) + ((__cuda_local_var_15468_19_non_const_vrot)[Y]));
# 214 "util.c"
(v[Z]) = (((((1.0) - __cuda_local_var_15469_17_non_const_ct) * __cuda_local_var_15470_10_non_const_vdotw) * ((__cuda_local_var_15468_10_non_const_what)[Z])) + ((__cuda_local_var_15468_19_non_const_vrot)[Z]));
# 215 "util.c"
}
# 217 "util.c"
return;
# 218 "util.c"
}}
# 258 "util.c"
___device__( __no_sc__) int _Z4iminii(
# 258 "util.c"
const int i, 
# 258 "util.c"
const int j){
# 258 "util.c"
{
# 259 "util.c"
return (i < j) ? i : j;
# 260 "util.c"
}}
# 262 "util.c"
___device__( __no_sc__) int _Z4imaxii(
# 262 "util.c"
const int i, 
# 262 "util.c"
const int j){
# 262 "util.c"
{
# 263 "util.c"
return (i > j) ? i : j;
# 264 "util.c"
}}
# 266 "util.c"
___device__( __no_sc__) double _Z4dmindd(
# 266 "util.c"
const double a, 
# 266 "util.c"
const double b){
# 266 "util.c"
{
# 267 "util.c"
return (a < b) ? a : b;
# 268 "util.c"
}}
# 270 "util.c"
___device__( __no_sc__) double _Z4dmaxdd(
# 270 "util.c"
const double a, 
# 270 "util.c"
const double b){
# 270 "util.c"
{
# 271 "util.c"
return (a > b) ? a : b;
# 272 "util.c"
}}
# 1163 "util.c"
___device__( __no_sc__) int _Z12util_dpythagddPd(
# 1163 "util.c"
double a, 
# 1163 "util.c"
double b, 
# 1163 "util.c"
double *p){
# 1163 "util.c"
{
# 1165 "util.c"
 double __cuda_local_var_16318_10_non_const_absa;
# 1165 "util.c"
 double __cuda_local_var_16318_16_non_const_absb;
# 1165 "util.c"
 double __cuda_local_var_16318_22_non_const_tmp;
# 1167 "util.c"
__cuda_local_var_16318_10_non_const_absa = (fabs(a));
# 1168 "util.c"
__cuda_local_var_16318_16_non_const_absb = (fabs(b));
# 1170 "util.c"
if (__cuda_local_var_16318_10_non_const_absa > __cuda_local_var_16318_16_non_const_absb)
# 1170 "util.c"
{
# 1171 "util.c"
__cuda_local_var_16318_22_non_const_tmp = ( fdivide(__cuda_local_var_16318_16_non_const_absb , __cuda_local_var_16318_10_non_const_absa));
# 1172 "util.c"
(*p) = (__cuda_local_var_16318_10_non_const_absa * (sqrt(((1.0) + (__cuda_local_var_16318_22_non_const_tmp * __cuda_local_var_16318_22_non_const_tmp)))));
# 1173 "util.c"
}
# 1174 "util.c"
else 
# 1174 "util.c"
{
# 1175 "util.c"
if (__cuda_local_var_16318_16_non_const_absb == (0.0))
# 1175 "util.c"
{
# 1176 "util.c"
(*p) = (0.0);
# 1177 "util.c"
}
# 1178 "util.c"
else 
# 1178 "util.c"
{
# 1179 "util.c"
__cuda_local_var_16318_22_non_const_tmp = ( fdivide(__cuda_local_var_16318_10_non_const_absa , __cuda_local_var_16318_16_non_const_absb));
# 1180 "util.c"
(*p) = (__cuda_local_var_16318_16_non_const_absb * (sqrt(((1.0) + (__cuda_local_var_16318_22_non_const_tmp * __cuda_local_var_16318_22_non_const_tmp)))));
# 1181 "util.c"
}
# 1182 "util.c"
}
# 1184 "util.c"
return 0;
# 1185 "util.c"
}}
