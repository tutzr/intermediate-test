//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_35
.address_size 64

	// .globl	_Z9cs_cartszP8coords_sPi
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.const .align 8 .b8 __nv_static_27__14_coords_cpp1_ii_7126c51d_const_param[120];
.global .align 1 .b8 __unnamed_1[33] = {105, 110, 116, 32, 99, 115, 95, 99, 97, 114, 116, 115, 122, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_2[38] = {105, 110, 116, 32, 99, 115, 95, 99, 97, 114, 116, 95, 99, 111, 111, 114, 100, 115, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_3[35] = {105, 110, 116, 32, 99, 115, 95, 112, 101, 114, 105, 111, 100, 105, 99, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_4[34] = {105, 110, 116, 32, 99, 115, 95, 108, 116, 111, 116, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_5[34] = {105, 110, 116, 32, 99, 115, 95, 108, 109, 105, 110, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_6[33] = {105, 110, 116, 32, 99, 115, 95, 110, 108, 111, 99, 97, 108, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_7[33] = {105, 110, 116, 32, 99, 115, 95, 110, 115, 105, 116, 101, 115, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_8[40] = {105, 110, 116, 32, 99, 115, 95, 110, 108, 111, 99, 97, 108, 95, 111, 102, 102, 115, 101, 116, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_9[40] = {105, 110, 116, 32, 99, 115, 95, 105, 110, 100, 101, 120, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 41, 0};
.global .align 1 .b8 __unnamed_10[32] = {105, 110, 116, 32, 99, 115, 95, 110, 104, 97, 108, 111, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_11[33] = {105, 110, 116, 32, 99, 115, 95, 110, 116, 111, 116, 97, 108, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_12[78] = {105, 110, 116, 32, 99, 115, 95, 109, 105, 110, 105, 109, 117, 109, 95, 100, 105, 115, 116, 97, 110, 99, 101, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 100, 111, 117, 98, 108, 101, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 100, 111, 117, 98, 108, 101, 32, 42, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_13[44] = {105, 110, 116, 32, 99, 115, 95, 105, 110, 100, 101, 120, 95, 116, 111, 95, 105, 106, 107, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_14[48] = {105, 110, 116, 32, 99, 115, 95, 115, 116, 114, 105, 100, 101, 115, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_15[31] = {105, 110, 116, 32, 99, 115, 95, 110, 97, 108, 108, 40, 99, 111, 111, 114, 100, 115, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 $str[3] = {99, 115, 0};
.global .align 1 .b8 $str1[9] = {99, 111, 111, 114, 100, 115, 46, 99, 0};
.global .align 1 .b8 $str2[27] = {105, 99, 32, 62, 61, 32, 49, 32, 45, 32, 99, 115, 45, 62, 112, 97, 114, 97, 109, 45, 62, 110, 104, 97, 108, 111, 0};
.global .align 1 .b8 $str3[27] = {106, 99, 32, 62, 61, 32, 49, 32, 45, 32, 99, 115, 45, 62, 112, 97, 114, 97, 109, 45, 62, 110, 104, 97, 108, 111, 0};
.global .align 1 .b8 $str4[27] = {107, 99, 32, 62, 61, 32, 49, 32, 45, 32, 99, 115, 45, 62, 112, 97, 114, 97, 109, 45, 62, 110, 104, 97, 108, 111, 0};
.global .align 1 .b8 $str5[46] = {105, 99, 32, 60, 61, 32, 99, 115, 45, 62, 112, 97, 114, 97, 109, 45, 62, 110, 108, 111, 99, 97, 108, 91, 88, 93, 32, 43, 32, 99, 115, 45, 62, 112, 97, 114, 97, 109, 45, 62, 110, 104, 97, 108, 111, 0};
.global .align 1 .b8 $str6[46] = {106, 99, 32, 60, 61, 32, 99, 115, 45, 62, 112, 97, 114, 97, 109, 45, 62, 110, 108, 111, 99, 97, 108, 91, 89, 93, 32, 43, 32, 99, 115, 45, 62, 112, 97, 114, 97, 109, 45, 62, 110, 104, 97, 108, 111, 0};
.global .align 1 .b8 $str7[46] = {107, 99, 32, 60, 61, 32, 99, 115, 45, 62, 112, 97, 114, 97, 109, 45, 62, 110, 108, 111, 99, 97, 108, 91, 90, 93, 32, 43, 32, 99, 115, 45, 62, 112, 97, 114, 97, 109, 45, 62, 110, 104, 97, 108, 111, 0};
.global .align 1 .b8 $str8[6] = {110, 104, 97, 108, 111, 0};
.global .align 1 .b8 $str9[55] = {99, 115, 95, 105, 110, 100, 101, 120, 40, 99, 115, 44, 32, 99, 111, 111, 114, 100, 115, 91, 88, 93, 44, 32, 99, 111, 111, 114, 100, 115, 91, 89, 93, 44, 32, 99, 111, 111, 114, 100, 115, 91, 90, 93, 41, 32, 61, 61, 32, 105, 110, 100, 101, 120, 0};

.visible .func  (.param .b32 func_retval0) _Z9cs_cartszP8coords_sPi(
	.param .b64 _Z9cs_cartszP8coords_sPi_param_0,
	.param .b64 _Z9cs_cartszP8coords_sPi_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [_Z9cs_cartszP8coords_sPi_param_0];
	ld.param.u64 	%rd2, [_Z9cs_cartszP8coords_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB0_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_1;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 331;
	mov.u64 	%rd9, 1;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB0_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.u32 	%r2, [%rd10+68];
	st.u32 	[%rd2], %r2;
	ld.u64 	%rd11, [%rd1+16];
	ld.u32 	%r3, [%rd11+72];
	st.u32 	[%rd2+4], %r3;
	ld.u64 	%rd12, [%rd1+16];
	ld.u32 	%r4, [%rd12+76];
	st.u32 	[%rd2+8], %r4;
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	_Z14cs_cart_coordsP8coords_sPi
.visible .func  (.param .b32 func_retval0) _Z14cs_cart_coordsP8coords_sPi(
	.param .b64 _Z14cs_cart_coordsP8coords_sPi_param_0,
	.param .b64 _Z14cs_cart_coordsP8coords_sPi_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [_Z14cs_cart_coordsP8coords_sPi_param_0];
	ld.param.u64 	%rd2, [_Z14cs_cart_coordsP8coords_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_2;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 349;
	mov.u64 	%rd9, 1;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB1_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.u32 	%r2, [%rd10+80];
	st.u32 	[%rd2], %r2;
	ld.u64 	%rd11, [%rd1+16];
	ld.u32 	%r3, [%rd11+84];
	st.u32 	[%rd2+4], %r3;
	ld.u64 	%rd12, [%rd1+16];
	ld.u32 	%r4, [%rd12+88];
	st.u32 	[%rd2+8], %r4;
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	_Z11cs_periodicP8coords_sPi
.visible .func  (.param .b32 func_retval0) _Z11cs_periodicP8coords_sPi(
	.param .b64 _Z11cs_periodicP8coords_sPi_param_0,
	.param .b64 _Z11cs_periodicP8coords_sPi_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [_Z11cs_periodicP8coords_sPi_param_0];
	ld.param.u64 	%rd2, [_Z11cs_periodicP8coords_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_3;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 403;
	mov.u64 	%rd9, 1;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB2_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.u32 	%r2, [%rd10+56];
	st.u32 	[%rd2], %r2;
	ld.u64 	%rd11, [%rd1+16];
	ld.u32 	%r3, [%rd11+60];
	st.u32 	[%rd2+4], %r3;
	ld.u64 	%rd12, [%rd1+16];
	ld.u32 	%r4, [%rd12+64];
	st.u32 	[%rd2+8], %r4;
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	_Z7cs_ltotP8coords_sPd
.visible .func  (.param .b32 func_retval0) _Z7cs_ltotP8coords_sPd(
	.param .b64 _Z7cs_ltotP8coords_sPd_param_0,
	.param .b64 _Z7cs_ltotP8coords_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [_Z7cs_ltotP8coords_sPd_param_0];
	ld.param.u64 	%rd2, [_Z7cs_ltotP8coords_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_4;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 421;
	mov.u64 	%rd9, 1;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB3_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.u32 	%r2, [%rd10+8];
	cvt.rn.f64.s32	%fd1, %r2;
	st.f64 	[%rd2], %fd1;
	ld.u64 	%rd11, [%rd1+16];
	ld.u32 	%r3, [%rd11+12];
	cvt.rn.f64.s32	%fd2, %r3;
	st.f64 	[%rd2+8], %fd2;
	ld.u64 	%rd12, [%rd1+16];
	ld.u32 	%r4, [%rd12+16];
	cvt.rn.f64.s32	%fd3, %r4;
	st.f64 	[%rd2+16], %fd3;
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	_Z7cs_lminP8coords_sPd
.visible .func  (.param .b32 func_retval0) _Z7cs_lminP8coords_sPd(
	.param .b64 _Z7cs_lminP8coords_sPd_param_0,
	.param .b64 _Z7cs_lminP8coords_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<3>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [_Z7cs_lminP8coords_sPd_param_0];
	ld.param.u64 	%rd2, [_Z7cs_lminP8coords_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB4_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_5;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 439;
	mov.u64 	%rd9, 1;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB4_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.f64 	%fd1, [%rd10+96];
	st.f64 	[%rd2], %fd1;
	ld.u64 	%rd11, [%rd1+16];
	ld.f64 	%fd2, [%rd11+104];
	st.f64 	[%rd2+8], %fd2;
	ld.u64 	%rd12, [%rd1+16];
	ld.f64 	%fd3, [%rd12+112];
	st.f64 	[%rd2+16], %fd3;
	mov.u32 	%r2, 0;
	st.param.b32	[func_retval0+0], %r2;
	ret;
}

	// .globl	_Z9cs_nlocalP8coords_sPi
.visible .func  (.param .b32 func_retval0) _Z9cs_nlocalP8coords_sPi(
	.param .b64 _Z9cs_nlocalP8coords_sPi_param_0,
	.param .b64 _Z9cs_nlocalP8coords_sPi_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [_Z9cs_nlocalP8coords_sPi_param_0];
	ld.param.u64 	%rd2, [_Z9cs_nlocalP8coords_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB5_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_6;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 461;
	mov.u64 	%rd9, 1;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB5_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.u32 	%r2, [%rd10+20];
	st.u32 	[%rd2], %r2;
	ld.u64 	%rd11, [%rd1+16];
	ld.u32 	%r3, [%rd11+24];
	st.u32 	[%rd2+4], %r3;
	ld.u64 	%rd12, [%rd1+16];
	ld.u32 	%r4, [%rd12+28];
	st.u32 	[%rd2+8], %r4;
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	_Z9cs_nsitesP8coords_sPi
.visible .func  (.param .b32 func_retval0) _Z9cs_nsitesP8coords_sPi(
	.param .b64 _Z9cs_nsitesP8coords_sPi_param_0,
	.param .b64 _Z9cs_nsitesP8coords_sPi_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [_Z9cs_nsitesP8coords_sPi_param_0];
	ld.param.u64 	%rd2, [_Z9cs_nsitesP8coords_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB6_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_7;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 482;
	mov.u64 	%rd9, 1;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 6

BB6_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.u32 	%r2, [%rd10+4];
	st.u32 	[%rd2], %r2;
	mov.u32 	%r3, 0;
	st.param.b32	[func_retval0+0], %r3;
	ret;
}

	// .globl	_Z16cs_nlocal_offsetP8coords_sPi
.visible .func  (.param .b32 func_retval0) _Z16cs_nlocal_offsetP8coords_sPi(
	.param .b64 _Z16cs_nlocal_offsetP8coords_sPi_param_0,
	.param .b64 _Z16cs_nlocal_offsetP8coords_sPi_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [_Z16cs_nlocal_offsetP8coords_sPi_param_0];
	ld.param.u64 	%rd2, [_Z16cs_nlocal_offsetP8coords_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB7_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_8;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 501;
	mov.u64 	%rd9, 1;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB7_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.u32 	%r2, [%rd10+32];
	st.u32 	[%rd2], %r2;
	ld.u64 	%rd11, [%rd1+16];
	ld.u32 	%r3, [%rd11+36];
	st.u32 	[%rd2+4], %r3;
	ld.u64 	%rd12, [%rd1+16];
	ld.u32 	%r4, [%rd12+40];
	st.u32 	[%rd2+8], %r4;
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	_Z8cs_indexP8coords_siii
.visible .func  (.param .b32 func_retval0) _Z8cs_indexP8coords_siii(
	.param .b64 _Z8cs_indexP8coords_siii_param_0,
	.param .b32 _Z8cs_indexP8coords_siii_param_1,
	.param .b32 _Z8cs_indexP8coords_siii_param_2,
	.param .b32 _Z8cs_indexP8coords_siii_param_3
)
{
	.reg .pred 	%p<8>;
	.reg .b32 	%r<54>;
	.reg .b64 	%rd<71>;


	ld.param.u64 	%rd15, [_Z8cs_indexP8coords_siii_param_0];
	ld.param.u32 	%r14, [_Z8cs_indexP8coords_siii_param_1];
	ld.param.u32 	%r15, [_Z8cs_indexP8coords_siii_param_2];
	ld.param.u32 	%r16, [_Z8cs_indexP8coords_siii_param_3];
	setp.ne.s64	%p1, %rd15, 0;
	@%p1 bra 	BB8_2;

	mov.u64 	%rd16, $str;
	cvta.global.u64 	%rd17, %rd16;
	mov.u64 	%rd18, $str1;
	cvta.global.u64 	%rd19, %rd18;
	mov.u64 	%rd20, __unnamed_9;
	cvta.global.u64 	%rd21, %rd20;
	mov.u32 	%r17, 612;
	mov.u64 	%rd22, 1;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd17;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd19;
	.param .b32 param2;
	st.param.b32	[param2+0], %r17;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd21;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd22;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB8_2:
	add.s64 	%rd1, %rd15, 16;
	ld.u64 	%rd66, [%rd15+16];
	ld.u32 	%r49, [%rd66];
	mov.u32 	%r18, 1;
	sub.s32 	%r19, %r18, %r49;
	setp.le.s32	%p2, %r19, %r14;
	@%p2 bra 	BB8_4;

	mov.u64 	%rd23, $str2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u64 	%rd25, $str1;
	cvta.global.u64 	%rd26, %rd25;
	mov.u64 	%rd27, __unnamed_9;
	cvta.global.u64 	%rd28, %rd27;
	mov.u32 	%r20, 614;
	mov.u64 	%rd29, 1;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd26;
	.param .b32 param2;
	st.param.b32	[param2+0], %r20;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd28;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd29;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9
	ld.u64 	%rd66, [%rd1];
	ld.u32 	%r49, [%rd66];

BB8_4:
	sub.s32 	%r22, %r18, %r49;
	setp.le.s32	%p3, %r22, %r15;
	@%p3 bra 	BB8_6;

	mov.u64 	%rd30, $str3;
	cvta.global.u64 	%rd31, %rd30;
	mov.u64 	%rd32, $str1;
	cvta.global.u64 	%rd33, %rd32;
	mov.u64 	%rd34, __unnamed_9;
	cvta.global.u64 	%rd35, %rd34;
	mov.u32 	%r23, 615;
	mov.u64 	%rd36, 1;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd31;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd33;
	.param .b32 param2;
	st.param.b32	[param2+0], %r23;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd35;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd36;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10
	ld.u64 	%rd66, [%rd1];
	ld.u32 	%r49, [%rd66];

BB8_6:
	sub.s32 	%r25, %r18, %r49;
	setp.le.s32	%p4, %r25, %r16;
	@%p4 bra 	BB8_8;

	mov.u64 	%rd37, $str4;
	cvta.global.u64 	%rd38, %rd37;
	mov.u64 	%rd39, $str1;
	cvta.global.u64 	%rd40, %rd39;
	mov.u64 	%rd41, __unnamed_9;
	cvta.global.u64 	%rd42, %rd41;
	mov.u32 	%r26, 616;
	mov.u64 	%rd43, 1;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd38;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd40;
	.param .b32 param2;
	st.param.b32	[param2+0], %r26;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd42;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd43;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11
	ld.u64 	%rd66, [%rd1];
	ld.u32 	%r49, [%rd66];

BB8_8:
	ld.u32 	%r27, [%rd66+20];
	add.s32 	%r28, %r49, %r27;
	setp.ge.s32	%p5, %r28, %r14;
	@%p5 bra 	BB8_10;

	mov.u64 	%rd44, $str5;
	cvta.global.u64 	%rd45, %rd44;
	mov.u64 	%rd46, $str1;
	cvta.global.u64 	%rd47, %rd46;
	mov.u64 	%rd48, __unnamed_9;
	cvta.global.u64 	%rd49, %rd48;
	mov.u32 	%r29, 617;
	mov.u64 	%rd50, 1;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd45;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd47;
	.param .b32 param2;
	st.param.b32	[param2+0], %r29;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd49;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd50;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12
	ld.u64 	%rd66, [%rd1];
	ld.u32 	%r49, [%rd66];

BB8_10:
	ld.u32 	%r30, [%rd66+24];
	add.s32 	%r31, %r49, %r30;
	setp.ge.s32	%p6, %r31, %r15;
	@%p6 bra 	BB8_12;

	mov.u64 	%rd51, $str6;
	cvta.global.u64 	%rd52, %rd51;
	mov.u64 	%rd53, $str1;
	cvta.global.u64 	%rd54, %rd53;
	mov.u64 	%rd55, __unnamed_9;
	cvta.global.u64 	%rd56, %rd55;
	mov.u32 	%r32, 618;
	mov.u64 	%rd57, 1;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd52;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd54;
	.param .b32 param2;
	st.param.b32	[param2+0], %r32;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd56;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd57;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13
	ld.u64 	%rd66, [%rd1];
	ld.u32 	%r49, [%rd66];

BB8_12:
	ld.u32 	%r33, [%rd66+28];
	add.s32 	%r34, %r49, %r33;
	setp.ge.s32	%p7, %r34, %r16;
	@%p7 bra 	BB8_14;

	mov.u64 	%rd58, $str7;
	cvta.global.u64 	%rd59, %rd58;
	mov.u64 	%rd60, $str1;
	cvta.global.u64 	%rd61, %rd60;
	mov.u64 	%rd62, __unnamed_9;
	cvta.global.u64 	%rd63, %rd62;
	mov.u32 	%r35, 619;
	mov.u64 	%rd64, 1;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd59;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd61;
	.param .b32 param2;
	st.param.b32	[param2+0], %r35;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd63;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd64;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 14
	ld.u64 	%rd66, [%rd1];
	ld.u32 	%r49, [%rd66];

BB8_14:
	add.s32 	%r36, %r14, %r49;
	add.s32 	%r37, %r36, -1;
	ld.u32 	%r38, [%rd66+44];
	mul.lo.s32 	%r39, %r37, %r38;
	add.s32 	%r40, %r15, %r49;
	add.s32 	%r41, %r40, -1;
	ld.u32 	%r42, [%rd66+48];
	mad.lo.s32 	%r43, %r41, %r42, %r39;
	add.s32 	%r44, %r16, %r49;
	add.s32 	%r45, %r44, -1;
	ld.u32 	%r46, [%rd66+52];
	mad.lo.s32 	%r47, %r45, %r46, %r43;
	st.param.b32	[func_retval0+0], %r47;
	ret;
}

	// .globl	_Z8cs_nhaloP8coords_sPi
.visible .func  (.param .b32 func_retval0) _Z8cs_nhaloP8coords_sPi(
	.param .b64 _Z8cs_nhaloP8coords_sPi_param_0,
	.param .b64 _Z8cs_nhaloP8coords_sPi_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd1, [_Z8cs_nhaloP8coords_sPi_param_0];
	ld.param.u64 	%rd2, [_Z8cs_nhaloP8coords_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB9_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_10;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 651;
	mov.u64 	%rd9, 1;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 15

BB9_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB9_4;

	mov.u64 	%rd10, $str8;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str1;
	cvta.global.u64 	%rd13, %rd12;
	mov.u64 	%rd14, __unnamed_10;
	cvta.global.u64 	%rd15, %rd14;
	mov.u32 	%r2, 652;
	mov.u64 	%rd16, 1;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd15;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd16;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 16

BB9_4:
	ld.u64 	%rd17, [%rd1+16];
	ld.u32 	%r3, [%rd17];
	st.u32 	[%rd2], %r3;
	mov.u32 	%r4, 0;
	st.param.b32	[func_retval0+0], %r4;
	ret;
}

	// .globl	_Z9cs_ntotalP8coords_sPi
.visible .func  (.param .b32 func_retval0) _Z9cs_ntotalP8coords_sPi(
	.param .b64 _Z9cs_ntotalP8coords_sPi_param_0,
	.param .b64 _Z9cs_ntotalP8coords_sPi_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [_Z9cs_ntotalP8coords_sPi_param_0];
	ld.param.u64 	%rd2, [_Z9cs_ntotalP8coords_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB10_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_11;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 668;
	mov.u64 	%rd9, 1;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 17

BB10_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.u32 	%r2, [%rd10+8];
	st.u32 	[%rd2], %r2;
	ld.u64 	%rd11, [%rd1+16];
	ld.u32 	%r3, [%rd11+12];
	st.u32 	[%rd2+4], %r3;
	ld.u64 	%rd12, [%rd1+16];
	ld.u32 	%r4, [%rd12+16];
	st.u32 	[%rd2+8], %r4;
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	_Z19cs_minimum_distanceP8coords_sPKdS2_Pd
.visible .func  (.param .b32 func_retval0) _Z19cs_minimum_distanceP8coords_sPKdS2_Pd(
	.param .b64 _Z19cs_minimum_distanceP8coords_sPKdS2_Pd_param_0,
	.param .b64 _Z19cs_minimum_distanceP8coords_sPKdS2_Pd_param_1,
	.param .b64 _Z19cs_minimum_distanceP8coords_sPKdS2_Pd_param_2,
	.param .b64 _Z19cs_minimum_distanceP8coords_sPKdS2_Pd_param_3
)
{
	.reg .pred 	%p<8>;
	.reg .b32 	%r<21>;
	.reg .f64 	%fd<43>;
	.reg .b64 	%rd<31>;


	ld.param.u64 	%rd15, [_Z19cs_minimum_distanceP8coords_sPKdS2_Pd_param_0];
	ld.param.u64 	%rd16, [_Z19cs_minimum_distanceP8coords_sPKdS2_Pd_param_1];
	ld.param.u64 	%rd17, [_Z19cs_minimum_distanceP8coords_sPKdS2_Pd_param_2];
	ld.param.u64 	%rd18, [_Z19cs_minimum_distanceP8coords_sPKdS2_Pd_param_3];
	setp.ne.s64	%p1, %rd15, 0;
	@%p1 bra 	BB11_2;

	mov.u64 	%rd19, $str;
	cvta.global.u64 	%rd20, %rd19;
	mov.u64 	%rd21, $str1;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, __unnamed_12;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r10, 757;
	mov.u64 	%rd25, 1;
	// Callseq Start 18
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd20;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd22;
	.param .b32 param2;
	st.param.b32	[param2+0], %r10;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd24;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd25;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 18

BB11_2:
	ld.f64 	%fd16, [%rd17];
	ld.f64 	%fd17, [%rd16];
	sub.f64 	%fd40, %fd16, %fd17;
	st.f64 	[%rd18], %fd40;
	ld.f64 	%fd18, [%rd16+8];
	ld.f64 	%fd19, [%rd17+8];
	sub.f64 	%fd41, %fd19, %fd18;
	st.f64 	[%rd18+8], %fd41;
	ld.f64 	%fd20, [%rd16+16];
	ld.f64 	%fd21, [%rd17+16];
	sub.f64 	%fd42, %fd21, %fd20;
	st.f64 	[%rd18+16], %fd42;
	ld.u64 	%rd26, [%rd15+16];
	add.s64 	%rd2, %rd26, 8;
	ld.u32 	%r18, [%rd26+8];
	cvt.rn.f64.s32	%fd4, %r18;
	mul.f64 	%fd22, %fd4, 0d3FE0000000000000;
	setp.leu.f64	%p2, %fd40, %fd22;
	@%p2 bra 	BB11_4;

	ld.u32 	%r11, [%rd2+48];
	cvt.rn.f64.s32	%fd23, %r11;
	mul.f64 	%fd24, %fd4, %fd23;
	sub.f64 	%fd40, %fd40, %fd24;
	st.f64 	[%rd18], %fd40;
	ld.u64 	%rd26, [%rd15+16];
	ld.u32 	%r18, [%rd26+8];

BB11_4:
	cvt.rn.f64.s32	%fd7, %r18;
	mul.f64 	%fd25, %fd7, 0dBFE0000000000000;
	setp.geu.f64	%p3, %fd40, %fd25;
	@%p3 bra 	BB11_6;

	ld.u32 	%r12, [%rd26+56];
	cvt.rn.f64.s32	%fd26, %r12;
	fma.rn.f64 	%fd27, %fd7, %fd26, %fd40;
	st.f64 	[%rd18], %fd27;
	ld.u64 	%rd26, [%rd15+16];

BB11_6:
	add.s64 	%rd7, %rd26, 12;
	ld.u32 	%r19, [%rd26+12];
	cvt.rn.f64.s32	%fd8, %r19;
	mul.f64 	%fd28, %fd8, 0d3FE0000000000000;
	setp.leu.f64	%p4, %fd41, %fd28;
	@%p4 bra 	BB11_8;

	ld.u32 	%r13, [%rd7+48];
	cvt.rn.f64.s32	%fd29, %r13;
	mul.f64 	%fd30, %fd8, %fd29;
	sub.f64 	%fd41, %fd41, %fd30;
	st.f64 	[%rd18+8], %fd41;
	ld.u64 	%rd26, [%rd15+16];
	ld.u32 	%r19, [%rd26+12];

BB11_8:
	cvt.rn.f64.s32	%fd11, %r19;
	mul.f64 	%fd31, %fd11, 0dBFE0000000000000;
	setp.geu.f64	%p5, %fd41, %fd31;
	@%p5 bra 	BB11_10;

	ld.u32 	%r14, [%rd26+60];
	cvt.rn.f64.s32	%fd32, %r14;
	fma.rn.f64 	%fd33, %fd11, %fd32, %fd41;
	st.f64 	[%rd18+8], %fd33;
	ld.u64 	%rd26, [%rd15+16];

BB11_10:
	add.s64 	%rd12, %rd26, 16;
	ld.u32 	%r20, [%rd26+16];
	cvt.rn.f64.s32	%fd12, %r20;
	mul.f64 	%fd34, %fd12, 0d3FE0000000000000;
	setp.leu.f64	%p6, %fd42, %fd34;
	@%p6 bra 	BB11_12;

	ld.u32 	%r15, [%rd12+48];
	cvt.rn.f64.s32	%fd35, %r15;
	mul.f64 	%fd36, %fd12, %fd35;
	sub.f64 	%fd42, %fd42, %fd36;
	st.f64 	[%rd18+16], %fd42;
	ld.u64 	%rd26, [%rd15+16];
	ld.u32 	%r20, [%rd26+16];

BB11_12:
	cvt.rn.f64.s32	%fd15, %r20;
	mul.f64 	%fd37, %fd15, 0dBFE0000000000000;
	setp.geu.f64	%p7, %fd42, %fd37;
	@%p7 bra 	BB11_14;

	ld.u32 	%r16, [%rd26+64];
	cvt.rn.f64.s32	%fd38, %r16;
	fma.rn.f64 	%fd39, %fd15, %fd38, %fd42;
	st.f64 	[%rd18+16], %fd39;

BB11_14:
	mov.u32 	%r17, 0;
	st.param.b32	[func_retval0+0], %r17;
	ret;
}

	// .globl	_Z15cs_index_to_ijkP8coords_siPi
.visible .func  (.param .b32 func_retval0) _Z15cs_index_to_ijkP8coords_siPi(
	.param .b64 _Z15cs_index_to_ijkP8coords_siPi_param_0,
	.param .b32 _Z15cs_index_to_ijkP8coords_siPi_param_1,
	.param .b64 _Z15cs_index_to_ijkP8coords_siPi_param_2
)
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<73>;
	.reg .b64 	%rd<88>;


	ld.param.u64 	%rd14, [_Z15cs_index_to_ijkP8coords_siPi_param_0];
	ld.param.u32 	%r17, [_Z15cs_index_to_ijkP8coords_siPi_param_1];
	ld.param.u64 	%rd15, [_Z15cs_index_to_ijkP8coords_siPi_param_2];
	setp.ne.s64	%p1, %rd14, 0;
	@%p1 bra 	BB12_2;

	mov.u64 	%rd16, $str;
	cvta.global.u64 	%rd17, %rd16;
	mov.u64 	%rd18, $str1;
	cvta.global.u64 	%rd19, %rd18;
	mov.u64 	%rd20, __unnamed_13;
	cvta.global.u64 	%rd21, %rd20;
	mov.u32 	%r18, 785;
	mov.u64 	%rd22, 1;
	// Callseq Start 19
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd17;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd19;
	.param .b32 param2;
	st.param.b32	[param2+0], %r18;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd21;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd22;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 19

BB12_2:
	ld.u64 	%rd23, [%rd14+16];
	ld.u32 	%r19, [%rd23];
	mov.u32 	%r20, 1;
	sub.s32 	%r21, %r20, %r19;
	ld.u32 	%r22, [%rd23+44];
	div.s32 	%r23, %r17, %r22;
	add.s32 	%r1, %r21, %r23;
	st.u32 	[%rd15], %r1;
	ld.u64 	%rd24, [%rd14+16];
	ld.u32 	%r24, [%rd24];
	sub.s32 	%r25, %r20, %r24;
	ld.u32 	%r26, [%rd24+44];
	rem.s32 	%r27, %r17, %r26;
	ld.u32 	%r28, [%rd24+48];
	div.s32 	%r29, %r27, %r28;
	add.s32 	%r2, %r25, %r29;
	st.u32 	[%rd15+4], %r2;
	ld.u64 	%rd25, [%rd14+16];
	ld.u32 	%r30, [%rd25];
	sub.s32 	%r31, %r20, %r30;
	ld.u32 	%r32, [%rd25+48];
	rem.s32 	%r33, %r17, %r32;
	add.s32 	%r3, %r33, %r31;
	st.u32 	[%rd15+8], %r3;
	@%p1 bra 	BB12_4;

	mov.u64 	%rd26, $str;
	cvta.global.u64 	%rd27, %rd26;
	mov.u64 	%rd28, $str1;
	cvta.global.u64 	%rd29, %rd28;
	mov.u64 	%rd30, __unnamed_9;
	cvta.global.u64 	%rd31, %rd30;
	mov.u32 	%r34, 612;
	mov.u64 	%rd32, 1;
	// Callseq Start 20
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd27;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r34;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 20

BB12_4:
	ld.u64 	%rd83, [%rd14+16];
	ld.u32 	%r68, [%rd83];
	sub.s32 	%r36, %r20, %r68;
	setp.le.s32	%p3, %r36, %r1;
	@%p3 bra 	BB12_6;

	mov.u64 	%rd33, $str2;
	cvta.global.u64 	%rd34, %rd33;
	mov.u64 	%rd35, $str1;
	cvta.global.u64 	%rd36, %rd35;
	mov.u64 	%rd37, __unnamed_9;
	cvta.global.u64 	%rd38, %rd37;
	mov.u32 	%r37, 614;
	mov.u64 	%rd39, 1;
	// Callseq Start 21
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd34;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd36;
	.param .b32 param2;
	st.param.b32	[param2+0], %r37;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd38;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd39;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 21
	ld.u64 	%rd83, [%rd14+16];
	ld.u32 	%r68, [%rd83];

BB12_6:
	sub.s32 	%r39, %r20, %r68;
	setp.le.s32	%p4, %r39, %r2;
	@%p4 bra 	BB12_8;

	mov.u64 	%rd40, $str3;
	cvta.global.u64 	%rd41, %rd40;
	mov.u64 	%rd42, $str1;
	cvta.global.u64 	%rd43, %rd42;
	mov.u64 	%rd44, __unnamed_9;
	cvta.global.u64 	%rd45, %rd44;
	mov.u32 	%r40, 615;
	mov.u64 	%rd46, 1;
	// Callseq Start 22
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd41;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd43;
	.param .b32 param2;
	st.param.b32	[param2+0], %r40;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd45;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd46;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 22
	ld.u64 	%rd83, [%rd14+16];
	ld.u32 	%r68, [%rd83];

BB12_8:
	sub.s32 	%r42, %r20, %r68;
	setp.le.s32	%p5, %r42, %r3;
	@%p5 bra 	BB12_10;

	mov.u64 	%rd47, $str4;
	cvta.global.u64 	%rd48, %rd47;
	mov.u64 	%rd49, $str1;
	cvta.global.u64 	%rd50, %rd49;
	mov.u64 	%rd51, __unnamed_9;
	cvta.global.u64 	%rd52, %rd51;
	mov.u32 	%r43, 616;
	mov.u64 	%rd53, 1;
	// Callseq Start 23
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd48;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd50;
	.param .b32 param2;
	st.param.b32	[param2+0], %r43;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd52;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd53;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 23
	ld.u64 	%rd83, [%rd14+16];
	ld.u32 	%r68, [%rd83];

BB12_10:
	ld.u32 	%r44, [%rd83+20];
	add.s32 	%r45, %r68, %r44;
	setp.ge.s32	%p6, %r45, %r1;
	@%p6 bra 	BB12_12;

	mov.u64 	%rd54, $str5;
	cvta.global.u64 	%rd55, %rd54;
	mov.u64 	%rd56, $str1;
	cvta.global.u64 	%rd57, %rd56;
	mov.u64 	%rd58, __unnamed_9;
	cvta.global.u64 	%rd59, %rd58;
	mov.u32 	%r46, 617;
	mov.u64 	%rd60, 1;
	// Callseq Start 24
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd55;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd57;
	.param .b32 param2;
	st.param.b32	[param2+0], %r46;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd59;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd60;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 24
	ld.u64 	%rd83, [%rd14+16];
	ld.u32 	%r68, [%rd83];

BB12_12:
	ld.u32 	%r47, [%rd83+24];
	add.s32 	%r48, %r68, %r47;
	setp.ge.s32	%p7, %r48, %r2;
	@%p7 bra 	BB12_14;

	mov.u64 	%rd61, $str6;
	cvta.global.u64 	%rd62, %rd61;
	mov.u64 	%rd63, $str1;
	cvta.global.u64 	%rd64, %rd63;
	mov.u64 	%rd65, __unnamed_9;
	cvta.global.u64 	%rd66, %rd65;
	mov.u32 	%r49, 618;
	mov.u64 	%rd67, 1;
	// Callseq Start 25
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd62;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd64;
	.param .b32 param2;
	st.param.b32	[param2+0], %r49;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd66;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd67;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 25
	ld.u64 	%rd83, [%rd14+16];
	ld.u32 	%r68, [%rd83];

BB12_14:
	ld.u32 	%r50, [%rd83+28];
	add.s32 	%r51, %r68, %r50;
	setp.ge.s32	%p8, %r51, %r3;
	@%p8 bra 	BB12_16;

	mov.u64 	%rd68, $str7;
	cvta.global.u64 	%rd69, %rd68;
	mov.u64 	%rd70, $str1;
	cvta.global.u64 	%rd71, %rd70;
	mov.u64 	%rd72, __unnamed_9;
	cvta.global.u64 	%rd73, %rd72;
	mov.u32 	%r52, 619;
	mov.u64 	%rd74, 1;
	// Callseq Start 26
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd69;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd71;
	.param .b32 param2;
	st.param.b32	[param2+0], %r52;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd73;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd74;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 26
	ld.u64 	%rd83, [%rd14+16];
	ld.u32 	%r68, [%rd83];

BB12_16:
	add.s32 	%r53, %r1, %r68;
	add.s32 	%r54, %r53, -1;
	ld.u32 	%r55, [%rd83+44];
	mul.lo.s32 	%r56, %r54, %r55;
	add.s32 	%r57, %r2, %r68;
	add.s32 	%r58, %r57, -1;
	ld.u32 	%r59, [%rd83+48];
	mad.lo.s32 	%r60, %r58, %r59, %r56;
	add.s32 	%r61, %r3, %r68;
	add.s32 	%r62, %r61, -1;
	ld.u32 	%r63, [%rd83+52];
	mad.lo.s32 	%r64, %r62, %r63, %r60;
	setp.eq.s32	%p9, %r64, %r17;
	@%p9 bra 	BB12_18;

	mov.u64 	%rd75, $str9;
	cvta.global.u64 	%rd76, %rd75;
	mov.u64 	%rd77, $str1;
	cvta.global.u64 	%rd78, %rd77;
	mov.u64 	%rd79, __unnamed_13;
	cvta.global.u64 	%rd80, %rd79;
	mov.u32 	%r65, 791;
	mov.u64 	%rd81, 1;
	// Callseq Start 27
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd76;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd78;
	.param .b32 param2;
	st.param.b32	[param2+0], %r65;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd80;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd81;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 27

BB12_18:
	mov.u32 	%r66, 0;
	st.param.b32	[func_retval0+0], %r66;
	ret;
}

	// .globl	_Z10cs_stridesP8coords_sPiS1_S1_
.visible .func  (.param .b32 func_retval0) _Z10cs_stridesP8coords_sPiS1_S1_(
	.param .b64 _Z10cs_stridesP8coords_sPiS1_S1__param_0,
	.param .b64 _Z10cs_stridesP8coords_sPiS1_S1__param_1,
	.param .b64 _Z10cs_stridesP8coords_sPiS1_S1__param_2,
	.param .b64 _Z10cs_stridesP8coords_sPiS1_S1__param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd1, [_Z10cs_stridesP8coords_sPiS1_S1__param_0];
	ld.param.u64 	%rd2, [_Z10cs_stridesP8coords_sPiS1_S1__param_1];
	ld.param.u64 	%rd3, [_Z10cs_stridesP8coords_sPiS1_S1__param_2];
	ld.param.u64 	%rd4, [_Z10cs_stridesP8coords_sPiS1_S1__param_3];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB13_2;

	mov.u64 	%rd5, $str;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, $str1;
	cvta.global.u64 	%rd8, %rd7;
	mov.u64 	%rd9, __unnamed_14;
	cvta.global.u64 	%rd10, %rd9;
	mov.u32 	%r1, 805;
	mov.u64 	%rd11, 1;
	// Callseq Start 28
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd10;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd11;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 28

BB13_2:
	ld.u64 	%rd12, [%rd1+16];
	ld.u32 	%r2, [%rd12+44];
	st.u32 	[%rd2], %r2;
	ld.u64 	%rd13, [%rd1+16];
	ld.u32 	%r3, [%rd13+48];
	st.u32 	[%rd3], %r3;
	ld.u64 	%rd14, [%rd1+16];
	ld.u32 	%r4, [%rd14+52];
	st.u32 	[%rd4], %r4;
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	_Z7cs_nallP8coords_sPi
.visible .func  (.param .b32 func_retval0) _Z7cs_nallP8coords_sPi(
	.param .b64 _Z7cs_nallP8coords_sPi_param_0,
	.param .b64 _Z7cs_nallP8coords_sPi_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [_Z7cs_nallP8coords_sPi_param_0];
	ld.param.u64 	%rd2, [_Z7cs_nallP8coords_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB14_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_15;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 885;
	mov.u64 	%rd9, 1;
	// Callseq Start 29
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 29

BB14_2:
	ld.u64 	%rd10, [%rd1+16];
	ld.u32 	%r2, [%rd10];
	shl.b32 	%r3, %r2, 1;
	ld.u32 	%r4, [%rd10+20];
	add.s32 	%r5, %r3, %r4;
	st.u32 	[%rd2], %r5;
	ld.u64 	%rd11, [%rd1+16];
	ld.u32 	%r6, [%rd11];
	shl.b32 	%r7, %r6, 1;
	ld.u32 	%r8, [%rd11+24];
	add.s32 	%r9, %r7, %r8;
	st.u32 	[%rd2+4], %r9;
	ld.u64 	%rd12, [%rd1+16];
	ld.u32 	%r10, [%rd12];
	shl.b32 	%r11, %r10, 1;
	ld.u32 	%r12, [%rd12+28];
	add.s32 	%r13, %r11, %r12;
	st.u32 	[%rd2+8], %r13;
	mov.u32 	%r14, 0;
	st.param.b32	[func_retval0+0], %r14;
	ret;
}


