typedef char __nv_bool;
# 58 ".././mpi_s/mpi.h"
enum elementary_datatypes {
# 58 ".././mpi_s/mpi.h"
MPI_CHAR,
# 59 ".././mpi_s/mpi.h"
MPI_SHORT,
# 60 ".././mpi_s/mpi.h"
MPI_INT,
# 61 ".././mpi_s/mpi.h"
MPI_LONG,
# 62 ".././mpi_s/mpi.h"
MPI_UNSIGNED_CHAR,
# 63 ".././mpi_s/mpi.h"
MPI_UNSIGNED_SHORT,
# 64 ".././mpi_s/mpi.h"
MPI_UNSIGNED,
# 65 ".././mpi_s/mpi.h"
MPI_UNSIGNED_LONG,
# 66 ".././mpi_s/mpi.h"
MPI_FLOAT,
# 67 ".././mpi_s/mpi.h"
MPI_DOUBLE,
# 68 ".././mpi_s/mpi.h"
MPI_LONG_DOUBLE,
# 69 ".././mpi_s/mpi.h"
MPI_BYTE,
# 70 ".././mpi_s/mpi.h"
MPI_PACKED};
# 72 ".././mpi_s/mpi.h"
enum collective_operations {
# 72 ".././mpi_s/mpi.h"
MPI_MAX,
# 73 ".././mpi_s/mpi.h"
MPI_MIN,
# 74 ".././mpi_s/mpi.h"
MPI_SUM,
# 75 ".././mpi_s/mpi.h"
MPI_PROD,
# 76 ".././mpi_s/mpi.h"
MPI_MAXLOC,
# 77 ".././mpi_s/mpi.h"
MPI_MINLOC,
# 78 ".././mpi_s/mpi.h"
MPI_BAND,
# 79 ".././mpi_s/mpi.h"
MPI_BOR,
# 80 ".././mpi_s/mpi.h"
MPI_BXOR,
# 81 ".././mpi_s/mpi.h"
MPI_LAND,
# 82 ".././mpi_s/mpi.h"
MPI_LOR,
# 83 ".././mpi_s/mpi.h"
MPI_LXOR};
# 22 "pe.h"
struct pe_s;
# 22 "coords.h"
struct coords_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 36 "colloid.h"
enum colloid_type_enum {
# 36 "colloid.h"
COLLOID_TYPE_DEFAULT,
# 37 "colloid.h"
COLLOID_TYPE_ACTIVE,
# 38 "colloid.h"
COLLOID_TYPE_SUBGRID,
# 39 "colloid.h"
COLLOID_TYPE_JANUS};
# 44 "colloid.h"
struct colloid_state_type;
# 24 "colloid_link.h"
struct colloid_link_type;
# 26 "colloids.h"
struct colloid;
# 65 "colloids.h"
struct colloids_info_s;
# 30 "timer.h"
enum timer_id {
# 30 "timer.h"
TIMER_TOTAL,
# 31 "timer.h"
TIMER_STEPS,
# 32 "timer.h"
TIMER_PROPAGATE,
# 33 "timer.h"
TIMER_PROP_KERNEL,
# 34 "timer.h"
TIMER_COLLIDE,
# 35 "timer.h"
TIMER_COLLIDE_KERNEL,
# 36 "timer.h"
TIMER_HALO_LATTICE,
# 37 "timer.h"
TIMER_PHI_GRADIENTS,
# 38 "timer.h"
TIMER_PHI_GRAD_KERNEL,
# 39 "timer.h"
TIMER_PHI_HALO,
# 40 "timer.h"
TIMER_LE,
# 41 "timer.h"
TIMER_IO,
# 42 "timer.h"
TIMER_FORCES,
# 43 "timer.h"
TIMER_REBUILD,
# 44 "timer.h"
TIMER_BBL,
# 45 "timer.h"
TIMER_PARTICLE_UPDATE,
# 46 "timer.h"
TIMER_PARTICLE_HALO,
# 47 "timer.h"
TIMER_FLUCTUATIONS,
# 48 "timer.h"
TIMER_EWALD_TOTAL,
# 49 "timer.h"
TIMER_EWALD_REAL_SPACE,
# 50 "timer.h"
TIMER_EWALD_FOURIER_SPACE,
# 51 "timer.h"
TIMER_FORCE_CALCULATION,
# 52 "timer.h"
TIMER_CHEMICAL_STRESS_KERNEL,
# 53 "timer.h"
TIMER_PHI_FORCE_CALC,
# 54 "timer.h"
TIMER_ORDER_PARAMETER_UPDATE,
# 55 "timer.h"
TIMER_U_HALO,
# 56 "timer.h"
TIMER_BE_MOL_FIELD,
# 57 "timer.h"
BP_BE_UPDATE_KERNEL,
# 58 "timer.h"
ADVECTION_X_KERNEL,
# 59 "timer.h"
ADVECTION_BCS_KERNEL,
# 60 "timer.h"
ADVECTION_BCS_MEM,
# 61 "timer.h"
TIMER_ELECTRO_TOTAL,
# 62 "timer.h"
TIMER_ELECTRO_POISSON,
# 63 "timer.h"
TIMER_ELECTRO_NPEQ,
# 64 "timer.h"
TIMER_FREE1,
# 65 "timer.h"
TIMER_FREE2,
# 66 "timer.h"
TIMER_FREE3,
# 67 "timer.h"
TIMER_NTIMERS};
# 50 "ewald.c"
struct ewald_s;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 25 ".././mpi_s/mpi.h"
typedef int MPI_Handle;
# 26 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Comm;
# 28 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Datatype;
# 30 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Op;
# 22 "pe.h"
typedef struct pe_s pe_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 42 "colloid.h"
typedef struct colloid_state_type colloid_state_t;
# 44 "colloid.h"
struct colloid_state_type {
# 46 "colloid.h"
int index;
# 47 "colloid.h"
int rebuild;
# 48 "colloid.h"
int nbonds;
# 49 "colloid.h"
int nangles;
# 51 "colloid.h"
int isfixedr;
# 52 "colloid.h"
int isfixedv;
# 53 "colloid.h"
int isfixedw;
# 54 "colloid.h"
int isfixeds;
# 56 "colloid.h"
int type;
# 57 "colloid.h"
int bond[2];
# 59 "colloid.h"
int rng;
# 61 "colloid.h"
int isfixedrxyz[3];
# 62 "colloid.h"
int isfixedvxyz[3];
# 67 "colloid.h"
int intpad[14];
# 71 "colloid.h"
double a0;
# 72 "colloid.h"
double ah;
# 73 "colloid.h"
double r[3];
# 74 "colloid.h"
double v[3];
# 75 "colloid.h"
double w[3];
# 76 "colloid.h"
double s[3];
# 77 "colloid.h"
double m[3];
# 78 "colloid.h"
double b1;
# 79 "colloid.h"
double b2;
# 80 "colloid.h"
double c;
# 81 "colloid.h"
double h;
# 82 "colloid.h"
double dr[3];
# 83 "colloid.h"
double deltaphi;
# 92 "colloid.h"
double q0;
# 93 "colloid.h"
double q1;
# 94 "colloid.h"
double epsilon;
# 96 "colloid.h"
double deltaq0;
# 97 "colloid.h"
double deltaq1;
# 98 "colloid.h"
double sa;
# 99 "colloid.h"
double saf;
# 101 "colloid.h"
double dpad[16];};
# 22 "colloid_link.h"
typedef struct colloid_link_type colloid_link_t;
# 24 "colloids.h"
typedef struct colloid colloid_t;
# 26 "colloids.h"
struct colloid {
# 28 "colloids.h"
colloid_state_t s;
# 32 "colloids.h"
double random[6];
# 33 "colloids.h"
double force[3];
# 34 "colloids.h"
double torque[3];
# 35 "colloids.h"
double f0[3];
# 36 "colloids.h"
double t0[3];
# 37 "colloids.h"
double cbar[3];
# 38 "colloids.h"
double rxcbar[3];
# 39 "colloids.h"
double deltam;
# 40 "colloids.h"
double sumw;
# 41 "colloids.h"
double zeta[21];
# 42 "colloids.h"
double stats[3];
# 43 "colloids.h"
double fc0[3];
# 44 "colloids.h"
double tc0[3];
# 45 "colloids.h"
double sump;
# 46 "colloids.h"
double dq[2];
# 48 "colloids.h"
double fsub[3];
# 49 "colloids.h"
double fex[3];
# 50 "colloids.h"
double tex[3];
# 54 "colloids.h"
colloid_link_t *lnk;
# 55 "colloids.h"
colloid_t *next;
# 57 "colloids.h"
colloid_t *nextall;
# 58 "colloids.h"
colloid_t *nextlocal;
# 62 "colloids.h"
colloid_t *bonded[2];};
# 65 "colloids.h"
typedef struct colloids_info_s colloids_info_t;
# 21 "ewald.h"
typedef struct ewald_s ewald_t;
# 50 "ewald.c"
struct ewald_s {
# 51 "ewald.c"
pe_t *pe;
# 52 "ewald.c"
cs_t *cs;
# 53 "ewald.c"
colloids_info_t *cinfo;};
# 149 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__malloc__)) __attribute__((__nothrow__)) void *malloc(size_t);
# 150 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) void free(void *);
#if !defined(__CUDABE__)
# 192 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) int abs(int);
#endif
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
#if !defined(__CUDABE__)
# 430 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double sin(double);
#endif
#if !defined(__CUDABE__)
# 463 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double cos(double);
#endif
#if !defined(__CUDABE__)
# 612 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double sqrt(double);
#endif
#if !defined(__CUDABE__)
# 1486 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double exp(double);
#endif
#if !defined(__CUDABE__)
# 2920 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) double ceil(double);
#endif
#if !defined(__CUDABE__)
# 6219 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double erfc(double);
#endif
# 57 "coords.h"
___device__(extern  __no_sc__) int _Z7cs_ltotP8coords_sPd(cs_t *, double *);
# 65 "coords.h"
___device__(extern  __no_sc__) int _Z19cs_minimum_distanceP8coords_sPKdS2_Pd(cs_t *, const double *, const double *, double *);
# 41 "util.h"
___device__(extern  __no_sc__) double _Z11dot_productPKdS0_(const double *, const double *);
#include "common_functions.h"
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
