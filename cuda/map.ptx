//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_35
.address_size 64

	// .globl	_Z10map_statusP5map_siPi
.extern .func  (.param .b32 func_retval0) _Z25reverse_addr_rank0_assertiPKcii
(
	.param .b32 _Z25reverse_addr_rank0_assertiPKcii_param_0,
	.param .b64 _Z25reverse_addr_rank0_assertiPKcii_param_1,
	.param .b32 _Z25reverse_addr_rank0_assertiPKcii_param_2,
	.param .b32 _Z25reverse_addr_rank0_assertiPKcii_param_3
)
;
.extern .func  (.param .b32 func_retval0) _Z25reverse_addr_rank1_assertiPKciiii
(
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_0,
	.param .b64 _Z25reverse_addr_rank1_assertiPKciiii_param_1,
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_2,
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_3,
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_4,
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_5
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 1 .b8 __unnamed_1[36] = {105, 110, 116, 32, 109, 97, 112, 95, 115, 116, 97, 116, 117, 115, 40, 109, 97, 112, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_2[38] = {105, 110, 116, 32, 109, 97, 112, 95, 115, 116, 97, 116, 117, 115, 95, 115, 101, 116, 40, 109, 97, 112, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 41, 0};
.global .align 1 .b8 __unnamed_3[30] = {105, 110, 116, 32, 109, 97, 112, 95, 110, 100, 97, 116, 97, 40, 109, 97, 112, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_4[37] = {105, 110, 116, 32, 109, 97, 112, 95, 100, 97, 116, 97, 40, 109, 97, 112, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_5[41] = {105, 110, 116, 32, 109, 97, 112, 95, 100, 97, 116, 97, 95, 115, 101, 116, 40, 109, 97, 112, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 $str[4] = {111, 98, 106, 0};
.global .align 1 .b8 $str1[6] = {109, 97, 112, 46, 99, 0};
.global .align 1 .b8 $str2[7] = {115, 116, 97, 116, 117, 115, 0};
.global .align 1 .b8 $str3[12] = {115, 116, 97, 116, 117, 115, 32, 62, 61, 32, 48, 0};
.global .align 1 .b8 $str4[24] = {115, 116, 97, 116, 117, 115, 32, 60, 32, 77, 65, 80, 95, 83, 84, 65, 84, 85, 83, 95, 77, 65, 88, 0};
.global .align 1 .b8 $str5[6] = {110, 100, 97, 116, 97, 0};
.global .align 1 .b8 $str6[5] = {100, 97, 116, 97, 0};

.visible .func  (.param .b32 func_retval0) _Z10map_statusP5map_siPi(
	.param .b64 _Z10map_statusP5map_siPi_param_0,
	.param .b32 _Z10map_statusP5map_siPi_param_1,
	.param .b64 _Z10map_statusP5map_siPi_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<22>;


	ld.param.u64 	%rd1, [_Z10map_statusP5map_siPi_param_0];
	ld.param.u32 	%r1, [_Z10map_statusP5map_siPi_param_1];
	ld.param.u64 	%rd2, [_Z10map_statusP5map_siPi_param_2];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB0_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_1;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r2, 299;
	mov.u64 	%rd9, 1;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB0_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB0_4;

	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str1;
	cvta.global.u64 	%rd13, %rd12;
	mov.u64 	%rd14, __unnamed_1;
	cvta.global.u64 	%rd15, %rd14;
	mov.u32 	%r3, 300;
	mov.u64 	%rd16, 1;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r3;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd15;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd16;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB0_4:
	ld.u64 	%rd17, [%rd1+16];
	ld.u32 	%r4, [%rd1];
	mov.u64 	%rd18, $str1;
	cvta.global.u64 	%rd19, %rd18;
	mov.u32 	%r5, 302;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd19;
	.param .b32 param2;
	st.param.b32	[param2+0], %r4;
	.param .b32 param3;
	st.param.b32	[param3+0], %r1;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank0_assertiPKcii, 
	(
	param0, 
	param1, 
	param2, 
	param3
	);
	ld.param.b32	%r6, [retval0+0];
	
	//{
	}// Callseq End 2
	cvt.s64.s32	%rd20, %r6;
	add.s64 	%rd21, %rd17, %rd20;
	ld.s8 	%r7, [%rd21];
	st.u32 	[%rd2], %r7;
	mov.u32 	%r8, 0;
	st.param.b32	[func_retval0+0], %r8;
	ret;
}

	// .globl	_Z14map_status_setP5map_sii
.visible .func  (.param .b32 func_retval0) _Z14map_status_setP5map_sii(
	.param .b64 _Z14map_status_setP5map_sii_param_0,
	.param .b32 _Z14map_status_setP5map_sii_param_1,
	.param .b32 _Z14map_status_setP5map_sii_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<28>;


	ld.param.u64 	%rd1, [_Z14map_status_setP5map_sii_param_0];
	ld.param.u32 	%r1, [_Z14map_status_setP5map_sii_param_1];
	ld.param.u32 	%r2, [_Z14map_status_setP5map_sii_param_2];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd2, $str;
	cvta.global.u64 	%rd3, %rd2;
	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, __unnamed_2;
	cvta.global.u64 	%rd7, %rd6;
	mov.u32 	%r3, 316;
	mov.u64 	%rd8, 1;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd3;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b32 param2;
	st.param.b32	[param2+0], %r3;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd7;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd8;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB1_2:
	setp.gt.s32	%p2, %r2, -1;
	@%p2 bra 	BB1_4;

	mov.u64 	%rd9, $str3;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, $str1;
	cvta.global.u64 	%rd12, %rd11;
	mov.u64 	%rd13, __unnamed_2;
	cvta.global.u64 	%rd14, %rd13;
	mov.u32 	%r4, 317;
	mov.u64 	%rd15, 1;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 param2;
	st.param.b32	[param2+0], %r4;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd14;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd15;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB1_4:
	setp.lt.s32	%p3, %r2, 3;
	@%p3 bra 	BB1_6;

	mov.u64 	%rd16, $str4;
	cvta.global.u64 	%rd17, %rd16;
	mov.u64 	%rd18, $str1;
	cvta.global.u64 	%rd19, %rd18;
	mov.u64 	%rd20, __unnamed_2;
	cvta.global.u64 	%rd21, %rd20;
	mov.u32 	%r5, 318;
	mov.u64 	%rd22, 1;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd17;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd19;
	.param .b32 param2;
	st.param.b32	[param2+0], %r5;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd21;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd22;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB1_6:
	ld.u64 	%rd23, [%rd1+16];
	ld.u32 	%r6, [%rd1];
	mov.u64 	%rd24, $str1;
	cvta.global.u64 	%rd25, %rd24;
	mov.u32 	%r7, 320;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd25;
	.param .b32 param2;
	st.param.b32	[param2+0], %r6;
	.param .b32 param3;
	st.param.b32	[param3+0], %r1;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank0_assertiPKcii, 
	(
	param0, 
	param1, 
	param2, 
	param3
	);
	ld.param.b32	%r8, [retval0+0];
	
	//{
	}// Callseq End 6
	cvt.s64.s32	%rd26, %r8;
	add.s64 	%rd27, %rd23, %rd26;
	st.u8 	[%rd27], %r2;
	mov.u32 	%r9, 0;
	st.param.b32	[func_retval0+0], %r9;
	ret;
}

	// .globl	_Z9map_ndataP5map_sPi
.visible .func  (.param .b32 func_retval0) _Z9map_ndataP5map_sPi(
	.param .b64 _Z9map_ndataP5map_sPi_param_0,
	.param .b64 _Z9map_ndataP5map_sPi_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd1, [_Z9map_ndataP5map_sPi_param_0];
	ld.param.u64 	%rd2, [_Z9map_ndataP5map_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_3;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 334;
	mov.u64 	%rd9, 1;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB2_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB2_4;

	mov.u64 	%rd10, $str5;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str1;
	cvta.global.u64 	%rd13, %rd12;
	mov.u64 	%rd14, __unnamed_3;
	cvta.global.u64 	%rd15, %rd14;
	mov.u32 	%r2, 335;
	mov.u64 	%rd16, 1;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd15;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd16;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB2_4:
	ld.u32 	%r3, [%rd1+8];
	st.u32 	[%rd2], %r3;
	mov.u32 	%r4, 0;
	st.param.b32	[func_retval0+0], %r4;
	ret;
}

	// .globl	_Z8map_dataP5map_siPd
.visible .func  (.param .b32 func_retval0) _Z8map_dataP5map_siPd(
	.param .b64 _Z8map_dataP5map_siPd_param_0,
	.param .b32 _Z8map_dataP5map_siPd_param_1,
	.param .b64 _Z8map_dataP5map_siPd_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<16>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<26>;


	ld.param.u64 	%rd4, [_Z8map_dataP5map_siPd_param_0];
	ld.param.u32 	%r6, [_Z8map_dataP5map_siPd_param_1];
	ld.param.u64 	%rd25, [_Z8map_dataP5map_siPd_param_2];
	setp.ne.s64	%p1, %rd4, 0;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd6, $str;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, $str1;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, __unnamed_4;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r7, 353;
	mov.u64 	%rd12, 1;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r7;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd11;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd12;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9

BB3_2:
	setp.ne.s64	%p2, %rd25, 0;
	@%p2 bra 	BB3_4;

	mov.u64 	%rd13, $str6;
	cvta.global.u64 	%rd14, %rd13;
	mov.u64 	%rd15, $str1;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, __unnamed_4;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r8, 354;
	mov.u64 	%rd19, 1;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd14;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd16;
	.param .b32 param2;
	st.param.b32	[param2+0], %r8;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 10

BB3_4:
	add.s64 	%rd1, %rd4, 8;
	ld.u32 	%r14, [%rd4+8];
	setp.lt.s32	%p3, %r14, 1;
	@%p3 bra 	BB3_7;

	mov.u32 	%r15, 0;

BB3_6:
	ld.u64 	%rd20, [%rd1+16];
	ld.u32 	%r10, [%rd1+-8];
	mov.u64 	%rd21, $str1;
	cvta.global.u64 	%rd22, %rd21;
	mov.u32 	%r11, 357;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd22;
	.param .b32 param2;
	st.param.b32	[param2+0], %r10;
	.param .b32 param3;
	st.param.b32	[param3+0], %r14;
	.param .b32 param4;
	st.param.b32	[param4+0], %r6;
	.param .b32 param5;
	st.param.b32	[param5+0], %r15;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r12, [retval0+0];
	
	//{
	}// Callseq End 11
	mul.wide.s32 	%rd23, %r12, 8;
	add.s64 	%rd24, %rd20, %rd23;
	ld.f64 	%fd1, [%rd24];
	st.f64 	[%rd25], %fd1;
	add.s64 	%rd25, %rd25, 8;
	ld.u32 	%r14, [%rd1];
	add.s32 	%r15, %r15, 1;
	setp.lt.s32	%p4, %r15, %r14;
	@%p4 bra 	BB3_6;

BB3_7:
	mov.u32 	%r13, 0;
	st.param.b32	[func_retval0+0], %r13;
	ret;
}

	// .globl	_Z12map_data_setP5map_siPd
.visible .func  (.param .b32 func_retval0) _Z12map_data_setP5map_siPd(
	.param .b64 _Z12map_data_setP5map_siPd_param_0,
	.param .b32 _Z12map_data_setP5map_siPd_param_1,
	.param .b64 _Z12map_data_setP5map_siPd_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<16>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<26>;


	ld.param.u64 	%rd4, [_Z12map_data_setP5map_siPd_param_0];
	ld.param.u32 	%r6, [_Z12map_data_setP5map_siPd_param_1];
	ld.param.u64 	%rd25, [_Z12map_data_setP5map_siPd_param_2];
	setp.ne.s64	%p1, %rd4, 0;
	@%p1 bra 	BB4_2;

	mov.u64 	%rd6, $str;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, $str1;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, __unnamed_5;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r7, 374;
	mov.u64 	%rd12, 1;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r7;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd11;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd12;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB4_2:
	setp.ne.s64	%p2, %rd25, 0;
	@%p2 bra 	BB4_4;

	mov.u64 	%rd13, $str6;
	cvta.global.u64 	%rd14, %rd13;
	mov.u64 	%rd15, $str1;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, __unnamed_5;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r8, 375;
	mov.u64 	%rd19, 1;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd14;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd16;
	.param .b32 param2;
	st.param.b32	[param2+0], %r8;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13

BB4_4:
	add.s64 	%rd1, %rd4, 8;
	ld.u32 	%r14, [%rd4+8];
	setp.lt.s32	%p3, %r14, 1;
	@%p3 bra 	BB4_7;

	mov.u32 	%r15, 0;

BB4_6:
	ld.f64 	%fd1, [%rd25];
	ld.u64 	%rd20, [%rd1+16];
	ld.u32 	%r10, [%rd1+-8];
	mov.u64 	%rd21, $str1;
	cvta.global.u64 	%rd22, %rd21;
	mov.u32 	%r11, 378;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd22;
	.param .b32 param2;
	st.param.b32	[param2+0], %r10;
	.param .b32 param3;
	st.param.b32	[param3+0], %r14;
	.param .b32 param4;
	st.param.b32	[param4+0], %r6;
	.param .b32 param5;
	st.param.b32	[param5+0], %r15;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r12, [retval0+0];
	
	//{
	}// Callseq End 14
	mul.wide.s32 	%rd23, %r12, 8;
	add.s64 	%rd24, %rd20, %rd23;
	st.f64 	[%rd24], %fd1;
	add.s64 	%rd25, %rd25, 8;
	ld.u32 	%r14, [%rd1];
	add.s32 	%r15, %r15, 1;
	setp.lt.s32	%p4, %r15, %r14;
	@%p4 bra 	BB4_6;

BB4_7:
	mov.u32 	%r13, 0;
	st.param.b32	[func_retval0+0], %r13;
	ret;
}


