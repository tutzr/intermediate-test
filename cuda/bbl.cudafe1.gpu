typedef char __nv_bool;
# 2074 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/driver_types.h"
struct CUstream_st;
# 58 ".././mpi_s/mpi.h"
enum elementary_datatypes {
# 58 ".././mpi_s/mpi.h"
MPI_CHAR,
# 59 ".././mpi_s/mpi.h"
MPI_SHORT,
# 60 ".././mpi_s/mpi.h"
MPI_INT,
# 61 ".././mpi_s/mpi.h"
MPI_LONG,
# 62 ".././mpi_s/mpi.h"
MPI_UNSIGNED_CHAR,
# 63 ".././mpi_s/mpi.h"
MPI_UNSIGNED_SHORT,
# 64 ".././mpi_s/mpi.h"
MPI_UNSIGNED,
# 65 ".././mpi_s/mpi.h"
MPI_UNSIGNED_LONG,
# 66 ".././mpi_s/mpi.h"
MPI_FLOAT,
# 67 ".././mpi_s/mpi.h"
MPI_DOUBLE,
# 68 ".././mpi_s/mpi.h"
MPI_LONG_DOUBLE,
# 69 ".././mpi_s/mpi.h"
MPI_BYTE,
# 70 ".././mpi_s/mpi.h"
MPI_PACKED};
# 72 ".././mpi_s/mpi.h"
enum collective_operations {
# 72 ".././mpi_s/mpi.h"
MPI_MAX,
# 73 ".././mpi_s/mpi.h"
MPI_MIN,
# 74 ".././mpi_s/mpi.h"
MPI_SUM,
# 75 ".././mpi_s/mpi.h"
MPI_PROD,
# 76 ".././mpi_s/mpi.h"
MPI_MAXLOC,
# 77 ".././mpi_s/mpi.h"
MPI_MINLOC,
# 78 ".././mpi_s/mpi.h"
MPI_BAND,
# 79 ".././mpi_s/mpi.h"
MPI_BOR,
# 80 ".././mpi_s/mpi.h"
MPI_BXOR,
# 81 ".././mpi_s/mpi.h"
MPI_LAND,
# 82 ".././mpi_s/mpi.h"
MPI_LOR,
# 83 ".././mpi_s/mpi.h"
MPI_LXOR};
# 22 "pe.h"
struct pe_s;
# 22 "coords.h"
struct coords_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 18 "physics.h"
struct physics_s;
# 36 "colloid.h"
enum colloid_type_enum {
# 36 "colloid.h"
COLLOID_TYPE_DEFAULT,
# 37 "colloid.h"
COLLOID_TYPE_ACTIVE,
# 38 "colloid.h"
COLLOID_TYPE_SUBGRID,
# 39 "colloid.h"
COLLOID_TYPE_JANUS};
# 44 "colloid.h"
struct colloid_state_type;
# 24 "colloid_link.h"
struct colloid_link_type;
# 37 "colloid_link.h"
enum link_status {
# 37 "colloid_link.h"
LINK_FLUID,
# 37 "colloid_link.h"
LINK_COLLOID,
# 37 "colloid_link.h"
LINK_BOUNDARY,
# 37 "colloid_link.h"
LINK_UNUSED};
# 26 "colloids.h"
struct colloid;
# 23 "colloid_sums.h"
enum colloid_sum_enum_type {
# 24 "colloid_sums.h"
COLLOID_SUM_NULL,
# 25 "colloid_sums.h"
COLLOID_SUM_STRUCTURE,
# 26 "colloid_sums.h"
COLLOID_SUM_DYNAMICS,
# 27 "colloid_sums.h"
COLLOID_SUM_ACTIVE,
# 28 "colloid_sums.h"
COLLOID_SUM_SUBGRID,
# 29 "colloid_sums.h"
COLLOID_SUM_CONSERVATION,
# 30 "colloid_sums.h"
COLLOID_SUM_FORCE_EXT_ONLY,
# 31 "colloid_sums.h"
COLLOID_SUM_MAX};
# 21 "d3q19.h"
enum _ZUt0_ {
# 21 "d3q19.h"
NDIM19 = 3};
# 22 "d3q19.h"
enum _ZUt1_ {
# 22 "d3q19.h"
NVEL19 = 19};
# 23 "d3q19.h"
enum _ZUt2_ {
# 23 "d3q19.h"
CVXBLOCK19 = 1};
# 24 "d3q19.h"
enum _ZUt3_ {
# 24 "d3q19.h"
CVYBLOCK19 = 3};
# 25 "d3q19.h"
enum _ZUt4_ {
# 25 "d3q19.h"
CVZBLOCK19 = 5};
# 49 "model.h"
enum _ZUt5_ {
# 49 "model.h"
NDIM = 3,
# 50 "model.h"
NVEL = 19,
# 51 "model.h"
CVXBLOCK = 1,
# 52 "model.h"
CVYBLOCK = 3,
# 53 "model.h"
CVZBLOCK = 5};
# 73 "io_harness.h"
struct io_info_s;
# 79 "model.h"
enum lb_dist_enum_type {
# 79 "model.h"
LB_RHO,
# 79 "model.h"
LB_PHI};
# 88 "model.h"
enum lb_relaxation_enum_t {
# 88 "model.h"
LB_RELAXATION_M10,
# 88 "model.h"
LB_RELAXATION_BGK,
# 88 "model.h"
LB_RELAXATION_TRT};
# 23 "kernel.h"
struct kernel_param_s;
# 28 "kernel.h"
struct kernel_ctxt_s;
# 37 "kernel.h"
struct kernel_info_s;
# 23 "halo_swap.h"
struct halo_swap_s;
# 27 "lb_model_s.h"
struct lb_collide_param_s;
# 45 "lb_model_s.h"
struct lb_data_s;
# 25 "wall.h"
struct wall_s;
# 24 "colloids_s.h"
struct colloids_info_s;
# 36 "bbl.c"
struct bbl_s;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 194 "/usr/include/sys/types.h" 3
typedef signed char int8_t;
# 25 ".././mpi_s/mpi.h"
typedef int MPI_Handle;
# 26 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Comm;
# 28 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Datatype;
# 30 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Op;
# 28 ".././target/target_cuda.h"
typedef enum cudaMemcpyKind tdpMemcpyKind;
# 47 ".././target/target_cuda.h"
typedef enum cudaError tdpError_t;
# 22 "pe.h"
typedef struct pe_s pe_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 18 "physics.h"
typedef struct physics_s physics_t;
# 41 "colloid.h"
typedef enum colloid_type_enum colloid_type_enum_t;
# 42 "colloid.h"
typedef struct colloid_state_type colloid_state_t;
# 44 "colloid.h"
struct colloid_state_type {
# 46 "colloid.h"
int index;
# 47 "colloid.h"
int rebuild;
# 48 "colloid.h"
int nbonds;
# 49 "colloid.h"
int nangles;
# 51 "colloid.h"
int isfixedr;
# 52 "colloid.h"
int isfixedv;
# 53 "colloid.h"
int isfixedw;
# 54 "colloid.h"
int isfixeds;
# 56 "colloid.h"
int type;
# 57 "colloid.h"
int bond[2];
# 59 "colloid.h"
int rng;
# 61 "colloid.h"
int isfixedrxyz[3];
# 62 "colloid.h"
int isfixedvxyz[3];
# 67 "colloid.h"
int intpad[14];
# 71 "colloid.h"
double a0;
# 72 "colloid.h"
double ah;
# 73 "colloid.h"
double r[3];
# 74 "colloid.h"
double v[3];
# 75 "colloid.h"
double w[3];
# 76 "colloid.h"
double s[3];
# 77 "colloid.h"
double m[3];
# 78 "colloid.h"
double b1;
# 79 "colloid.h"
double b2;
# 80 "colloid.h"
double c;
# 81 "colloid.h"
double h;
# 82 "colloid.h"
double dr[3];
# 83 "colloid.h"
double deltaphi;
# 92 "colloid.h"
double q0;
# 93 "colloid.h"
double q1;
# 94 "colloid.h"
double epsilon;
# 96 "colloid.h"
double deltaq0;
# 97 "colloid.h"
double deltaq1;
# 98 "colloid.h"
double sa;
# 99 "colloid.h"
double saf;
# 101 "colloid.h"
double dpad[16];};
# 22 "colloid_link.h"
typedef struct colloid_link_type colloid_link_t;
# 24 "colloid_link.h"
struct colloid_link_type {
# 26 "colloid_link.h"
int i;
# 27 "colloid_link.h"
int j;
# 28 "colloid_link.h"
int p;
# 29 "colloid_link.h"
int status;
# 30 "colloid_link.h"
double rb[3];
# 33 "colloid_link.h"
colloid_link_t *spare;
# 34 "colloid_link.h"
colloid_link_t *next;};
# 24 "colloids.h"
typedef struct colloid colloid_t;
# 26 "colloids.h"
struct colloid {
# 28 "colloids.h"
colloid_state_t s;
# 32 "colloids.h"
double random[6];
# 33 "colloids.h"
double force[3];
# 34 "colloids.h"
double torque[3];
# 35 "colloids.h"
double f0[3];
# 36 "colloids.h"
double t0[3];
# 37 "colloids.h"
double cbar[3];
# 38 "colloids.h"
double rxcbar[3];
# 39 "colloids.h"
double deltam;
# 40 "colloids.h"
double sumw;
# 41 "colloids.h"
double zeta[21];
# 42 "colloids.h"
double stats[3];
# 43 "colloids.h"
double fc0[3];
# 44 "colloids.h"
double tc0[3];
# 45 "colloids.h"
double sump;
# 46 "colloids.h"
double dq[2];
# 48 "colloids.h"
double fsub[3];
# 49 "colloids.h"
double fex[3];
# 50 "colloids.h"
double tex[3];
# 54 "colloids.h"
colloid_link_t *lnk;
# 55 "colloids.h"
colloid_t *next;
# 57 "colloids.h"
colloid_t *nextall;
# 58 "colloids.h"
colloid_t *nextlocal;
# 62 "colloids.h"
colloid_t *bonded[2];};
# 65 "colloids.h"
typedef struct colloids_info_s colloids_info_t;
# 31 "colloid_sums.h"
typedef enum colloid_sum_enum_type colloid_sum_enum_t;
# 36 "io_harness.h"
typedef struct io_info_s io_info_t;
# 79 "model.h"
typedef enum lb_dist_enum_type lb_dist_enum_t;
# 82 "model.h"
typedef struct lb_data_s lb_t;
# 89 "model.h"
typedef enum lb_relaxation_enum_t lb_relaxation_enum_t;
# 21 "kernel.h"
typedef struct kernel_ctxt_s kernel_ctxt_t;
# 22 "kernel.h"
typedef struct kernel_info_s kernel_info_t;
# 23 "kernel.h"
typedef struct kernel_param_s kernel_param_t;
# 28 "kernel.h"
struct kernel_ctxt_s {
# 29 "kernel.h"
kernel_param_t *param;
# 30 "kernel.h"
kernel_ctxt_t *target;};
# 37 "kernel.h"
struct kernel_info_s {
# 38 "kernel.h"
int imin;
# 39 "kernel.h"
int imax;
# 40 "kernel.h"
int jmin;
# 41 "kernel.h"
int jmax;
# 42 "kernel.h"
int kmin;
# 43 "kernel.h"
int kmax;};
# 23 "halo_swap.h"
typedef struct halo_swap_s halo_swap_t;
# 25 "lb_model_s.h"
typedef struct lb_collide_param_s lb_collide_param_t;
# 27 "lb_model_s.h"
struct lb_collide_param_s {
# 28 "lb_model_s.h"
int8_t isghost;
# 29 "lb_model_s.h"
int8_t cv[19][3];
# 30 "lb_model_s.h"
int nsite;
# 31 "lb_model_s.h"
int ndist;
# 32 "lb_model_s.h"
double rho0;
# 33 "lb_model_s.h"
double eta_shear;
# 34 "lb_model_s.h"
double var_shear;
# 35 "lb_model_s.h"
double eta_bulk;
# 36 "lb_model_s.h"
double var_bulk;
# 37 "lb_model_s.h"
double var_noise[19];
# 38 "lb_model_s.h"
double rtau[19];
# 39 "lb_model_s.h"
double wv[19];
# 40 "lb_model_s.h"
double q[19][3][3];
# 41 "lb_model_s.h"
double ma[19][19];
# 42 "lb_model_s.h"
double mi[19][19];};
# 45 "lb_model_s.h"
struct lb_data_s {
# 47 "lb_model_s.h"
int ndist;
# 48 "lb_model_s.h"
int nsite;
# 49 "lb_model_s.h"
int model;
# 51 "lb_model_s.h"
pe_t *pe;
# 52 "lb_model_s.h"
cs_t *cs;
# 53 "lb_model_s.h"
halo_swap_t *halo;
# 54 "lb_model_s.h"
io_info_t *io_info;
# 55 "lb_model_s.h"
io_info_t *io_rho;
# 57 "lb_model_s.h"
double *f;
# 58 "lb_model_s.h"
double *fprime;
# 60 "lb_model_s.h"
lb_collide_param_t *param;
# 61 "lb_model_s.h"
lb_relaxation_enum_t nrelax;
# 66 "lb_model_s.h"
MPI_Datatype plane_xy_full;
# 67 "lb_model_s.h"
MPI_Datatype plane_xz_full;
# 68 "lb_model_s.h"
MPI_Datatype plane_yz_full;
# 69 "lb_model_s.h"
MPI_Datatype plane_xy_reduced[2];
# 70 "lb_model_s.h"
MPI_Datatype plane_xz_reduced[2];
# 71 "lb_model_s.h"
MPI_Datatype plane_yz_reduced[2];
# 72 "lb_model_s.h"
MPI_Datatype plane_xy[2];
# 73 "lb_model_s.h"
MPI_Datatype plane_xz[2];
# 74 "lb_model_s.h"
MPI_Datatype plane_yz[2];
# 75 "lb_model_s.h"
MPI_Datatype site_x[2];
# 76 "lb_model_s.h"
MPI_Datatype site_y[2];
# 77 "lb_model_s.h"
MPI_Datatype site_z[2];
# 79 "lb_model_s.h"
lb_t *target;};
# 25 "wall.h"
typedef struct wall_s wall_t;
# 21 "bbl.h"
typedef struct bbl_s bbl_t;
# 24 "colloids_s.h"
struct colloids_info_s {
# 26 "colloids_s.h"
int nhalo;
# 27 "colloids_s.h"
int ntotal;
# 28 "colloids_s.h"
int nallocated;
# 29 "colloids_s.h"
int ncell[3];
# 30 "colloids_s.h"
int str[3];
# 31 "colloids_s.h"
int nsites;
# 32 "colloids_s.h"
int ncells;
# 34 "colloids_s.h"
int rebuild_freq;
# 36 "colloids_s.h"
double rho0;
# 37 "colloids_s.h"
double drmax;
# 39 "colloids_s.h"
colloid_t **clist;
# 40 "colloids_s.h"
colloid_t **map_old;
# 41 "colloids_s.h"
colloid_t **map_new;
# 42 "colloids_s.h"
colloid_t *headall;
# 43 "colloids_s.h"
colloid_t *headlocal;
# 45 "colloids_s.h"
pe_t *pe;
# 46 "colloids_s.h"
cs_t *cs;
# 47 "colloids_s.h"
colloids_info_t *target;};
# 36 "bbl.c"
struct bbl_s {
# 37 "bbl.c"
pe_t *pe;
# 38 "bbl.c"
cs_t *cs;
# 39 "bbl.c"
int active;
# 40 "bbl.c"
int ndist;
# 41 "bbl.c"
double deltag;
# 42 "bbl.c"
double stress[3][3];};
# 150 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) void free(void *);
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
#if !defined(__CUDABE__)
# 244 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) double fabs(double);
#endif
#if !defined(__CUDABE__)
# 612 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double sqrt(double);
#endif
# 3296 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
___device__(extern  __no_sc__) unsigned __cudaPushCallConfiguration(struct dim3, struct dim3, size_t, struct CUstream_st *);
# 44 ".././target/target.h"
___device__(extern  __no_sc__) tdpError_t _Z20tdpDeviceSynchronizev(void);
# 53 ".././target/target.h"
___device__(extern  __no_sc__) tdpError_t _Z18tdpPeekAtLastErrorv(void);
# 117 ".././target/target.h"
___device__(extern  __no_sc__) void _Z15tdpErrorHandler9cudaErrorPKcii(tdpError_t, const char *, int, int);
# 57 "coords.h"
___device__(extern  __no_sc__) int _Z7cs_ltotP8coords_sPd(cs_t *, double *);
# 59 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_nlocalP8coords_sPi(cs_t *, int *);
# 60 "coords.h"
___device__(extern  __no_sc__) int _Z16cs_nlocal_offsetP8coords_sPi(cs_t *, int *);
# 65 "coords.h"
___device__(extern  __no_sc__) int _Z19cs_minimum_distanceP8coords_sPKdS2_Pd(cs_t *, const double *, const double *, double *);
# 40 "physics.h"
___device__(extern  __no_sc__) int _Z11physics_refPP9physics_s(physics_t **);
# 41 "physics.h"
___device__(extern  __no_sc__) int _Z12physics_rho0P9physics_sPd(physics_t *, double *);
# 206 "memory.h"
___device__(extern  __no_sc__) int _Z25reverse_addr_rank2_assertiPKciiiiii(int, const char *, int, int, int, int, int, int);
# 110 "model.h"
___device__(extern  __no_sc__) int _Z8lb_ndistP9lb_data_sPi(lb_t *, int *);
# 111 "model.h"
___device__(extern  __no_sc__) int _Z4lb_fP9lb_data_siiiPd(lb_t *, int, int, int, double *);
# 112 "model.h"
___device__(extern  __no_sc__) int _Z8lb_f_setP9lb_data_siiid(lb_t *, int, int, int, double);
# 113 "model.h"
___device__(extern  __no_sc__) int _Z13lb_0th_momentP9lb_data_si17lb_dist_enum_typePd(lb_t *, int, lb_dist_enum_t, double *);
# 53 "kernel.h"
___device__(extern  __no_sc__) int _Z17kernel_iterationsP13kernel_ctxt_s(kernel_ctxt_t *);
# 56 "kernel.h"
___device__(extern  __no_sc__) int _Z16kernel_coords_icP13kernel_ctxt_si(kernel_ctxt_t *, int);
# 57 "kernel.h"
___device__(extern  __no_sc__) int _Z16kernel_coords_jcP13kernel_ctxt_si(kernel_ctxt_t *, int);
# 58 "kernel.h"
___device__(extern  __no_sc__) int _Z16kernel_coords_kcP13kernel_ctxt_si(kernel_ctxt_t *, int);
# 70 "kernel.h"
___device__(extern  __no_sc__) int _Z19kernel_coords_indexP13kernel_ctxt_siii(kernel_ctxt_t *, int, int, int);
# 41 "util.h"
___device__(extern  __no_sc__) double _Z11dot_productPKdS0_(const double *, const double *);
# 42 "util.h"
___device__(extern  __no_sc__) void _Z13cross_productPKdS0_Pd(const double *, const double *, double *);
# 44 "util.h"
___device__(extern  __no_sc__) double _Z7modulusPKd(const double *);
# 45 "util.h"
___device__(extern  __no_sc__) void _Z13rotate_vectorPdPKd(double *, const double *);
# 296 "bbl.c"
__global__ __var_used__ extern void _Z16bbl_pass0_kernelP13kernel_ctxt_sP8coords_sP9lb_data_sP15colloids_info_s(kernel_ctxt_t *, cs_t *, lb_t *, colloids_info_t *);
# 54 "bbl.c"
static  __constant__  __var_used__ lb_collide_param_t __nv_static_24__11_bbl_cpp1_ii_e251c242_lbp;
static  __device__  __var_used__ const char __T6[83];
#include "common_functions.h"
static  __device__  __var_used__ const char __T6[83] = "void bbl_pass0_kernel(kernel_ctxt_s *, coords_s *, lb_data_s *, colloids_info_s *)";
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
# 296 "bbl.c"
__global__ __var_used__ void _Z16bbl_pass0_kernelP13kernel_ctxt_sP8coords_sP9lb_data_sP15colloids_info_s(
# 296 "bbl.c"
kernel_ctxt_t *ktxt, 
# 296 "bbl.c"
cs_t *cs, 
# 296 "bbl.c"
lb_t *lb, 
# 297 "bbl.c"
colloids_info_t *cinfo){
# 297 "bbl.c"
{
# 299 "bbl.c"
 int __cuda_local_var_16391_7_non_const_kindex;
# 300 "bbl.c"
 int __cuda_local_var_16392_7_non_const_kiter;
# 301 "bbl.c"
 double __cuda_local_var_16393_16_const_rcs2;
# 301 "bbl.c"
__cuda_local_var_16393_16_const_rcs2 = (3.0);
# 303 "bbl.c"
(ktxt) ? ((void)0) : (__assert_fail(((const char *)"ktxt"), ((const char *)"bbl.c"), 303U, __T6));
# 304 "bbl.c"
(cs) ? ((void)0) : (__assert_fail(((const char *)"cs"), ((const char *)"bbl.c"), 304U, __T6));
# 305 "bbl.c"
(lb) ? ((void)0) : (__assert_fail(((const char *)"lb"), ((const char *)"bbl.c"), 305U, __T6));
# 306 "bbl.c"
(cinfo) ? ((void)0) : (__assert_fail(((const char *)"cinfo"), ((const char *)"bbl.c"), 306U, __T6));
# 308 "bbl.c"
__cuda_local_var_16392_7_non_const_kiter = (_Z17kernel_iterationsP13kernel_ctxt_s(ktxt));
# 310 "bbl.c"
__cuda_local_var_16391_7_non_const_kindex = ((int)(1U * (((blockIdx.x) * (blockDim.x)) + (threadIdx.x))));
# 310 "bbl.c"
if (__cuda_local_var_16391_7_non_const_kindex < __cuda_local_var_16392_7_non_const_kiter)
# 310 "bbl.c"
{
# 312 "bbl.c"
 int __cuda_local_var_16404_9_non_const_ic;
# 312 "bbl.c"
 int __cuda_local_var_16404_13_non_const_jc;
# 312 "bbl.c"
 int __cuda_local_var_16404_17_non_const_kc;
# 312 "bbl.c"
 int __cuda_local_var_16404_21_non_const_index;
# 313 "bbl.c"
 int __cuda_local_var_16405_9_non_const_ia;
# 313 "bbl.c"
 int __cuda_local_var_16405_13_non_const_ib;
# 313 "bbl.c"
 int __cuda_local_var_16405_17_non_const_p;
# 314 "bbl.c"
 int __cuda_local_var_16406_9_non_const_noffset[3];
# 316 "bbl.c"
 double __cuda_local_var_16408_12_non_const_r[3];
# 316 "bbl.c"
 double __cuda_local_var_16408_18_non_const_r0[3];
# 316 "bbl.c"
 double __cuda_local_var_16408_25_non_const_rb[3];
# 316 "bbl.c"
 double __cuda_local_var_16408_32_non_const_ub[3];
# 317 "bbl.c"
 double __cuda_local_var_16409_12_non_const_udotc;
# 317 "bbl.c"
 double __cuda_local_var_16409_19_non_const_sdotq;
# 319 "bbl.c"
 colloid_t *__cuda_local_var_16411_17_non_const_pc;
# 319 "bbl.c"
__cuda_local_var_16411_17_non_const_pc = ((colloid_t *)0LL);
# 321 "bbl.c"
__cuda_local_var_16404_9_non_const_ic = (_Z16kernel_coords_icP13kernel_ctxt_si(ktxt, __cuda_local_var_16391_7_non_const_kindex));
# 322 "bbl.c"
__cuda_local_var_16404_13_non_const_jc = (_Z16kernel_coords_jcP13kernel_ctxt_si(ktxt, __cuda_local_var_16391_7_non_const_kindex));
# 323 "bbl.c"
__cuda_local_var_16404_17_non_const_kc = (_Z16kernel_coords_kcP13kernel_ctxt_si(ktxt, __cuda_local_var_16391_7_non_const_kindex));
# 325 "bbl.c"
__cuda_local_var_16404_21_non_const_index = (_Z19kernel_coords_indexP13kernel_ctxt_siii(ktxt, __cuda_local_var_16404_9_non_const_ic, __cuda_local_var_16404_13_non_const_jc, __cuda_local_var_16404_17_non_const_kc));
# 327 "bbl.c"
__cuda_local_var_16411_17_non_const_pc = ((cinfo->map_new)[__cuda_local_var_16404_21_non_const_index]);
# 329 "bbl.c"
if ((__cuda_local_var_16411_17_non_const_pc) && (((__cuda_local_var_16411_17_non_const_pc->s).type) != 2))
# 329 "bbl.c"
{
# 330 "bbl.c"
_Z16cs_nlocal_offsetP8coords_sPi(cs, (__cuda_local_var_16406_9_non_const_noffset));
# 331 "bbl.c"
((__cuda_local_var_16408_12_non_const_r)[X]) = ((1.0) * ((double)(((__cuda_local_var_16406_9_non_const_noffset)[X]) + __cuda_local_var_16404_9_non_const_ic)));
# 332 "bbl.c"
((__cuda_local_var_16408_12_non_const_r)[Y]) = ((1.0) * ((double)(((__cuda_local_var_16406_9_non_const_noffset)[Y]) + __cuda_local_var_16404_13_non_const_jc)));
# 333 "bbl.c"
((__cuda_local_var_16408_12_non_const_r)[Z]) = ((1.0) * ((double)(((__cuda_local_var_16406_9_non_const_noffset)[Z]) + __cuda_local_var_16404_17_non_const_kc)));
# 335 "bbl.c"
((__cuda_local_var_16408_18_non_const_r0)[X]) = ((((__cuda_local_var_16411_17_non_const_pc->s).r))[X]);
# 336 "bbl.c"
((__cuda_local_var_16408_18_non_const_r0)[Y]) = ((((__cuda_local_var_16411_17_non_const_pc->s).r))[Y]);
# 337 "bbl.c"
((__cuda_local_var_16408_18_non_const_r0)[Z]) = ((((__cuda_local_var_16411_17_non_const_pc->s).r))[Z]);
# 339 "bbl.c"
_Z19cs_minimum_distanceP8coords_sPKdS2_Pd(cs, ((const double *)(__cuda_local_var_16408_18_non_const_r0)), ((const double *)(__cuda_local_var_16408_12_non_const_r)), (__cuda_local_var_16408_25_non_const_rb));
# 343 "bbl.c"
((__cuda_local_var_16408_32_non_const_ub)[X]) = ((((((__cuda_local_var_16411_17_non_const_pc->s).v))[X]) + (((((__cuda_local_var_16411_17_non_const_pc->s).w))[Y]) * ((__cuda_local_var_16408_25_non_const_rb)[Z]))) - (((((__cuda_local_var_16411_17_non_const_pc->s).w))[Z]) * ((__cuda_local_var_16408_25_non_const_rb)[Y])));
# 344 "bbl.c"
((__cuda_local_var_16408_32_non_const_ub)[Y]) = ((((((__cuda_local_var_16411_17_non_const_pc->s).v))[Y]) + (((((__cuda_local_var_16411_17_non_const_pc->s).w))[Z]) * ((__cuda_local_var_16408_25_non_const_rb)[X]))) - (((((__cuda_local_var_16411_17_non_const_pc->s).w))[X]) * ((__cuda_local_var_16408_25_non_const_rb)[Z])));
# 345 "bbl.c"
((__cuda_local_var_16408_32_non_const_ub)[Z]) = ((((((__cuda_local_var_16411_17_non_const_pc->s).v))[Z]) + (((((__cuda_local_var_16411_17_non_const_pc->s).w))[X]) * ((__cuda_local_var_16408_25_non_const_rb)[Y]))) - (((((__cuda_local_var_16411_17_non_const_pc->s).w))[Y]) * ((__cuda_local_var_16408_25_non_const_rb)[X])));
# 347 "bbl.c"
for (__cuda_local_var_16405_17_non_const_p = 1; (__cuda_local_var_16405_17_non_const_p < 19); __cuda_local_var_16405_17_non_const_p++)
# 347 "bbl.c"
{
# 348 "bbl.c"
__cuda_local_var_16409_12_non_const_udotc = (((((double)(((((__nv_static_24__11_bbl_cpp1_ii_e251c242_lbp.cv))[__cuda_local_var_16405_17_non_const_p]))[X])) * ((__cuda_local_var_16408_32_non_const_ub)[X])) + (((double)(((((__nv_static_24__11_bbl_cpp1_ii_e251c242_lbp.cv))[__cuda_local_var_16405_17_non_const_p]))[Y])) * ((__cuda_local_var_16408_32_non_const_ub)[Y]))) + (((double)(((((__nv_static_24__11_bbl_cpp1_ii_e251c242_lbp.cv))[__cuda_local_var_16405_17_non_const_p]))[Z])) * ((__cuda_local_var_16408_32_non_const_ub)[Z])));
# 349 "bbl.c"
__cuda_local_var_16409_19_non_const_sdotq = (0.0);
# 350 "bbl.c"
for (__cuda_local_var_16405_9_non_const_ia = 0; (__cuda_local_var_16405_9_non_const_ia < 3); __cuda_local_var_16405_9_non_const_ia++)
# 350 "bbl.c"
{
# 351 "bbl.c"
for (__cuda_local_var_16405_13_non_const_ib = 0; (__cuda_local_var_16405_13_non_const_ib < 3); __cuda_local_var_16405_13_non_const_ib++)
# 351 "bbl.c"
{
# 352 "bbl.c"
__cuda_local_var_16409_19_non_const_sdotq += (((((((((__nv_static_24__11_bbl_cpp1_ii_e251c242_lbp.q))[__cuda_local_var_16405_17_non_const_p]))[__cuda_local_var_16405_9_non_const_ia]))[__cuda_local_var_16405_13_non_const_ib]) * ((__cuda_local_var_16408_32_non_const_ub)[__cuda_local_var_16405_9_non_const_ia])) * ((__cuda_local_var_16408_32_non_const_ub)[__cuda_local_var_16405_13_non_const_ib]));
# 353 "bbl.c"
}
# 354 "bbl.c"
}
# 356 "bbl.c"
((lb->f)[(_Z25reverse_addr_rank2_assertiPKciiiiii(356, ((const char *)"bbl.c"), (lb->nsite), (lb->ndist), 19, __cuda_local_var_16404_21_non_const_index, 0, __cuda_local_var_16405_17_non_const_p))]) = ((((__nv_static_24__11_bbl_cpp1_ii_e251c242_lbp.wv))[__cuda_local_var_16405_17_non_const_p]) * (((1.0) + ((3.0) * __cuda_local_var_16409_12_non_const_udotc)) + ((4.5) * __cuda_local_var_16409_19_non_const_sdotq)));
# 358 "bbl.c"
}
# 359 "bbl.c"
}
# 360 "bbl.c"
}
# 362 "bbl.c"
return;
# 363 "bbl.c"
}}
