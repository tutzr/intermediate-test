typedef char __nv_bool;
# 22 "pe.h"
struct pe_s;
# 22 "coords.h"
struct coords_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 23 "halo_swap.h"
struct halo_swap_s;
# 22 "runtime.h"
struct rt_s;
# 73 "io_harness.h"
struct io_info_s;
# 22 "leesedwards.h"
struct lees_edw_s;
# 21 "field_s.h"
struct field_s;
# 24 "polar_active.h"
struct fe_polar_s;
# 29 "polar_active.h"
struct fe_polar_param_s;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 22 "pe.h"
typedef struct pe_s pe_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 23 "halo_swap.h"
typedef struct halo_swap_s halo_swap_t;
# 22 "runtime.h"
typedef struct rt_s rt_t;
# 36 "io_harness.h"
typedef struct io_info_s io_info_t;
# 22 "leesedwards.h"
typedef struct lees_edw_s lees_edw_t;
# 28 "field.h"
typedef struct field_s field_t;
# 21 "field_s.h"
struct field_s {
# 22 "field_s.h"
int nf;
# 23 "field_s.h"
int nhcomm;
# 24 "field_s.h"
int nsites;
# 25 "field_s.h"
double *data;
# 26 "field_s.h"
char *name;
# 28 "field_s.h"
pe_t *pe;
# 29 "field_s.h"
cs_t *cs;
# 30 "field_s.h"
lees_edw_t *le;
# 31 "field_s.h"
io_info_t *info;
# 32 "field_s.h"
halo_swap_t *halo;
# 34 "field_s.h"
field_t *target;};
# 24 "polar_active.h"
typedef struct fe_polar_s fe_polar_t;
# 25 "polar_active.h"
typedef struct fe_polar_param_s fe_polar_param_t;
# 29 "polar_active.h"
struct fe_polar_param_s {
# 30 "polar_active.h"
double a;
# 31 "polar_active.h"
double b;
# 32 "polar_active.h"
double kappa1;
# 33 "polar_active.h"
double delta;
# 34 "polar_active.h"
double kappa2;
# 35 "polar_active.h"
double zeta;
# 36 "polar_active.h"
double lambda;
# 37 "polar_active.h"
double radius;};
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
#if !defined(__CUDABE__)
# 612 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double sqrt(double);
#endif
# 57 "coords.h"
___device__(extern  __no_sc__) int _Z7cs_ltotP8coords_sPd(cs_t *, double *);
# 59 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_nlocalP8coords_sPi(cs_t *, int *);
# 60 "coords.h"
___device__(extern  __no_sc__) int _Z16cs_nlocal_offsetP8coords_sPi(cs_t *, int *);
# 62 "coords.h"
___device__(extern  __no_sc__) int _Z8cs_indexP8coords_siii(cs_t *, int, int, int);
# 49 "field.h"
___device__(extern  __no_sc__) int _Z16field_vector_setP7field_siPKd(field_t *, int, const double *);
#include "common_functions.h"
#if !defined(__CUDABE__)
#endif
