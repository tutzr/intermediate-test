typedef char __nv_bool;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 144 "/usr/include/bits/types.h" 3
typedef long __clock_t;
# 59 "/usr/include/time.h" 3
typedef __clock_t clock_t;
#if !defined(__CUDABE__)
# 189 "/usr/include/time.h" 3
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) clock_t clock(void);
#endif
#if !defined(__CUDABE__)
# 145 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) int printf(const char *__restrict__, ...);
#endif
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
# 110 "tests.c"
___device__(extern  __no_sc__) void _Z16test_assert_infoiiPKc(const int, int, const char *);
static  __device__  __var_used__ const char __T0[46];
#include "common_functions.h"
static  __device__  __var_used__ const char __T0[46] = "void test_assert_info(int, int, const char *)";
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
# 110 "tests.c"
___device__( __no_sc__) void _Z16test_assert_infoiiPKc(
# 110 "tests.c"
const int lvalue, 
# 110 "tests.c"
int line, 
# 111 "tests.c"
const char *file){
# 111 "tests.c"
{
# 113 "tests.c"
if (lvalue)
# 113 "tests.c"
{
# 115 "tests.c"
}
# 116 "tests.c"
else 
# 116 "tests.c"
{
# 119 "tests.c"
printf(((const char *)"Line %d file %s Failed test assertion\n"), line, file);
# 120 "tests.c"
__assert_fail(((const char *)"0"), ((const char *)"tests.c"), 120U, __T0);
# 129 "tests.c"
}
# 131 "tests.c"
return;
# 132 "tests.c"
}}
