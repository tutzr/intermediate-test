typedef char __nv_bool;
# 58 ".././mpi_s/mpi.h"
enum elementary_datatypes {
# 58 ".././mpi_s/mpi.h"
MPI_CHAR,
# 59 ".././mpi_s/mpi.h"
MPI_SHORT,
# 60 ".././mpi_s/mpi.h"
MPI_INT,
# 61 ".././mpi_s/mpi.h"
MPI_LONG,
# 62 ".././mpi_s/mpi.h"
MPI_UNSIGNED_CHAR,
# 63 ".././mpi_s/mpi.h"
MPI_UNSIGNED_SHORT,
# 64 ".././mpi_s/mpi.h"
MPI_UNSIGNED,
# 65 ".././mpi_s/mpi.h"
MPI_UNSIGNED_LONG,
# 66 ".././mpi_s/mpi.h"
MPI_FLOAT,
# 67 ".././mpi_s/mpi.h"
MPI_DOUBLE,
# 68 ".././mpi_s/mpi.h"
MPI_LONG_DOUBLE,
# 69 ".././mpi_s/mpi.h"
MPI_BYTE,
# 70 ".././mpi_s/mpi.h"
MPI_PACKED};
# 72 ".././mpi_s/mpi.h"
enum collective_operations {
# 72 ".././mpi_s/mpi.h"
MPI_MAX,
# 73 ".././mpi_s/mpi.h"
MPI_MIN,
# 74 ".././mpi_s/mpi.h"
MPI_SUM,
# 75 ".././mpi_s/mpi.h"
MPI_PROD,
# 76 ".././mpi_s/mpi.h"
MPI_MAXLOC,
# 77 ".././mpi_s/mpi.h"
MPI_MINLOC,
# 78 ".././mpi_s/mpi.h"
MPI_BAND,
# 79 ".././mpi_s/mpi.h"
MPI_BOR,
# 80 ".././mpi_s/mpi.h"
MPI_BXOR,
# 81 ".././mpi_s/mpi.h"
MPI_LAND,
# 82 ".././mpi_s/mpi.h"
MPI_LOR,
# 83 ".././mpi_s/mpi.h"
MPI_LXOR};
# 22 "pe.h"
struct pe_s;
# 22 "coords.h"
struct coords_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 23 "halo_swap.h"
struct halo_swap_s;
# 22 "leesedwards.h"
struct lees_edw_s;
# 73 "io_harness.h"
struct io_info_s;
# 32 "hydro.h"
struct hydro_s;
# 24 "map.h"
enum map_status {
# 24 "map.h"
MAP_FLUID,
# 24 "map.h"
MAP_BOUNDARY,
# 24 "map.h"
MAP_COLLOID,
# 24 "map.h"
MAP_STATUS_MAX};
# 26 "map.h"
struct map_s;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 25 ".././mpi_s/mpi.h"
typedef int MPI_Handle;
# 26 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Comm;
# 28 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Datatype;
# 30 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Op;
# 22 "pe.h"
typedef struct pe_s pe_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 23 "halo_swap.h"
typedef struct halo_swap_s halo_swap_t;
# 22 "leesedwards.h"
typedef struct lees_edw_s lees_edw_t;
# 36 "io_harness.h"
typedef struct io_info_s io_info_t;
# 26 "hydro.h"
typedef struct hydro_s hydro_t;
# 32 "hydro.h"
struct hydro_s {
# 33 "hydro.h"
int nsite;
# 34 "hydro.h"
int nhcomm;
# 35 "hydro.h"
double *u;
# 36 "hydro.h"
double *f;
# 37 "hydro.h"
double *eta;
# 39 "hydro.h"
pe_t *pe;
# 40 "hydro.h"
cs_t *cs;
# 41 "hydro.h"
lees_edw_t *le;
# 42 "hydro.h"
io_info_t *info;
# 43 "hydro.h"
halo_swap_t *halo;
# 44 "hydro.h"
hydro_t *target;};
# 26 "map.h"
typedef struct map_s map_t;
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
# 59 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_nlocalP8coords_sPi(cs_t *, int *);
# 62 "coords.h"
___device__(extern  __no_sc__) int _Z8cs_indexP8coords_siii(cs_t *, int, int, int);
# 72 "hydro.h"
___device__(extern  __no_sc__) int _Z7hydro_uP7hydro_siPd(hydro_t *, int, double *);
# 40 "map.h"
___device__(extern  __no_sc__) int _Z10map_statusP5map_siPi(map_t *, int, int *);
# 49 "util.h"
___device__(extern  __no_sc__) double _Z4dmindd(const double, const double);
# 50 "util.h"
___device__(extern  __no_sc__) double _Z4dmaxdd(const double, const double);
#include "common_functions.h"
