typedef char __nv_bool;
# 246 "/usr/include/libio.h" 3
struct _IO_FILE;
# 33 ".././mpi_s/mpi.h"
struct MPI_Status;
# 58 ".././mpi_s/mpi.h"
enum elementary_datatypes {
# 58 ".././mpi_s/mpi.h"
MPI_CHAR,
# 59 ".././mpi_s/mpi.h"
MPI_SHORT,
# 60 ".././mpi_s/mpi.h"
MPI_INT,
# 61 ".././mpi_s/mpi.h"
MPI_LONG,
# 62 ".././mpi_s/mpi.h"
MPI_UNSIGNED_CHAR,
# 63 ".././mpi_s/mpi.h"
MPI_UNSIGNED_SHORT,
# 64 ".././mpi_s/mpi.h"
MPI_UNSIGNED,
# 65 ".././mpi_s/mpi.h"
MPI_UNSIGNED_LONG,
# 66 ".././mpi_s/mpi.h"
MPI_FLOAT,
# 67 ".././mpi_s/mpi.h"
MPI_DOUBLE,
# 68 ".././mpi_s/mpi.h"
MPI_LONG_DOUBLE,
# 69 ".././mpi_s/mpi.h"
MPI_BYTE,
# 70 ".././mpi_s/mpi.h"
MPI_PACKED};
# 72 ".././mpi_s/mpi.h"
enum collective_operations {
# 72 ".././mpi_s/mpi.h"
MPI_MAX,
# 73 ".././mpi_s/mpi.h"
MPI_MIN,
# 74 ".././mpi_s/mpi.h"
MPI_SUM,
# 75 ".././mpi_s/mpi.h"
MPI_PROD,
# 76 ".././mpi_s/mpi.h"
MPI_MAXLOC,
# 77 ".././mpi_s/mpi.h"
MPI_MINLOC,
# 78 ".././mpi_s/mpi.h"
MPI_BAND,
# 79 ".././mpi_s/mpi.h"
MPI_BOR,
# 80 ".././mpi_s/mpi.h"
MPI_BXOR,
# 81 ".././mpi_s/mpi.h"
MPI_LAND,
# 82 ".././mpi_s/mpi.h"
MPI_LOR,
# 83 ".././mpi_s/mpi.h"
MPI_LXOR};
# 22 "pe.h"
struct pe_s;
# 22 "coords.h"
struct coords_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 28 "coords.h"
enum cs_mpi_cart_neighbours {
# 28 "coords.h"
CS_FORW,
# 28 "coords.h"
CS_BACK};
# 73 "io_harness.h"
struct io_info_s;
# 79 "model.h"
enum lb_dist_enum_type {
# 79 "model.h"
LB_RHO,
# 79 "model.h"
LB_PHI};
# 88 "model.h"
enum lb_relaxation_enum_t {
# 88 "model.h"
LB_RELAXATION_M10,
# 88 "model.h"
LB_RELAXATION_BGK,
# 88 "model.h"
LB_RELAXATION_TRT};
# 23 "halo_swap.h"
struct halo_swap_s;
# 27 "lb_model_s.h"
struct lb_collide_param_s;
# 45 "lb_model_s.h"
struct lb_data_s;
# 18 "physics.h"
struct physics_s;
# 48 "free_energy.h"
struct fe_vt_s;
# 66 "free_energy.h"
struct fe_s;
# 32 "hydro.h"
struct hydro_s;
# 41 "stats_rheology.c"
struct stats_rheo_s;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 48 "/usr/include/stdio.h" 3
typedef struct _IO_FILE FILE;
# 25 ".././mpi_s/mpi.h"
typedef int MPI_Handle;
# 26 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Comm;
# 28 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Datatype;
# 30 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Op;
# 33 ".././mpi_s/mpi.h"
struct MPI_Status {
# 34 ".././mpi_s/mpi.h"
int MPI_SOURCE;
# 35 ".././mpi_s/mpi.h"
int MPI_TAG;};
# 36 ".././mpi_s/mpi.h"
typedef struct MPI_Status MPI_Status;
# 22 "pe.h"
typedef struct pe_s pe_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 36 "io_harness.h"
typedef struct io_info_s io_info_t;
# 79 "model.h"
typedef enum lb_dist_enum_type lb_dist_enum_t;
# 82 "model.h"
typedef struct lb_data_s lb_t;
# 89 "model.h"
typedef enum lb_relaxation_enum_t lb_relaxation_enum_t;
# 23 "halo_swap.h"
typedef struct halo_swap_s halo_swap_t;
# 25 "lb_model_s.h"
typedef struct lb_collide_param_s lb_collide_param_t;
# 45 "lb_model_s.h"
struct lb_data_s {
# 47 "lb_model_s.h"
int ndist;
# 48 "lb_model_s.h"
int nsite;
# 49 "lb_model_s.h"
int model;
# 51 "lb_model_s.h"
pe_t *pe;
# 52 "lb_model_s.h"
cs_t *cs;
# 53 "lb_model_s.h"
halo_swap_t *halo;
# 54 "lb_model_s.h"
io_info_t *io_info;
# 55 "lb_model_s.h"
io_info_t *io_rho;
# 57 "lb_model_s.h"
double *f;
# 58 "lb_model_s.h"
double *fprime;
# 60 "lb_model_s.h"
lb_collide_param_t *param;
# 61 "lb_model_s.h"
lb_relaxation_enum_t nrelax;
# 66 "lb_model_s.h"
MPI_Datatype plane_xy_full;
# 67 "lb_model_s.h"
MPI_Datatype plane_xz_full;
# 68 "lb_model_s.h"
MPI_Datatype plane_yz_full;
# 69 "lb_model_s.h"
MPI_Datatype plane_xy_reduced[2];
# 70 "lb_model_s.h"
MPI_Datatype plane_xz_reduced[2];
# 71 "lb_model_s.h"
MPI_Datatype plane_yz_reduced[2];
# 72 "lb_model_s.h"
MPI_Datatype plane_xy[2];
# 73 "lb_model_s.h"
MPI_Datatype plane_xz[2];
# 74 "lb_model_s.h"
MPI_Datatype plane_yz[2];
# 75 "lb_model_s.h"
MPI_Datatype site_x[2];
# 76 "lb_model_s.h"
MPI_Datatype site_y[2];
# 77 "lb_model_s.h"
MPI_Datatype site_z[2];
# 79 "lb_model_s.h"
lb_t *target;};
# 18 "physics.h"
typedef struct physics_s physics_t;
# 32 "free_energy.h"
typedef struct fe_s fe_t;
# 33 "free_energy.h"
typedef struct fe_vt_s fe_vt_t;
# 35 "free_energy.h"
typedef int (*fe_free_ft)(fe_t *);
# 37 "free_energy.h"
typedef int (*fe_target_ft)(fe_t *, fe_t **);
# 38 "free_energy.h"
typedef int (*fe_fed_ft)(fe_t *, int, double *);
# 39 "free_energy.h"
typedef int (*fe_mu_ft)(fe_t *, int, double *);
# 40 "free_energy.h"
typedef int (*fe_str_ft)(fe_t *, int, double (*)[3]);
# 41 "free_energy.h"
typedef int (*fe_mu_solv_ft)(fe_t *, int, int, double *);
# 42 "free_energy.h"
typedef int (*fe_hvector_ft)(fe_t *, int, double *);
# 43 "free_energy.h"
typedef int (*fe_htensor_ft)(fe_t *, int, double (*)[3]);
# 45 "free_energy.h"
typedef void (*fe_htensor_v_ft)(fe_t *, int, double (*)[3][1]);
# 46 "free_energy.h"
typedef void (*fe_stress_v_ft)(fe_t *, int, double (*)[3][1]);
# 48 "free_energy.h"
struct fe_vt_s {
# 50 "free_energy.h"
fe_free_ft free;
# 51 "free_energy.h"
fe_target_ft target;
# 52 "free_energy.h"
fe_fed_ft fed;
# 53 "free_energy.h"
fe_mu_ft mu;
# 54 "free_energy.h"
fe_mu_solv_ft mu_solv;
# 55 "free_energy.h"
fe_str_ft stress;
# 56 "free_energy.h"
fe_str_ft str_symm;
# 57 "free_energy.h"
fe_str_ft str_anti;
# 58 "free_energy.h"
fe_hvector_ft hvector;
# 59 "free_energy.h"
fe_htensor_ft htensor;
# 60 "free_energy.h"
fe_htensor_v_ft htensor_v;
# 61 "free_energy.h"
fe_stress_v_ft stress_v;
# 62 "free_energy.h"
fe_stress_v_ft str_symm_v;
# 63 "free_energy.h"
fe_stress_v_ft str_anti_v;};
# 66 "free_energy.h"
struct fe_s {
# 67 "free_energy.h"
fe_vt_t *func;
# 68 "free_energy.h"
int id;
# 69 "free_energy.h"
int use_stress_relaxation;};
# 26 "hydro.h"
typedef struct hydro_s hydro_t;
# 24 "stats_rheology.h"
typedef struct stats_rheo_s stats_rheo_t;
# 41 "stats_rheology.c"
struct stats_rheo_s {
# 42 "stats_rheology.c"
pe_t *pe;
# 43 "stats_rheology.c"
cs_t *cs;
# 44 "stats_rheology.c"
int counter_sxy;
# 45 "stats_rheology.c"
double *sxy;
# 46 "stats_rheology.c"
double *stat_xz;
# 47 "stats_rheology.c"
MPI_Comm comm_yz;
# 48 "stats_rheology.c"
MPI_Comm comm_y;
# 49 "stats_rheology.c"
MPI_Comm comm_z;char __nv_no_debug_dummy_end_padding_0[4];};
# 149 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__malloc__)) __attribute__((__nothrow__)) void *malloc(size_t);
# 150 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) void free(void *);
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
# 54 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_cartszP8coords_sPi(cs_t *, int *);
# 55 "coords.h"
___device__(extern  __no_sc__) int _Z14cs_cart_coordsP8coords_sPi(cs_t *, int *);
# 57 "coords.h"
___device__(extern  __no_sc__) int _Z7cs_ltotP8coords_sPd(cs_t *, double *);
# 59 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_nlocalP8coords_sPi(cs_t *, int *);
# 60 "coords.h"
___device__(extern  __no_sc__) int _Z16cs_nlocal_offsetP8coords_sPi(cs_t *, int *);
# 62 "coords.h"
___device__(extern  __no_sc__) int _Z8cs_indexP8coords_siii(cs_t *, int, int, int);
# 63 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_ntotalP8coords_sPi(cs_t *, int *);
# 113 "model.h"
___device__(extern  __no_sc__) int _Z13lb_0th_momentP9lb_data_si17lb_dist_enum_typePd(lb_t *, int, lb_dist_enum_t, double *);
# 40 "physics.h"
___device__(extern  __no_sc__) int _Z11physics_refPP9physics_s(physics_t **);
# 43 "physics.h"
___device__(extern  __no_sc__) int _Z17physics_eta_shearP9physics_sPd(physics_t *, double *);
# 53 "physics.h"
___device__(extern  __no_sc__) int _Z24physics_control_timestepP9physics_s(physics_t *);
#include "common_functions.h"
