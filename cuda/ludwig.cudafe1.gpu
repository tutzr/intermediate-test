typedef char __nv_bool;
# 58 ".././mpi_s/mpi.h"
enum elementary_datatypes {
# 58 ".././mpi_s/mpi.h"
MPI_CHAR,
# 59 ".././mpi_s/mpi.h"
MPI_SHORT,
# 60 ".././mpi_s/mpi.h"
MPI_INT,
# 61 ".././mpi_s/mpi.h"
MPI_LONG,
# 62 ".././mpi_s/mpi.h"
MPI_UNSIGNED_CHAR,
# 63 ".././mpi_s/mpi.h"
MPI_UNSIGNED_SHORT,
# 64 ".././mpi_s/mpi.h"
MPI_UNSIGNED,
# 65 ".././mpi_s/mpi.h"
MPI_UNSIGNED_LONG,
# 66 ".././mpi_s/mpi.h"
MPI_FLOAT,
# 67 ".././mpi_s/mpi.h"
MPI_DOUBLE,
# 68 ".././mpi_s/mpi.h"
MPI_LONG_DOUBLE,
# 69 ".././mpi_s/mpi.h"
MPI_BYTE,
# 70 ".././mpi_s/mpi.h"
MPI_PACKED};
# 72 ".././mpi_s/mpi.h"
enum collective_operations {
# 72 ".././mpi_s/mpi.h"
MPI_MAX,
# 73 ".././mpi_s/mpi.h"
MPI_MIN,
# 74 ".././mpi_s/mpi.h"
MPI_SUM,
# 75 ".././mpi_s/mpi.h"
MPI_PROD,
# 76 ".././mpi_s/mpi.h"
MPI_MAXLOC,
# 77 ".././mpi_s/mpi.h"
MPI_MINLOC,
# 78 ".././mpi_s/mpi.h"
MPI_BAND,
# 79 ".././mpi_s/mpi.h"
MPI_BOR,
# 80 ".././mpi_s/mpi.h"
MPI_BXOR,
# 81 ".././mpi_s/mpi.h"
MPI_LAND,
# 82 ".././mpi_s/mpi.h"
MPI_LOR,
# 83 ".././mpi_s/mpi.h"
MPI_LXOR};
# 92 ".././mpi_s/mpi.h"
enum reserved_communicators {
# 92 ".././mpi_s/mpi.h"
MPI_COMM_WORLD,
# 92 ".././mpi_s/mpi.h"
MPI_COMM_SELF};
# 22 "pe.h"
struct pe_s;
# 24 "pe.h"
enum pe_enum_t {
# 24 "pe.h"
PE_QUIET,
# 24 "pe.h"
PE_VERBOSE,
# 24 "pe.h"
PE_OPTION_MAX};
# 22 "runtime.h"
struct rt_s;
# 22 "coords.h"
struct coords_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 28 "io_harness.h"
enum io_format_enum {
# 28 "io_harness.h"
IO_FORMAT_NULL,
# 29 "io_harness.h"
IO_FORMAT_ASCII,
# 30 "io_harness.h"
IO_FORMAT_BINARY,
# 31 "io_harness.h"
IO_FORMAT_ASCII_SERIAL,
# 32 "io_harness.h"
IO_FORMAT_BINARY_SERIAL,
# 33 "io_harness.h"
IO_FORMAT_DEFAULT};
# 73 "io_harness.h"
struct io_info_s;
# 25 "noise.h"
enum noise_enum_t {
# 25 "noise.h"
NOISE_RHO,
# 26 "noise.h"
NOISE_PHI,
# 27 "noise.h"
NOISE_QAB,
# 28 "noise.h"
NOISE_END};
# 38 "noise.h"
struct noise_s;
# 30 "timer.h"
enum timer_id {
# 30 "timer.h"
TIMER_TOTAL,
# 31 "timer.h"
TIMER_STEPS,
# 32 "timer.h"
TIMER_PROPAGATE,
# 33 "timer.h"
TIMER_PROP_KERNEL,
# 34 "timer.h"
TIMER_COLLIDE,
# 35 "timer.h"
TIMER_COLLIDE_KERNEL,
# 36 "timer.h"
TIMER_HALO_LATTICE,
# 37 "timer.h"
TIMER_PHI_GRADIENTS,
# 38 "timer.h"
TIMER_PHI_GRAD_KERNEL,
# 39 "timer.h"
TIMER_PHI_HALO,
# 40 "timer.h"
TIMER_LE,
# 41 "timer.h"
TIMER_IO,
# 42 "timer.h"
TIMER_FORCES,
# 43 "timer.h"
TIMER_REBUILD,
# 44 "timer.h"
TIMER_BBL,
# 45 "timer.h"
TIMER_PARTICLE_UPDATE,
# 46 "timer.h"
TIMER_PARTICLE_HALO,
# 47 "timer.h"
TIMER_FLUCTUATIONS,
# 48 "timer.h"
TIMER_EWALD_TOTAL,
# 49 "timer.h"
TIMER_EWALD_REAL_SPACE,
# 50 "timer.h"
TIMER_EWALD_FOURIER_SPACE,
# 51 "timer.h"
TIMER_FORCE_CALCULATION,
# 52 "timer.h"
TIMER_CHEMICAL_STRESS_KERNEL,
# 53 "timer.h"
TIMER_PHI_FORCE_CALC,
# 54 "timer.h"
TIMER_ORDER_PARAMETER_UPDATE,
# 55 "timer.h"
TIMER_U_HALO,
# 56 "timer.h"
TIMER_BE_MOL_FIELD,
# 57 "timer.h"
BP_BE_UPDATE_KERNEL,
# 58 "timer.h"
ADVECTION_X_KERNEL,
# 59 "timer.h"
ADVECTION_BCS_KERNEL,
# 60 "timer.h"
ADVECTION_BCS_MEM,
# 61 "timer.h"
TIMER_ELECTRO_TOTAL,
# 62 "timer.h"
TIMER_ELECTRO_POISSON,
# 63 "timer.h"
TIMER_ELECTRO_NPEQ,
# 64 "timer.h"
TIMER_FREE1,
# 65 "timer.h"
TIMER_FREE2,
# 66 "timer.h"
TIMER_FREE3,
# 67 "timer.h"
TIMER_NTIMERS};
# 18 "physics.h"
struct physics_s;
# 22 "leesedwards.h"
struct lees_edw_s;
# 25 "leesedwards.h"
struct lees_edw_info_s;
# 83 "model.h"
enum lb_halo_enum_type {
# 83 "model.h"
LB_HALO_FULL,
# 84 "model.h"
LB_HALO_REDUCED,
# 85 "model.h"
LB_HALO_HOST,
# 86 "model.h"
LB_HALO_TARGET};
# 88 "model.h"
enum lb_relaxation_enum_t {
# 88 "model.h"
LB_RELAXATION_M10,
# 88 "model.h"
LB_RELAXATION_BGK,
# 88 "model.h"
LB_RELAXATION_TRT};
# 26 "colloids.h"
struct colloid;
# 24 "map.h"
enum map_status {
# 24 "map.h"
MAP_FLUID,
# 24 "map.h"
MAP_BOUNDARY,
# 24 "map.h"
MAP_COLLOID,
# 24 "map.h"
MAP_STATUS_MAX};
# 25 "wall.h"
struct wall_s;
# 21 "bbl.h"
struct bbl_s;
# 23 "halo_swap.h"
struct halo_swap_s;
# 32 "hydro.h"
struct hydro_s;
# 24 "free_energy.h"
enum fe_id_enum {
# 24 "free_energy.h"
FE_SYMMETRIC,
# 25 "free_energy.h"
FE_BRAZOVSKII,
# 26 "free_energy.h"
FE_POLAR,
# 27 "free_energy.h"
FE_LC,
# 28 "free_energy.h"
FE_ELECTRO,
# 29 "free_energy.h"
FE_ELECTRO_SYMMETRIC,
# 30 "free_energy.h"
FE_LC_DROPLET};
# 48 "free_energy.h"
struct fe_vt_s;
# 66 "free_energy.h"
struct fe_s;
# 31 "visc.h"
struct visc_vt_s;
# 37 "visc.h"
struct visc_s;
# 31 "psi.h"
enum psi_force_method {
# 31 "psi.h"
PSI_FORCE_NONE,
# 32 "psi.h"
PSI_FORCE_DIVERGENCE,
# 33 "psi.h"
PSI_FORCE_GRADMU,
# 34 "psi.h"
PSI_FORCE_NTYPES};
# 37 "psi.h"
struct psi_s;
# 21 "ewald.h"
struct ewald_s;
# 40 "interaction.h"
struct interact_s;
# 22 "field_grad_s.h"
struct field_grad_s;
# 26 "phi_force_stress.h"
enum _ZUt8_ {
# 26 "phi_force_stress.h"
PTH_METHOD_NO_FORCE,
# 26 "phi_force_stress.h"
PTH_METHOD_DIVERGENCE,
# 26 "phi_force_stress.h"
PTH_METHOD_GRADMU};
# 28 "phi_force_stress.h"
struct pth_s;
# 34 "blue_phase.h"
struct fe_lc_s;
# 48 "blue_phase.h"
struct fe_lc_param_s;
# 28 "symmetric.h"
struct fe_symm_s;
# 22 "map_s.h"
struct map_s;
# 34 "lc_droplet.h"
struct fe_lc_droplet_s;
# 44 "lc_droplet.h"
struct fe_lc_droplet_param_s;
# 25 "gradient_3d_7pt_solid.h"
struct grad_lc_anch_s;
# 27 "brazovskii.h"
struct fe_brazovskii_s;
# 24 "polar_active.h"
struct fe_polar_s;
# 27 "blue_phase_beris_edwards.h"
struct beris_edw_s;
# 24 "fe_electro.h"
struct fe_electro_s;
# 26 "fe_electro_symmetric.h"
struct fe_electro_symmetric_s;
# 25 "phi_cahn_hilliard.h"
struct phi_ch_s;
# 26 "phi_cahn_hilliard.h"
struct phi_ch_info_s;
# 21 "colloid_io.h"
struct colloid_io_s;
# 23 "colloid_sums.h"
enum colloid_sum_enum_type {
# 24 "colloid_sums.h"
COLLOID_SUM_NULL,
# 25 "colloid_sums.h"
COLLOID_SUM_STRUCTURE,
# 26 "colloid_sums.h"
COLLOID_SUM_DYNAMICS,
# 27 "colloid_sums.h"
COLLOID_SUM_ACTIVE,
# 28 "colloid_sums.h"
COLLOID_SUM_SUBGRID,
# 29 "colloid_sums.h"
COLLOID_SUM_CONSERVATION,
# 30 "colloid_sums.h"
COLLOID_SUM_FORCE_EXT_ONLY,
# 31 "colloid_sums.h"
COLLOID_SUM_MAX};
# 24 "colloids_s.h"
struct colloids_info_s;
# 31 "visc_arrhenius.h"
struct visc_arrhenius_s;
# 41 "visc_arrhenius.h"
struct visc_arrhenius_param_s;
# 24 "stats_turbulent.h"
struct stats_turb_s;
# 24 "stats_rheology.h"
struct stats_rheo_s;
# 25 "stats_calibration.h"
struct stats_ahydro_s;
# 25 "stats_sigma.h"
struct stats_sigma_s;
# 27 "lb_model_s.h"
struct lb_collide_param_s;
# 45 "lb_model_s.h"
struct lb_data_s;
# 21 "field_s.h"
struct field_s;
# 120 "ludwig.c"
struct ludwig_s;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 25 ".././mpi_s/mpi.h"
typedef int MPI_Handle;
# 26 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Comm;
# 28 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Datatype;
# 30 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Op;
# 21 ".././target/target_cuda.h"
typedef enum cudaFuncCache tdpFuncCache;
# 28 ".././target/target_cuda.h"
typedef enum cudaMemcpyKind tdpMemcpyKind;
# 47 ".././target/target_cuda.h"
typedef enum cudaError tdpError_t;
# 22 "pe.h"
typedef struct pe_s pe_t;
# 24 "pe.h"
typedef enum pe_enum_t pe_enum_t;
# 22 "runtime.h"
typedef struct rt_s rt_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 36 "io_harness.h"
typedef struct io_info_s io_info_t;
# 29 "noise.h"
typedef enum noise_enum_t noise_enum_t;
# 31 "noise.h"
typedef struct noise_s noise_t;
# 18 "physics.h"
typedef struct physics_s physics_t;
# 22 "leesedwards.h"
typedef struct lees_edw_s lees_edw_t;
# 23 "leesedwards.h"
typedef struct lees_edw_info_s lees_edw_info_t;
# 25 "leesedwards.h"
struct lees_edw_info_s {
# 26 "leesedwards.h"
int nplanes;
# 27 "leesedwards.h"
int type;
# 28 "leesedwards.h"
int period;
# 29 "leesedwards.h"
int nt0;
# 30 "leesedwards.h"
double uy;};
# 82 "model.h"
typedef struct lb_data_s lb_t;
# 86 "model.h"
typedef enum lb_halo_enum_type lb_halo_enum_t;
# 89 "model.h"
typedef enum lb_relaxation_enum_t lb_relaxation_enum_t;
# 24 "colloids.h"
typedef struct colloid colloid_t;
# 65 "colloids.h"
typedef struct colloids_info_s colloids_info_t;
# 26 "map.h"
typedef struct map_s map_t;
# 25 "wall.h"
typedef struct wall_s wall_t;
# 21 "bbl.h"
typedef struct bbl_s bbl_t;
# 23 "halo_swap.h"
typedef struct halo_swap_s halo_swap_t;
# 26 "hydro.h"
typedef struct hydro_s hydro_t;
# 32 "free_energy.h"
typedef struct fe_s fe_t;
# 33 "free_energy.h"
typedef struct fe_vt_s fe_vt_t;
# 35 "free_energy.h"
typedef int (*fe_free_ft)(fe_t *);
# 37 "free_energy.h"
typedef int (*fe_target_ft)(fe_t *, fe_t **);
# 38 "free_energy.h"
typedef int (*fe_fed_ft)(fe_t *, int, double *);
# 39 "free_energy.h"
typedef int (*fe_mu_ft)(fe_t *, int, double *);
# 40 "free_energy.h"
typedef int (*fe_str_ft)(fe_t *, int, double (*)[3]);
# 41 "free_energy.h"
typedef int (*fe_mu_solv_ft)(fe_t *, int, int, double *);
# 42 "free_energy.h"
typedef int (*fe_hvector_ft)(fe_t *, int, double *);
# 43 "free_energy.h"
typedef int (*fe_htensor_ft)(fe_t *, int, double (*)[3]);
# 45 "free_energy.h"
typedef void (*fe_htensor_v_ft)(fe_t *, int, double (*)[3][1]);
# 46 "free_energy.h"
typedef void (*fe_stress_v_ft)(fe_t *, int, double (*)[3][1]);
# 48 "free_energy.h"
struct fe_vt_s {
# 50 "free_energy.h"
fe_free_ft free;
# 51 "free_energy.h"
fe_target_ft target;
# 52 "free_energy.h"
fe_fed_ft fed;
# 53 "free_energy.h"
fe_mu_ft mu;
# 54 "free_energy.h"
fe_mu_solv_ft mu_solv;
# 55 "free_energy.h"
fe_str_ft stress;
# 56 "free_energy.h"
fe_str_ft str_symm;
# 57 "free_energy.h"
fe_str_ft str_anti;
# 58 "free_energy.h"
fe_hvector_ft hvector;
# 59 "free_energy.h"
fe_htensor_ft htensor;
# 60 "free_energy.h"
fe_htensor_v_ft htensor_v;
# 61 "free_energy.h"
fe_stress_v_ft stress_v;
# 62 "free_energy.h"
fe_stress_v_ft str_symm_v;
# 63 "free_energy.h"
fe_stress_v_ft str_anti_v;};
# 66 "free_energy.h"
struct fe_s {
# 67 "free_energy.h"
fe_vt_t *func;
# 68 "free_energy.h"
int id;
# 69 "free_energy.h"
int use_stress_relaxation;};
# 24 "visc.h"
typedef struct visc_vt_s visc_vt_t;
# 25 "visc.h"
typedef struct visc_s visc_t;
# 27 "visc.h"
typedef int (*visc_free_ft)(visc_t *);
# 28 "visc.h"
typedef int (*visc_update_ft)(visc_t *, hydro_t *);
# 29 "visc.h"
typedef int (*visc_stats_ft)(visc_t *, hydro_t *);
# 31 "visc.h"
struct visc_vt_s {
# 32 "visc.h"
visc_free_ft free;
# 33 "visc.h"
visc_update_ft update;
# 34 "visc.h"
visc_stats_ft stats;};
# 37 "visc.h"
struct visc_s {
# 38 "visc.h"
const visc_vt_t *func;
# 39 "visc.h"
int id;char __nv_no_debug_dummy_end_padding_0[4];};
# 37 "psi.h"
typedef struct psi_s psi_t;
# 41 "psi.h"
typedef int (*f_vare_t)(void *, int, double *);
# 21 "ewald.h"
typedef struct ewald_s ewald_t;
# 40 "interaction.h"
typedef struct interact_s interact_t;
# 28 "field.h"
typedef struct field_s field_t;
# 21 "field_grad.h"
typedef struct field_grad_s field_grad_t;
# 28 "phi_force_stress.h"
typedef struct pth_s pth_t;
# 29 "blue_phase.h"
typedef struct fe_lc_s fe_lc_t;
# 30 "blue_phase.h"
typedef struct fe_lc_param_s fe_lc_param_t;
# 34 "blue_phase.h"
struct fe_lc_s {
# 35 "blue_phase.h"
fe_t super;
# 36 "blue_phase.h"
pe_t *pe;
# 37 "blue_phase.h"
cs_t *cs;
# 38 "blue_phase.h"
fe_lc_param_t *param;
# 39 "blue_phase.h"
field_t *q;
# 40 "blue_phase.h"
field_grad_t *dq;
# 41 "blue_phase.h"
field_t *p;
# 42 "blue_phase.h"
field_grad_t *dp;
# 43 "blue_phase.h"
fe_lc_t *target;};
# 24 "symmetric.h"
typedef struct fe_symm_s fe_symm_t;
# 31 "lc_droplet.h"
typedef struct fe_lc_droplet_s fe_lc_droplet_t;
# 32 "lc_droplet.h"
typedef struct fe_lc_droplet_param_s fe_lc_droplet_param_t;
# 34 "lc_droplet.h"
struct fe_lc_droplet_s {
# 35 "lc_droplet.h"
fe_t super;
# 36 "lc_droplet.h"
pe_t *pe;
# 37 "lc_droplet.h"
cs_t *cs;
# 38 "lc_droplet.h"
fe_lc_droplet_param_t *param;
# 39 "lc_droplet.h"
fe_lc_t *lc;
# 40 "lc_droplet.h"
fe_symm_t *symm;
# 41 "lc_droplet.h"
fe_lc_droplet_t *target;};
# 25 "gradient_3d_7pt_solid.h"
typedef struct grad_lc_anch_s grad_lc_anch_t;
# 27 "brazovskii.h"
typedef struct fe_brazovskii_s fe_brazovskii_t;
# 24 "polar_active.h"
typedef struct fe_polar_s fe_polar_t;
# 27 "blue_phase_beris_edwards.h"
typedef struct beris_edw_s beris_edw_t;
# 24 "fe_electro.h"
typedef struct fe_electro_s fe_electro_t;
# 26 "fe_electro_symmetric.h"
typedef struct fe_electro_symmetric_s fe_es_t;
# 25 "phi_cahn_hilliard.h"
typedef struct phi_ch_s phi_ch_t;
# 26 "phi_cahn_hilliard.h"
typedef struct phi_ch_info_s phi_ch_info_t;
# 21 "colloid_io.h"
typedef struct colloid_io_s colloid_io_t;
# 31 "colloid_sums.h"
typedef enum colloid_sum_enum_type colloid_sum_enum_t;
# 24 "colloids_s.h"
struct colloids_info_s {
# 26 "colloids_s.h"
int nhalo;
# 27 "colloids_s.h"
int ntotal;
# 28 "colloids_s.h"
int nallocated;
# 29 "colloids_s.h"
int ncell[3];
# 30 "colloids_s.h"
int str[3];
# 31 "colloids_s.h"
int nsites;
# 32 "colloids_s.h"
int ncells;
# 34 "colloids_s.h"
int rebuild_freq;
# 36 "colloids_s.h"
double rho0;
# 37 "colloids_s.h"
double drmax;
# 39 "colloids_s.h"
colloid_t **clist;
# 40 "colloids_s.h"
colloid_t **map_old;
# 41 "colloids_s.h"
colloid_t **map_new;
# 42 "colloids_s.h"
colloid_t *headall;
# 43 "colloids_s.h"
colloid_t *headlocal;
# 45 "colloids_s.h"
pe_t *pe;
# 46 "colloids_s.h"
cs_t *cs;
# 47 "colloids_s.h"
colloids_info_t *target;};
# 26 "visc_arrhenius.h"
typedef struct visc_arrhenius_param_s visc_arrhenius_param_t;
# 27 "visc_arrhenius.h"
typedef struct visc_arrhenius_s visc_arrhenius_t;
# 41 "visc_arrhenius.h"
struct visc_arrhenius_param_s {
# 42 "visc_arrhenius.h"
double eta_minus;
# 43 "visc_arrhenius.h"
double eta_plus;
# 44 "visc_arrhenius.h"
double phistar;};
# 24 "stats_turbulent.h"
typedef struct stats_turb_s stats_turb_t;
# 24 "stats_rheology.h"
typedef struct stats_rheo_s stats_rheo_t;
# 25 "stats_calibration.h"
typedef struct stats_ahydro_s stats_ahydro_t;
# 25 "stats_sigma.h"
typedef struct stats_sigma_s stats_sigma_t;
# 25 "lb_model_s.h"
typedef struct lb_collide_param_s lb_collide_param_t;
# 45 "lb_model_s.h"
struct lb_data_s {
# 47 "lb_model_s.h"
int ndist;
# 48 "lb_model_s.h"
int nsite;
# 49 "lb_model_s.h"
int model;
# 51 "lb_model_s.h"
pe_t *pe;
# 52 "lb_model_s.h"
cs_t *cs;
# 53 "lb_model_s.h"
halo_swap_t *halo;
# 54 "lb_model_s.h"
io_info_t *io_info;
# 55 "lb_model_s.h"
io_info_t *io_rho;
# 57 "lb_model_s.h"
double *f;
# 58 "lb_model_s.h"
double *fprime;
# 60 "lb_model_s.h"
lb_collide_param_t *param;
# 61 "lb_model_s.h"
lb_relaxation_enum_t nrelax;
# 66 "lb_model_s.h"
MPI_Datatype plane_xy_full;
# 67 "lb_model_s.h"
MPI_Datatype plane_xz_full;
# 68 "lb_model_s.h"
MPI_Datatype plane_yz_full;
# 69 "lb_model_s.h"
MPI_Datatype plane_xy_reduced[2];
# 70 "lb_model_s.h"
MPI_Datatype plane_xz_reduced[2];
# 71 "lb_model_s.h"
MPI_Datatype plane_yz_reduced[2];
# 72 "lb_model_s.h"
MPI_Datatype plane_xy[2];
# 73 "lb_model_s.h"
MPI_Datatype plane_xz[2];
# 74 "lb_model_s.h"
MPI_Datatype plane_yz[2];
# 75 "lb_model_s.h"
MPI_Datatype site_x[2];
# 76 "lb_model_s.h"
MPI_Datatype site_y[2];
# 77 "lb_model_s.h"
MPI_Datatype site_z[2];
# 79 "lb_model_s.h"
lb_t *target;};
# 21 "field_s.h"
struct field_s {
# 22 "field_s.h"
int nf;
# 23 "field_s.h"
int nhcomm;
# 24 "field_s.h"
int nsites;
# 25 "field_s.h"
double *data;
# 26 "field_s.h"
char *name;
# 28 "field_s.h"
pe_t *pe;
# 29 "field_s.h"
cs_t *cs;
# 30 "field_s.h"
lees_edw_t *le;
# 31 "field_s.h"
io_info_t *info;
# 32 "field_s.h"
halo_swap_t *halo;
# 34 "field_s.h"
field_t *target;};
# 119 "ludwig.c"
typedef struct ludwig_s ludwig_t;
# 120 "ludwig.c"
struct ludwig_s {
# 121 "ludwig.c"
pe_t *pe;
# 122 "ludwig.c"
rt_t *rt;
# 123 "ludwig.c"
cs_t *cs;
# 124 "ludwig.c"
physics_t *phys;
# 125 "ludwig.c"
lees_edw_t *le;
# 126 "ludwig.c"
lb_t *lb;
# 127 "ludwig.c"
hydro_t *hydro;
# 128 "ludwig.c"
field_t *phi;
# 129 "ludwig.c"
field_t *p;
# 130 "ludwig.c"
field_t *q;
# 131 "ludwig.c"
field_grad_t *phi_grad;
# 132 "ludwig.c"
field_grad_t *p_grad;
# 133 "ludwig.c"
field_grad_t *q_grad;
# 134 "ludwig.c"
psi_t *psi;
# 135 "ludwig.c"
map_t *map;
# 136 "ludwig.c"
wall_t *wall;
# 137 "ludwig.c"
noise_t *noise_rho;
# 138 "ludwig.c"
noise_t *noise_phi;
# 139 "ludwig.c"
f_vare_t epsilon;
# 141 "ludwig.c"
fe_t *fe;
# 142 "ludwig.c"
phi_ch_t *pch;
# 143 "ludwig.c"
beris_edw_t *be;
# 144 "ludwig.c"
pth_t *pth;
# 145 "ludwig.c"
fe_lc_t *fe_lc;
# 146 "ludwig.c"
fe_symm_t *fe_symm;
# 147 "ludwig.c"
fe_brazovskii_t *fe_braz;
# 149 "ludwig.c"
visc_t *visc;
# 151 "ludwig.c"
colloids_info_t *collinfo;
# 152 "ludwig.c"
colloid_io_t *cio;
# 153 "ludwig.c"
ewald_t *ewald;
# 154 "ludwig.c"
interact_t *interact;
# 155 "ludwig.c"
bbl_t *bbl;
# 157 "ludwig.c"
stats_sigma_t *stat_sigma;
# 158 "ludwig.c"
stats_ahydro_t *stat_ah;
# 159 "ludwig.c"
stats_rheo_t *stat_rheo;
# 160 "ludwig.c"
stats_turb_t *stat_turb;};
# 150 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) void free(void *);
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
# 46 ".././target/target.h"
___device__(extern  __no_sc__) tdpError_t _Z17tdpGetDeviceCountPi(int *);
# 59 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_nlocalP8coords_sPi(cs_t *, int *);
# 62 "coords.h"
___device__(extern  __no_sc__) int _Z8cs_indexP8coords_siii(cs_t *, int, int, int);
# 203 "memory.h"
___device__(extern  __no_sc__) int _Z25reverse_addr_rank1_assertiPKciiii(int, const char *, int, int, int, int);
# 53 "physics.h"
___device__(extern  __no_sc__) int _Z24physics_control_timestepP9physics_s(physics_t *);
# 110 "model.h"
___device__(extern  __no_sc__) int _Z8lb_ndistP9lb_data_sPi(lb_t *, int *);
# 40 "map.h"
___device__(extern  __no_sc__) int _Z10map_statusP5map_siPi(map_t *, int, int *);
# 56 "wall.h"
___device__(extern  __no_sc__) int _Z10wall_is_pmP6wall_sPi(wall_t *, int *);
# 57 "wall.h"
___device__(extern  __no_sc__) int _Z12wall_presentP6wall_s(wall_t *);
#include "common_functions.h"
