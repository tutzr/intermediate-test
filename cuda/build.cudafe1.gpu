typedef char __nv_bool;
# 22 "pe.h"
struct pe_s;
# 22 "coords.h"
struct coords_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 18 "physics.h"
struct physics_s;
# 21 "d3q19.h"
enum _ZUt0_ {
# 21 "d3q19.h"
NDIM19 = 3};
# 22 "d3q19.h"
enum _ZUt1_ {
# 22 "d3q19.h"
NVEL19 = 19};
# 23 "d3q19.h"
enum _ZUt2_ {
# 23 "d3q19.h"
CVXBLOCK19 = 1};
# 24 "d3q19.h"
enum _ZUt3_ {
# 24 "d3q19.h"
CVYBLOCK19 = 3};
# 25 "d3q19.h"
enum _ZUt4_ {
# 25 "d3q19.h"
CVZBLOCK19 = 5};
# 49 "model.h"
enum _ZUt5_ {
# 49 "model.h"
NDIM = 3,
# 50 "model.h"
NVEL = 19,
# 51 "model.h"
CVXBLOCK = 1,
# 52 "model.h"
CVYBLOCK = 3,
# 53 "model.h"
CVZBLOCK = 5};
# 73 "io_harness.h"
struct io_info_s;
# 79 "model.h"
enum lb_dist_enum_type {
# 79 "model.h"
LB_RHO,
# 79 "model.h"
LB_PHI};
# 88 "model.h"
enum lb_relaxation_enum_t {
# 88 "model.h"
LB_RELAXATION_M10,
# 88 "model.h"
LB_RELAXATION_BGK,
# 88 "model.h"
LB_RELAXATION_TRT};
# 23 "halo_swap.h"
struct halo_swap_s;
# 27 "lb_model_s.h"
struct lb_collide_param_s;
# 45 "lb_model_s.h"
struct lb_data_s;
# 36 "colloid.h"
enum colloid_type_enum {
# 36 "colloid.h"
COLLOID_TYPE_DEFAULT,
# 37 "colloid.h"
COLLOID_TYPE_ACTIVE,
# 38 "colloid.h"
COLLOID_TYPE_SUBGRID,
# 39 "colloid.h"
COLLOID_TYPE_JANUS};
# 44 "colloid.h"
struct colloid_state_type;
# 24 "colloid_link.h"
struct colloid_link_type;
# 37 "colloid_link.h"
enum link_status {
# 37 "colloid_link.h"
LINK_FLUID,
# 37 "colloid_link.h"
LINK_COLLOID,
# 37 "colloid_link.h"
LINK_BOUNDARY,
# 37 "colloid_link.h"
LINK_UNUSED};
# 26 "colloids.h"
struct colloid;
# 65 "colloids.h"
struct colloids_info_s;
# 23 "colloid_sums.h"
enum colloid_sum_enum_type {
# 24 "colloid_sums.h"
COLLOID_SUM_NULL,
# 25 "colloid_sums.h"
COLLOID_SUM_STRUCTURE,
# 26 "colloid_sums.h"
COLLOID_SUM_DYNAMICS,
# 27 "colloid_sums.h"
COLLOID_SUM_ACTIVE,
# 28 "colloid_sums.h"
COLLOID_SUM_SUBGRID,
# 29 "colloid_sums.h"
COLLOID_SUM_CONSERVATION,
# 30 "colloid_sums.h"
COLLOID_SUM_FORCE_EXT_ONLY,
# 31 "colloid_sums.h"
COLLOID_SUM_MAX};
# 24 "map.h"
enum map_status {
# 24 "map.h"
MAP_FLUID,
# 24 "map.h"
MAP_BOUNDARY,
# 24 "map.h"
MAP_COLLOID,
# 24 "map.h"
MAP_STATUS_MAX};
# 26 "map.h"
struct map_s;
# 37 "psi.h"
struct psi_s;
# 25 "wall.h"
struct wall_s;
# 28 "field.h"
struct field_s;
# 24 "free_energy.h"
enum fe_id_enum {
# 24 "free_energy.h"
FE_SYMMETRIC,
# 25 "free_energy.h"
FE_BRAZOVSKII,
# 26 "free_energy.h"
FE_POLAR,
# 27 "free_energy.h"
FE_LC,
# 28 "free_energy.h"
FE_ELECTRO,
# 29 "free_energy.h"
FE_ELECTRO_SYMMETRIC,
# 30 "free_energy.h"
FE_LC_DROPLET};
# 48 "free_energy.h"
struct fe_vt_s;
# 66 "free_energy.h"
struct fe_s;
# 21 "field_grad.h"
struct field_grad_s;
# 34 "blue_phase.h"
struct fe_lc_s;
# 48 "blue_phase.h"
struct fe_lc_param_s;
# 78 "blue_phase.h"
enum lc_anchoring_enum {
# 78 "blue_phase.h"
LC_ANCHORING_PLANAR,
# 79 "blue_phase.h"
LC_ANCHORING_NORMAL,
# 80 "blue_phase.h"
LC_ANCHORING_FIXED,
# 81 "blue_phase.h"
LC_ANCHORING_TYPES};
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 194 "/usr/include/sys/types.h" 3
typedef signed char int8_t;
# 25 ".././mpi_s/mpi.h"
typedef int MPI_Handle;
# 28 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Datatype;
# 22 "pe.h"
typedef struct pe_s pe_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 18 "physics.h"
typedef struct physics_s physics_t;
# 36 "io_harness.h"
typedef struct io_info_s io_info_t;
# 79 "model.h"
typedef enum lb_dist_enum_type lb_dist_enum_t;
# 82 "model.h"
typedef struct lb_data_s lb_t;
# 89 "model.h"
typedef enum lb_relaxation_enum_t lb_relaxation_enum_t;
# 23 "halo_swap.h"
typedef struct halo_swap_s halo_swap_t;
# 25 "lb_model_s.h"
typedef struct lb_collide_param_s lb_collide_param_t;
# 27 "lb_model_s.h"
struct lb_collide_param_s {
# 28 "lb_model_s.h"
int8_t isghost;
# 29 "lb_model_s.h"
int8_t cv[19][3];
# 30 "lb_model_s.h"
int nsite;
# 31 "lb_model_s.h"
int ndist;
# 32 "lb_model_s.h"
double rho0;
# 33 "lb_model_s.h"
double eta_shear;
# 34 "lb_model_s.h"
double var_shear;
# 35 "lb_model_s.h"
double eta_bulk;
# 36 "lb_model_s.h"
double var_bulk;
# 37 "lb_model_s.h"
double var_noise[19];
# 38 "lb_model_s.h"
double rtau[19];
# 39 "lb_model_s.h"
double wv[19];
# 40 "lb_model_s.h"
double q[19][3][3];
# 41 "lb_model_s.h"
double ma[19][19];
# 42 "lb_model_s.h"
double mi[19][19];};
# 45 "lb_model_s.h"
struct lb_data_s {
# 47 "lb_model_s.h"
int ndist;
# 48 "lb_model_s.h"
int nsite;
# 49 "lb_model_s.h"
int model;
# 51 "lb_model_s.h"
pe_t *pe;
# 52 "lb_model_s.h"
cs_t *cs;
# 53 "lb_model_s.h"
halo_swap_t *halo;
# 54 "lb_model_s.h"
io_info_t *io_info;
# 55 "lb_model_s.h"
io_info_t *io_rho;
# 57 "lb_model_s.h"
double *f;
# 58 "lb_model_s.h"
double *fprime;
# 60 "lb_model_s.h"
lb_collide_param_t *param;
# 61 "lb_model_s.h"
lb_relaxation_enum_t nrelax;
# 66 "lb_model_s.h"
MPI_Datatype plane_xy_full;
# 67 "lb_model_s.h"
MPI_Datatype plane_xz_full;
# 68 "lb_model_s.h"
MPI_Datatype plane_yz_full;
# 69 "lb_model_s.h"
MPI_Datatype plane_xy_reduced[2];
# 70 "lb_model_s.h"
MPI_Datatype plane_xz_reduced[2];
# 71 "lb_model_s.h"
MPI_Datatype plane_yz_reduced[2];
# 72 "lb_model_s.h"
MPI_Datatype plane_xy[2];
# 73 "lb_model_s.h"
MPI_Datatype plane_xz[2];
# 74 "lb_model_s.h"
MPI_Datatype plane_yz[2];
# 75 "lb_model_s.h"
MPI_Datatype site_x[2];
# 76 "lb_model_s.h"
MPI_Datatype site_y[2];
# 77 "lb_model_s.h"
MPI_Datatype site_z[2];
# 79 "lb_model_s.h"
lb_t *target;};
# 42 "colloid.h"
typedef struct colloid_state_type colloid_state_t;
# 44 "colloid.h"
struct colloid_state_type {
# 46 "colloid.h"
int index;
# 47 "colloid.h"
int rebuild;
# 48 "colloid.h"
int nbonds;
# 49 "colloid.h"
int nangles;
# 51 "colloid.h"
int isfixedr;
# 52 "colloid.h"
int isfixedv;
# 53 "colloid.h"
int isfixedw;
# 54 "colloid.h"
int isfixeds;
# 56 "colloid.h"
int type;
# 57 "colloid.h"
int bond[2];
# 59 "colloid.h"
int rng;
# 61 "colloid.h"
int isfixedrxyz[3];
# 62 "colloid.h"
int isfixedvxyz[3];
# 67 "colloid.h"
int intpad[14];
# 71 "colloid.h"
double a0;
# 72 "colloid.h"
double ah;
# 73 "colloid.h"
double r[3];
# 74 "colloid.h"
double v[3];
# 75 "colloid.h"
double w[3];
# 76 "colloid.h"
double s[3];
# 77 "colloid.h"
double m[3];
# 78 "colloid.h"
double b1;
# 79 "colloid.h"
double b2;
# 80 "colloid.h"
double c;
# 81 "colloid.h"
double h;
# 82 "colloid.h"
double dr[3];
# 83 "colloid.h"
double deltaphi;
# 92 "colloid.h"
double q0;
# 93 "colloid.h"
double q1;
# 94 "colloid.h"
double epsilon;
# 96 "colloid.h"
double deltaq0;
# 97 "colloid.h"
double deltaq1;
# 98 "colloid.h"
double sa;
# 99 "colloid.h"
double saf;
# 101 "colloid.h"
double dpad[16];};
# 22 "colloid_link.h"
typedef struct colloid_link_type colloid_link_t;
# 24 "colloid_link.h"
struct colloid_link_type {
# 26 "colloid_link.h"
int i;
# 27 "colloid_link.h"
int j;
# 28 "colloid_link.h"
int p;
# 29 "colloid_link.h"
int status;
# 30 "colloid_link.h"
double rb[3];
# 33 "colloid_link.h"
colloid_link_t *spare;
# 34 "colloid_link.h"
colloid_link_t *next;};
# 24 "colloids.h"
typedef struct colloid colloid_t;
# 26 "colloids.h"
struct colloid {
# 28 "colloids.h"
colloid_state_t s;
# 32 "colloids.h"
double random[6];
# 33 "colloids.h"
double force[3];
# 34 "colloids.h"
double torque[3];
# 35 "colloids.h"
double f0[3];
# 36 "colloids.h"
double t0[3];
# 37 "colloids.h"
double cbar[3];
# 38 "colloids.h"
double rxcbar[3];
# 39 "colloids.h"
double deltam;
# 40 "colloids.h"
double sumw;
# 41 "colloids.h"
double zeta[21];
# 42 "colloids.h"
double stats[3];
# 43 "colloids.h"
double fc0[3];
# 44 "colloids.h"
double tc0[3];
# 45 "colloids.h"
double sump;
# 46 "colloids.h"
double dq[2];
# 48 "colloids.h"
double fsub[3];
# 49 "colloids.h"
double fex[3];
# 50 "colloids.h"
double tex[3];
# 54 "colloids.h"
colloid_link_t *lnk;
# 55 "colloids.h"
colloid_t *next;
# 57 "colloids.h"
colloid_t *nextall;
# 58 "colloids.h"
colloid_t *nextlocal;
# 62 "colloids.h"
colloid_t *bonded[2];};
# 65 "colloids.h"
typedef struct colloids_info_s colloids_info_t;
# 31 "colloid_sums.h"
typedef enum colloid_sum_enum_type colloid_sum_enum_t;
# 26 "map.h"
typedef struct map_s map_t;
# 37 "psi.h"
typedef struct psi_s psi_t;
# 25 "wall.h"
typedef struct wall_s wall_t;
# 28 "field.h"
typedef struct field_s field_t;
# 32 "free_energy.h"
typedef struct fe_s fe_t;
# 33 "free_energy.h"
typedef struct fe_vt_s fe_vt_t;
# 66 "free_energy.h"
struct fe_s {
# 67 "free_energy.h"
fe_vt_t *func;
# 68 "free_energy.h"
int id;
# 69 "free_energy.h"
int use_stress_relaxation;};
# 21 "field_grad.h"
typedef struct field_grad_s field_grad_t;
# 29 "blue_phase.h"
typedef struct fe_lc_s fe_lc_t;
# 30 "blue_phase.h"
typedef struct fe_lc_param_s fe_lc_param_t;
# 34 "blue_phase.h"
struct fe_lc_s {
# 35 "blue_phase.h"
fe_t super;
# 36 "blue_phase.h"
pe_t *pe;
# 37 "blue_phase.h"
cs_t *cs;
# 38 "blue_phase.h"
fe_lc_param_t *param;
# 39 "blue_phase.h"
field_t *q;
# 40 "blue_phase.h"
field_grad_t *dq;
# 41 "blue_phase.h"
field_t *p;
# 42 "blue_phase.h"
field_grad_t *dp;
# 43 "blue_phase.h"
fe_lc_t *target;};
# 48 "blue_phase.h"
struct fe_lc_param_s {
# 49 "blue_phase.h"
double a0;
# 50 "blue_phase.h"
double q0;
# 51 "blue_phase.h"
double gamma;
# 52 "blue_phase.h"
double kappa0;
# 53 "blue_phase.h"
double kappa1;
# 55 "blue_phase.h"
double xi;
# 56 "blue_phase.h"
double zeta0;
# 57 "blue_phase.h"
double zeta1;
# 58 "blue_phase.h"
double zeta2;
# 59 "blue_phase.h"
double redshift;
# 60 "blue_phase.h"
double rredshift;
# 61 "blue_phase.h"
double epsilon;
# 62 "blue_phase.h"
double amplitude0;
# 63 "blue_phase.h"
double e0coswt[3];
# 65 "blue_phase.h"
double w1_coll;
# 66 "blue_phase.h"
double w2_coll;
# 67 "blue_phase.h"
double w1_wall;
# 68 "blue_phase.h"
double w2_wall;
# 69 "blue_phase.h"
double nfix[3];
# 71 "blue_phase.h"
int anchoring_coll;
# 72 "blue_phase.h"
int anchoring_wall;
# 73 "blue_phase.h"
int is_redshift_updated;
# 74 "blue_phase.h"
int is_active;};
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
#if !defined(__CUDABE__)
# 612 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double sqrt(double);
#endif
#if !defined(__CUDABE__)
# 1447 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) double floor(double);
#endif
#if !defined(__CUDABE__)
# 2920 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) double ceil(double);
#endif
# 59 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_nlocalP8coords_sPi(cs_t *, int *);
# 60 "coords.h"
___device__(extern  __no_sc__) int _Z16cs_nlocal_offsetP8coords_sPi(cs_t *, int *);
# 61 "coords.h"
___device__(extern  __no_sc__) int _Z8cs_nhaloP8coords_sPi(cs_t *, int *);
# 62 "coords.h"
___device__(extern  __no_sc__) int _Z8cs_indexP8coords_siii(cs_t *, int, int, int);
# 65 "coords.h"
___device__(extern  __no_sc__) int _Z19cs_minimum_distanceP8coords_sPKdS2_Pd(cs_t *, const double *, const double *, double *);
# 67 "coords.h"
___device__(extern  __no_sc__) int _Z15cs_index_to_ijkP8coords_siPi(cs_t *, int, int *);
# 40 "physics.h"
___device__(extern  __no_sc__) int _Z11physics_refPP9physics_s(physics_t **);
# 41 "physics.h"
___device__(extern  __no_sc__) int _Z12physics_rho0P9physics_sPd(physics_t *, double *);
# 42 "physics.h"
___device__(extern  __no_sc__) int _Z12physics_phi0P9physics_sPd(physics_t *, double *);
# 110 "model.h"
___device__(extern  __no_sc__) int _Z8lb_ndistP9lb_data_sPi(lb_t *, int *);
# 111 "model.h"
___device__(extern  __no_sc__) int _Z4lb_fP9lb_data_siiiPd(lb_t *, int, int, int, double *);
# 112 "model.h"
___device__(extern  __no_sc__) int _Z8lb_f_setP9lb_data_siiid(lb_t *, int, int, int, double);
# 113 "model.h"
___device__(extern  __no_sc__) int _Z13lb_0th_momentP9lb_data_si17lb_dist_enum_typePd(lb_t *, int, lb_dist_enum_t, double *);
# 40 "map.h"
___device__(extern  __no_sc__) int _Z10map_statusP5map_siPi(map_t *, int, int *);
# 41 "map.h"
___device__(extern  __no_sc__) int _Z14map_status_setP5map_sii(map_t *, int, int);
# 43 "map.h"
___device__(extern  __no_sc__) int _Z12map_data_setP5map_siPd(map_t *, int, double *);
# 44 "map.h"
___device__(extern  __no_sc__) int _Z9map_ndataP5map_sPi(map_t *, int *);
# 41 "util.h"
___device__(extern  __no_sc__) double _Z11dot_productPKdS0_(const double *, const double *);
# 42 "util.h"
___device__(extern  __no_sc__) void _Z13cross_productPKdS0_Pd(const double *, const double *, double *);
# 44 "util.h"
___device__(extern  __no_sc__) double _Z7modulusPKd(const double *);
# 47 "util.h"
___device__(extern  __no_sc__) int _Z4iminii(const int, const int);
# 48 "util.h"
___device__(extern  __no_sc__) int _Z4imaxii(const int, const int);
# 45 "field.h"
___device__(extern  __no_sc__) int _Z8field_nfP7field_sPi(field_t *, int *);
# 46 "field.h"
___device__(extern  __no_sc__) int _Z12field_scalarP7field_siPd(field_t *, int, double *);
# 47 "field.h"
___device__(extern  __no_sc__) int _Z16field_scalar_setP7field_sid(field_t *, int, double);
# 52 "field.h"
___device__(extern  __no_sc__) int _Z16field_tensor_setP7field_siPA3_d(field_t *, int, double (*)[3]);
# 54 "field.h"
___device__(extern  __no_sc__) int _Z18field_scalar_arrayP7field_siPd(field_t *, int, double *);
# 56 "field.h"
___device__(extern  __no_sc__) int _Z22field_scalar_array_setP7field_siPKd(field_t *, int, const double *);
# 168 "blue_phase.h"
___device__(extern  __no_sc__) int _Z23fe_lc_amplitude_computeP13fe_lc_param_sPd(fe_lc_param_t *, double *);
#include "common_functions.h"
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
