typedef char __nv_bool;
# 246 "/usr/include/libio.h" 3
struct _IO_FILE;
# 33 ".././mpi_s/mpi.h"
struct MPI_Status;
# 58 ".././mpi_s/mpi.h"
enum elementary_datatypes {
# 58 ".././mpi_s/mpi.h"
MPI_CHAR,
# 59 ".././mpi_s/mpi.h"
MPI_SHORT,
# 60 ".././mpi_s/mpi.h"
MPI_INT,
# 61 ".././mpi_s/mpi.h"
MPI_LONG,
# 62 ".././mpi_s/mpi.h"
MPI_UNSIGNED_CHAR,
# 63 ".././mpi_s/mpi.h"
MPI_UNSIGNED_SHORT,
# 64 ".././mpi_s/mpi.h"
MPI_UNSIGNED,
# 65 ".././mpi_s/mpi.h"
MPI_UNSIGNED_LONG,
# 66 ".././mpi_s/mpi.h"
MPI_FLOAT,
# 67 ".././mpi_s/mpi.h"
MPI_DOUBLE,
# 68 ".././mpi_s/mpi.h"
MPI_LONG_DOUBLE,
# 69 ".././mpi_s/mpi.h"
MPI_BYTE,
# 70 ".././mpi_s/mpi.h"
MPI_PACKED};
# 72 ".././mpi_s/mpi.h"
enum collective_operations {
# 72 ".././mpi_s/mpi.h"
MPI_MAX,
# 73 ".././mpi_s/mpi.h"
MPI_MIN,
# 74 ".././mpi_s/mpi.h"
MPI_SUM,
# 75 ".././mpi_s/mpi.h"
MPI_PROD,
# 76 ".././mpi_s/mpi.h"
MPI_MAXLOC,
# 77 ".././mpi_s/mpi.h"
MPI_MINLOC,
# 78 ".././mpi_s/mpi.h"
MPI_BAND,
# 79 ".././mpi_s/mpi.h"
MPI_BOR,
# 80 ".././mpi_s/mpi.h"
MPI_BXOR,
# 81 ".././mpi_s/mpi.h"
MPI_LAND,
# 82 ".././mpi_s/mpi.h"
MPI_LOR,
# 83 ".././mpi_s/mpi.h"
MPI_LXOR};
# 22 "pe.h"
struct pe_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 9 "coords_s.h"
struct coords_param_s;
# 24 "coords_s.h"
struct coords_s;
# 32 "io_options.h"
enum io_mode_enum {
# 32 "io_options.h"
IO_MODE_INVALID,
# 32 "io_options.h"
IO_MODE_SINGLE,
# 32 "io_options.h"
IO_MODE_MULTIPLE};
# 36 "io_options.h"
enum io_record_format_enum {
# 36 "io_options.h"
IO_RECORD_INVALID,
# 37 "io_options.h"
IO_RECORD_ASCII,
# 38 "io_options.h"
IO_RECORD_BINARY};
# 42 "io_options.h"
enum io_metadata_version_enum {
# 42 "io_options.h"
IO_METADATA_INVALID,
# 43 "io_options.h"
IO_METADATA_SINGLE_V1,
# 44 "io_options.h"
IO_METADATA_MULTI_V1};
# 52 "io_options.h"
struct io_options_s;
# 36 "io_info_args.h"
struct io_info_args_s;
# 28 "io_harness.h"
enum io_format_enum {
# 28 "io_harness.h"
IO_FORMAT_NULL,
# 29 "io_harness.h"
IO_FORMAT_ASCII,
# 30 "io_harness.h"
IO_FORMAT_BINARY,
# 31 "io_harness.h"
IO_FORMAT_ASCII_SERIAL,
# 32 "io_harness.h"
IO_FORMAT_BINARY_SERIAL,
# 33 "io_harness.h"
IO_FORMAT_DEFAULT};
# 44 "io_harness.h"
struct io_info_arg_s;
# 48 "io_harness.h"
struct io_implementation_s;
# 60 "io_harness.h"
struct io_decomposition_s;
# 73 "io_harness.h"
struct io_info_s;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 48 "/usr/include/stdio.h" 3
typedef struct _IO_FILE FILE;
# 25 ".././mpi_s/mpi.h"
typedef int MPI_Handle;
# 26 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Comm;
# 27 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Group;
# 28 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Datatype;
# 30 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Op;
# 33 ".././mpi_s/mpi.h"
struct MPI_Status {
# 34 ".././mpi_s/mpi.h"
int MPI_SOURCE;
# 35 ".././mpi_s/mpi.h"
int MPI_TAG;};
# 36 ".././mpi_s/mpi.h"
typedef struct MPI_Status MPI_Status;
# 22 "pe.h"
typedef struct pe_s pe_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 7 "coords_s.h"
typedef struct coords_param_s cs_param_t;
# 24 "coords_s.h"
struct coords_s {
# 25 "coords_s.h"
pe_t *pe;
# 26 "coords_s.h"
int nref;
# 28 "coords_s.h"
cs_param_t *param;
# 31 "coords_s.h"
int mpi_cartrank;
# 32 "coords_s.h"
int reorder;
# 33 "coords_s.h"
int mpi_cart_neighbours[2][3];
# 34 "coords_s.h"
int *listnlocal[3];
# 35 "coords_s.h"
int *listnoffset[3];
# 37 "coords_s.h"
MPI_Comm commcart;
# 38 "coords_s.h"
MPI_Comm commperiodic;
# 40 "coords_s.h"
cs_t *target;};
# 48 "io_options.h"
typedef enum io_mode_enum io_mode_enum_t;
# 49 "io_options.h"
typedef enum io_record_format_enum io_record_format_enum_t;
# 50 "io_options.h"
typedef enum io_metadata_version_enum io_metadata_version_enum_t;
# 52 "io_options.h"
struct io_options_s {
# 53 "io_options.h"
io_mode_enum_t mode;
# 54 "io_options.h"
io_record_format_enum_t iorformat;
# 55 "io_options.h"
io_metadata_version_enum_t metadata_version;
# 56 "io_options.h"
int report;
# 57 "io_options.h"
int asynchronous;};
# 60 "io_options.h"
typedef struct io_options_s io_options_t;
# 32 "io_info_args.h"
typedef struct io_info_args_s io_info_args_t;
# 36 "io_info_args.h"
struct io_info_args_s {
# 37 "io_info_args.h"
io_options_t input;
# 38 "io_info_args.h"
io_options_t output;
# 39 "io_info_args.h"
int grid[3];
# 40 "io_info_args.h"
int nfreq;};
# 33 "io_harness.h"
typedef enum io_format_enum io_format_enum_t;
# 35 "io_harness.h"
typedef struct io_implementation_s io_implementation_t;
# 36 "io_harness.h"
typedef struct io_info_s io_info_t;
# 39 "io_harness.h"
typedef int (*io_rw_cb_ft)(FILE *, int, void *);
# 42 "io_harness.h"
typedef struct io_info_arg_s io_info_arg_t;
# 44 "io_harness.h"
struct io_info_arg_s {
# 45 "io_harness.h"
int grid[3];};
# 48 "io_harness.h"
struct io_implementation_s {
# 49 "io_harness.h"
char name[8192];
# 50 "io_harness.h"
io_rw_cb_ft write_ascii;
# 51 "io_harness.h"
io_rw_cb_ft write_binary;
# 52 "io_harness.h"
io_rw_cb_ft read_ascii;
# 53 "io_harness.h"
io_rw_cb_ft read_binary;
# 54 "io_harness.h"
size_t bytesize_ascii;
# 55 "io_harness.h"
size_t bytesize_binary;};
# 58 "io_harness.h"
typedef struct io_decomposition_s io_decomposition_t;
# 60 "io_harness.h"
struct io_decomposition_s {
# 61 "io_harness.h"
int n_io;
# 62 "io_harness.h"
int index;
# 63 "io_harness.h"
MPI_Comm xcomm;
# 64 "io_harness.h"
MPI_Comm comm;
# 65 "io_harness.h"
int rank;
# 66 "io_harness.h"
int size;
# 67 "io_harness.h"
int ngroup[3];
# 68 "io_harness.h"
int coords[3];
# 69 "io_harness.h"
int nsite[3];
# 70 "io_harness.h"
int offset[3];};
# 73 "io_harness.h"
struct io_info_s {
# 74 "io_harness.h"
pe_t *pe;
# 75 "io_harness.h"
cs_t *cs;
# 77 "io_harness.h"
io_info_args_t args;
# 78 "io_harness.h"
io_implementation_t impl;
# 79 "io_harness.h"
io_decomposition_t *comm;
# 81 "io_harness.h"
io_decomposition_t *io_comm;
# 82 "io_harness.h"
size_t bytesize;
# 83 "io_harness.h"
size_t bytesize_ascii;
# 84 "io_harness.h"
size_t bytesize_binary;
# 85 "io_harness.h"
int nsites;
# 86 "io_harness.h"
int maxlocal;
# 87 "io_harness.h"
int metadata_written;
# 88 "io_harness.h"
int processor_independent;
# 89 "io_harness.h"
int single_file_read;
# 90 "io_harness.h"
int report;
# 91 "io_harness.h"
char metadata_stub[4096];
# 92 "io_harness.h"
char name[4096];
# 93 "io_harness.h"
io_rw_cb_ft write_data;
# 94 "io_harness.h"
io_rw_cb_ft write_ascii;
# 95 "io_harness.h"
io_rw_cb_ft write_binary;
# 96 "io_harness.h"
io_rw_cb_ft read_data;
# 97 "io_harness.h"
io_rw_cb_ft read_ascii;
# 98 "io_harness.h"
io_rw_cb_ft read_binary;};
#if !defined(__CUDABE__)
# 89 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) void *memcpy(void *__restrict__, const void *__restrict__, size_t);
#endif
# 149 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__malloc__)) __attribute__((__nothrow__)) void *malloc(size_t);
# 150 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) void free(void *);
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
# 54 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_cartszP8coords_sPi(cs_t *, int *);
# 55 "coords.h"
___device__(extern  __no_sc__) int _Z14cs_cart_coordsP8coords_sPi(cs_t *, int *);
# 59 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_nlocalP8coords_sPi(cs_t *, int *);
# 60 "coords.h"
___device__(extern  __no_sc__) int _Z16cs_nlocal_offsetP8coords_sPi(cs_t *, int *);
# 62 "coords.h"
___device__(extern  __no_sc__) int _Z8cs_indexP8coords_siii(cs_t *, int, int, int);
# 63 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_ntotalP8coords_sPi(cs_t *, int *);
#include "common_functions.h"
#if !defined(__CUDABE__)
#endif
