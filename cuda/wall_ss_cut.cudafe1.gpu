typedef char __nv_bool;
# 22 "pe.h"
struct pe_s;
# 22 "coords.h"
struct coords_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 18 "physics.h"
struct physics_s;
# 25 "wall.h"
struct wall_s;
# 44 "colloid.h"
struct colloid_state_type;
# 24 "colloid_link.h"
struct colloid_link_type;
# 26 "colloids.h"
struct colloid;
# 65 "colloids.h"
struct colloids_info_s;
# 23 "interaction.h"
enum interact_enum {
# 24 "interaction.h"
INTERACT_PAIR,
# 25 "interaction.h"
INTERACT_BOND,
# 26 "interaction.h"
INTERACT_ANGLE,
# 27 "interaction.h"
INTERACT_LUBR,
# 28 "interaction.h"
INTERACT_WALL,
# 29 "interaction.h"
INTERACT_MAX};
# 32 "interaction.h"
enum interact_stat_enum {
# 33 "interaction.h"
INTERACT_STAT_VLOCAL,
# 34 "interaction.h"
INTERACT_STAT_HMINLOCAL,
# 35 "interaction.h"
INTERACT_STAT_RMINLOCAL,
# 36 "interaction.h"
INTERACT_STAT_RMAXLOCAL,
# 37 "interaction.h"
INTERACT_STAT_MAX};
# 40 "interaction.h"
struct interact_s;
# 39 "wall_ss_cut.c"
struct wall_ss_cut_s;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 22 "pe.h"
typedef struct pe_s pe_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 18 "physics.h"
typedef struct physics_s physics_t;
# 25 "wall.h"
typedef struct wall_s wall_t;
# 42 "colloid.h"
typedef struct colloid_state_type colloid_state_t;
# 44 "colloid.h"
struct colloid_state_type {
# 46 "colloid.h"
int index;
# 47 "colloid.h"
int rebuild;
# 48 "colloid.h"
int nbonds;
# 49 "colloid.h"
int nangles;
# 51 "colloid.h"
int isfixedr;
# 52 "colloid.h"
int isfixedv;
# 53 "colloid.h"
int isfixedw;
# 54 "colloid.h"
int isfixeds;
# 56 "colloid.h"
int type;
# 57 "colloid.h"
int bond[2];
# 59 "colloid.h"
int rng;
# 61 "colloid.h"
int isfixedrxyz[3];
# 62 "colloid.h"
int isfixedvxyz[3];
# 67 "colloid.h"
int intpad[14];
# 71 "colloid.h"
double a0;
# 72 "colloid.h"
double ah;
# 73 "colloid.h"
double r[3];
# 74 "colloid.h"
double v[3];
# 75 "colloid.h"
double w[3];
# 76 "colloid.h"
double s[3];
# 77 "colloid.h"
double m[3];
# 78 "colloid.h"
double b1;
# 79 "colloid.h"
double b2;
# 80 "colloid.h"
double c;
# 81 "colloid.h"
double h;
# 82 "colloid.h"
double dr[3];
# 83 "colloid.h"
double deltaphi;
# 92 "colloid.h"
double q0;
# 93 "colloid.h"
double q1;
# 94 "colloid.h"
double epsilon;
# 96 "colloid.h"
double deltaq0;
# 97 "colloid.h"
double deltaq1;
# 98 "colloid.h"
double sa;
# 99 "colloid.h"
double saf;
# 101 "colloid.h"
double dpad[16];};
# 22 "colloid_link.h"
typedef struct colloid_link_type colloid_link_t;
# 24 "colloids.h"
typedef struct colloid colloid_t;
# 26 "colloids.h"
struct colloid {
# 28 "colloids.h"
colloid_state_t s;
# 32 "colloids.h"
double random[6];
# 33 "colloids.h"
double force[3];
# 34 "colloids.h"
double torque[3];
# 35 "colloids.h"
double f0[3];
# 36 "colloids.h"
double t0[3];
# 37 "colloids.h"
double cbar[3];
# 38 "colloids.h"
double rxcbar[3];
# 39 "colloids.h"
double deltam;
# 40 "colloids.h"
double sumw;
# 41 "colloids.h"
double zeta[21];
# 42 "colloids.h"
double stats[3];
# 43 "colloids.h"
double fc0[3];
# 44 "colloids.h"
double tc0[3];
# 45 "colloids.h"
double sump;
# 46 "colloids.h"
double dq[2];
# 48 "colloids.h"
double fsub[3];
# 49 "colloids.h"
double fex[3];
# 50 "colloids.h"
double tex[3];
# 54 "colloids.h"
colloid_link_t *lnk;
# 55 "colloids.h"
colloid_t *next;
# 57 "colloids.h"
colloid_t *nextall;
# 58 "colloids.h"
colloid_t *nextlocal;
# 62 "colloids.h"
colloid_t *bonded[2];};
# 65 "colloids.h"
typedef struct colloids_info_s colloids_info_t;
# 30 "interaction.h"
typedef enum interact_enum interact_enum_t;
# 40 "interaction.h"
typedef struct interact_s interact_t;
# 43 "interaction.h"
typedef int (*compute_ft)(colloids_info_t *, void *);
# 44 "interaction.h"
typedef int (*stat_ft)(void *, double *);
# 22 "wall_ss_cut.h"
typedef struct wall_ss_cut_s wall_ss_cut_t;
# 39 "wall_ss_cut.c"
struct wall_ss_cut_s {
# 40 "wall_ss_cut.c"
pe_t *pe;
# 41 "wall_ss_cut.c"
cs_t *cs;
# 42 "wall_ss_cut.c"
wall_t *wall;
# 44 "wall_ss_cut.c"
double epsilon;
# 45 "wall_ss_cut.c"
double sigma;
# 46 "wall_ss_cut.c"
double nu;
# 47 "wall_ss_cut.c"
double hc;
# 48 "wall_ss_cut.c"
double vlocal;
# 49 "wall_ss_cut.c"
double hminlocal;
# 50 "wall_ss_cut.c"
double rminlocal;};
# 150 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) void free(void *);
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
#if !defined(__CUDABE__)
# 4784 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double pow(double, double);
#endif
# 56 "coords.h"
___device__(extern  __no_sc__) int _Z7cs_lminP8coords_sPd(cs_t *, double *);
# 57 "coords.h"
___device__(extern  __no_sc__) int _Z7cs_ltotP8coords_sPd(cs_t *, double *);
# 50 "util.h"
___device__(extern  __no_sc__) double _Z4dmaxdd(const double, const double);
# 40 "physics.h"
___device__(extern  __no_sc__) int _Z11physics_refPP9physics_s(physics_t **);
# 45 "physics.h"
___device__(extern  __no_sc__) int _Z10physics_ktP9physics_sPd(physics_t *, double *);
# 58 "wall.h"
___device__(extern  __no_sc__) int _Z16wall_present_dimP6wall_sPi(wall_t *, int *);
#include "common_functions.h"
#if !defined(__CUDABE__)
#endif
