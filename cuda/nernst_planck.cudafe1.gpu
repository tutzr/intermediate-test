typedef char __nv_bool;
# 58 ".././mpi_s/mpi.h"
enum elementary_datatypes {
# 58 ".././mpi_s/mpi.h"
MPI_CHAR,
# 59 ".././mpi_s/mpi.h"
MPI_SHORT,
# 60 ".././mpi_s/mpi.h"
MPI_INT,
# 61 ".././mpi_s/mpi.h"
MPI_LONG,
# 62 ".././mpi_s/mpi.h"
MPI_UNSIGNED_CHAR,
# 63 ".././mpi_s/mpi.h"
MPI_UNSIGNED_SHORT,
# 64 ".././mpi_s/mpi.h"
MPI_UNSIGNED,
# 65 ".././mpi_s/mpi.h"
MPI_UNSIGNED_LONG,
# 66 ".././mpi_s/mpi.h"
MPI_FLOAT,
# 67 ".././mpi_s/mpi.h"
MPI_DOUBLE,
# 68 ".././mpi_s/mpi.h"
MPI_LONG_DOUBLE,
# 69 ".././mpi_s/mpi.h"
MPI_BYTE,
# 70 ".././mpi_s/mpi.h"
MPI_PACKED};
# 72 ".././mpi_s/mpi.h"
enum collective_operations {
# 72 ".././mpi_s/mpi.h"
MPI_MAX,
# 73 ".././mpi_s/mpi.h"
MPI_MIN,
# 74 ".././mpi_s/mpi.h"
MPI_SUM,
# 75 ".././mpi_s/mpi.h"
MPI_PROD,
# 76 ".././mpi_s/mpi.h"
MPI_MAXLOC,
# 77 ".././mpi_s/mpi.h"
MPI_MINLOC,
# 78 ".././mpi_s/mpi.h"
MPI_BAND,
# 79 ".././mpi_s/mpi.h"
MPI_BOR,
# 80 ".././mpi_s/mpi.h"
MPI_BXOR,
# 81 ".././mpi_s/mpi.h"
MPI_LAND,
# 82 ".././mpi_s/mpi.h"
MPI_LOR,
# 83 ".././mpi_s/mpi.h"
MPI_LXOR};
# 22 "pe.h"
struct pe_s;
# 22 "coords.h"
struct coords_s;
# 26 "coords.h"
enum cartesian_directions {
# 26 "coords.h"
X,
# 26 "coords.h"
Y,
# 26 "coords.h"
Z};
# 73 "io_harness.h"
struct io_info_s;
# 24 "map.h"
enum map_status {
# 24 "map.h"
MAP_FLUID,
# 24 "map.h"
MAP_BOUNDARY,
# 24 "map.h"
MAP_COLLOID,
# 24 "map.h"
MAP_STATUS_MAX};
# 26 "map.h"
struct map_s;
# 39 "psi_s.h"
struct psi_s;
# 32 "hydro.h"
struct hydro_s;
# 48 "free_energy.h"
struct fe_vt_s;
# 66 "free_energy.h"
struct fe_s;
# 44 "colloid.h"
struct colloid_state_type;
# 24 "colloid_link.h"
struct colloid_link_type;
# 26 "colloids.h"
struct colloid;
# 65 "colloids.h"
struct colloids_info_s;
# 212 "/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h" 3
typedef unsigned long size_t;
#include "crt/device_runtime.h"
# 25 ".././mpi_s/mpi.h"
typedef int MPI_Handle;
# 26 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Comm;
# 28 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Datatype;
# 30 ".././mpi_s/mpi.h"
typedef MPI_Handle MPI_Op;
# 22 "pe.h"
typedef struct pe_s pe_t;
# 22 "coords.h"
typedef struct coords_s cs_t;
# 36 "io_harness.h"
typedef struct io_info_s io_info_t;
# 26 "map.h"
typedef struct map_s map_t;
# 37 "psi.h"
typedef struct psi_s psi_t;
# 39 "psi_s.h"
struct psi_s {
# 40 "psi_s.h"
pe_t *pe;
# 41 "psi_s.h"
cs_t *cs;
# 43 "psi_s.h"
int nk;
# 44 "psi_s.h"
int nsites;
# 45 "psi_s.h"
double *psi;
# 46 "psi_s.h"
double *rho;
# 47 "psi_s.h"
double *diffusivity;
# 48 "psi_s.h"
int *valency;
# 49 "psi_s.h"
double e;
# 50 "psi_s.h"
double epsilon;
# 51 "psi_s.h"
double epsilon2;
# 52 "psi_s.h"
double beta;
# 53 "psi_s.h"
double reltol;
# 54 "psi_s.h"
double abstol;
# 55 "psi_s.h"
int method;
# 56 "psi_s.h"
int maxits;
# 57 "psi_s.h"
int multisteps;
# 58 "psi_s.h"
int skipsteps;
# 59 "psi_s.h"
int nfreq_io;
# 60 "psi_s.h"
int nfreq;
# 61 "psi_s.h"
double diffacc;
# 62 "psi_s.h"
MPI_Datatype psihalo[3];
# 63 "psi_s.h"
MPI_Datatype rhohalo[3];
# 64 "psi_s.h"
io_info_t *info;};
# 26 "hydro.h"
typedef struct hydro_s hydro_t;
# 32 "free_energy.h"
typedef struct fe_s fe_t;
# 33 "free_energy.h"
typedef struct fe_vt_s fe_vt_t;
# 35 "free_energy.h"
typedef int (*fe_free_ft)(fe_t *);
# 37 "free_energy.h"
typedef int (*fe_target_ft)(fe_t *, fe_t **);
# 38 "free_energy.h"
typedef int (*fe_fed_ft)(fe_t *, int, double *);
# 39 "free_energy.h"
typedef int (*fe_mu_ft)(fe_t *, int, double *);
# 40 "free_energy.h"
typedef int (*fe_str_ft)(fe_t *, int, double (*)[3]);
# 41 "free_energy.h"
typedef int (*fe_mu_solv_ft)(fe_t *, int, int, double *);
# 42 "free_energy.h"
typedef int (*fe_hvector_ft)(fe_t *, int, double *);
# 43 "free_energy.h"
typedef int (*fe_htensor_ft)(fe_t *, int, double (*)[3]);
# 45 "free_energy.h"
typedef void (*fe_htensor_v_ft)(fe_t *, int, double (*)[3][1]);
# 46 "free_energy.h"
typedef void (*fe_stress_v_ft)(fe_t *, int, double (*)[3][1]);
# 48 "free_energy.h"
struct fe_vt_s {
# 50 "free_energy.h"
fe_free_ft free;
# 51 "free_energy.h"
fe_target_ft target;
# 52 "free_energy.h"
fe_fed_ft fed;
# 53 "free_energy.h"
fe_mu_ft mu;
# 54 "free_energy.h"
fe_mu_solv_ft mu_solv;
# 55 "free_energy.h"
fe_str_ft stress;
# 56 "free_energy.h"
fe_str_ft str_symm;
# 57 "free_energy.h"
fe_str_ft str_anti;
# 58 "free_energy.h"
fe_hvector_ft hvector;
# 59 "free_energy.h"
fe_htensor_ft htensor;
# 60 "free_energy.h"
fe_htensor_v_ft htensor_v;
# 61 "free_energy.h"
fe_stress_v_ft stress_v;
# 62 "free_energy.h"
fe_stress_v_ft str_symm_v;
# 63 "free_energy.h"
fe_stress_v_ft str_anti_v;};
# 66 "free_energy.h"
struct fe_s {
# 67 "free_energy.h"
fe_vt_t *func;
# 68 "free_energy.h"
int id;
# 69 "free_energy.h"
int use_stress_relaxation;};
# 42 "colloid.h"
typedef struct colloid_state_type colloid_state_t;
# 44 "colloid.h"
struct colloid_state_type {
# 46 "colloid.h"
int index;
# 47 "colloid.h"
int rebuild;
# 48 "colloid.h"
int nbonds;
# 49 "colloid.h"
int nangles;
# 51 "colloid.h"
int isfixedr;
# 52 "colloid.h"
int isfixedv;
# 53 "colloid.h"
int isfixedw;
# 54 "colloid.h"
int isfixeds;
# 56 "colloid.h"
int type;
# 57 "colloid.h"
int bond[2];
# 59 "colloid.h"
int rng;
# 61 "colloid.h"
int isfixedrxyz[3];
# 62 "colloid.h"
int isfixedvxyz[3];
# 67 "colloid.h"
int intpad[14];
# 71 "colloid.h"
double a0;
# 72 "colloid.h"
double ah;
# 73 "colloid.h"
double r[3];
# 74 "colloid.h"
double v[3];
# 75 "colloid.h"
double w[3];
# 76 "colloid.h"
double s[3];
# 77 "colloid.h"
double m[3];
# 78 "colloid.h"
double b1;
# 79 "colloid.h"
double b2;
# 80 "colloid.h"
double c;
# 81 "colloid.h"
double h;
# 82 "colloid.h"
double dr[3];
# 83 "colloid.h"
double deltaphi;
# 92 "colloid.h"
double q0;
# 93 "colloid.h"
double q1;
# 94 "colloid.h"
double epsilon;
# 96 "colloid.h"
double deltaq0;
# 97 "colloid.h"
double deltaq1;
# 98 "colloid.h"
double sa;
# 99 "colloid.h"
double saf;
# 101 "colloid.h"
double dpad[16];};
# 22 "colloid_link.h"
typedef struct colloid_link_type colloid_link_t;
# 24 "colloids.h"
typedef struct colloid colloid_t;
# 26 "colloids.h"
struct colloid {
# 28 "colloids.h"
colloid_state_t s;
# 32 "colloids.h"
double random[6];
# 33 "colloids.h"
double force[3];
# 34 "colloids.h"
double torque[3];
# 35 "colloids.h"
double f0[3];
# 36 "colloids.h"
double t0[3];
# 37 "colloids.h"
double cbar[3];
# 38 "colloids.h"
double rxcbar[3];
# 39 "colloids.h"
double deltam;
# 40 "colloids.h"
double sumw;
# 41 "colloids.h"
double zeta[21];
# 42 "colloids.h"
double stats[3];
# 43 "colloids.h"
double fc0[3];
# 44 "colloids.h"
double tc0[3];
# 45 "colloids.h"
double sump;
# 46 "colloids.h"
double dq[2];
# 48 "colloids.h"
double fsub[3];
# 49 "colloids.h"
double fex[3];
# 50 "colloids.h"
double tex[3];
# 54 "colloids.h"
colloid_link_t *lnk;
# 55 "colloids.h"
colloid_t *next;
# 57 "colloids.h"
colloid_t *nextall;
# 58 "colloids.h"
colloid_t *nextlocal;
# 62 "colloids.h"
colloid_t *bonded[2];};
# 65 "colloids.h"
typedef struct colloids_info_s colloids_info_t;
# 150 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) void free(void *);
# 189 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__noreturn__)) void __assert_fail(const char *, const char *, unsigned, const char *);
#if !defined(__CUDABE__)
# 244 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) __attribute__((__const__)) double fabs(double);
#endif
#if !defined(__CUDABE__)
# 1486 "/usr/local/cuda-10.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
 __device_builtin__ ___device__(extern  __no_sc__) __attribute__((__nothrow__)) double exp(double);
#endif
# 59 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_nlocalP8coords_sPi(cs_t *, int *);
# 62 "coords.h"
___device__(extern  __no_sc__) int _Z8cs_indexP8coords_siii(cs_t *, int, int, int);
# 64 "coords.h"
___device__(extern  __no_sc__) int _Z9cs_nsitesP8coords_sPi(cs_t *, int *);
# 68 "coords.h"
___device__(extern  __no_sc__) int _Z10cs_stridesP8coords_sPiS1_S1_(cs_t *, int *, int *, int *);
# 40 "map.h"
___device__(extern  __no_sc__) int _Z10map_statusP5map_siPi(map_t *, int, int *);
# 200 "memory.h"
___device__(extern  __no_sc__) int _Z25reverse_addr_rank0_assertiPKcii(int, const char *, int, int);
# 203 "memory.h"
___device__(extern  __no_sc__) int _Z25reverse_addr_rank1_assertiPKciiii(int, const char *, int, int, int, int);
# 69 "hydro.h"
___device__(extern  __no_sc__) int _Z17hydro_f_local_addP7hydro_siPKd(hydro_t *, int, const double *);
#include "common_functions.h"
#if !defined(__CUDABE__)
#endif
#if !defined(__CUDABE__)
#endif
