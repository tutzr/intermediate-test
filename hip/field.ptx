//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	_Z8field_nfP7field_sPi
.extern .func  (.param .b32 func_retval0) _Z25reverse_addr_rank1_assertiPKciiii
(
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_0,
	.param .b64 _Z25reverse_addr_rank1_assertiPKciiii_param_1,
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_2,
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_3,
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_4,
	.param .b32 _Z25reverse_addr_rank1_assertiPKciiii_param_5
)
;
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 1 .b8 __unnamed_1[31] = {105, 110, 116, 32, 102, 105, 101, 108, 100, 95, 110, 102, 40, 102, 105, 101, 108, 100, 95, 115, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_2[43] = {105, 110, 116, 32, 102, 105, 101, 108, 100, 95, 115, 99, 97, 108, 97, 114, 40, 102, 105, 101, 108, 100, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_3[45] = {105, 110, 116, 32, 102, 105, 101, 108, 100, 95, 115, 99, 97, 108, 97, 114, 95, 115, 101, 116, 40, 102, 105, 101, 108, 100, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 100, 111, 117, 98, 108, 101, 41, 0};
.global .align 1 .b8 __unnamed_4[43] = {105, 110, 116, 32, 102, 105, 101, 108, 100, 95, 118, 101, 99, 116, 111, 114, 40, 102, 105, 101, 108, 100, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_5[53] = {105, 110, 116, 32, 102, 105, 101, 108, 100, 95, 118, 101, 99, 116, 111, 114, 95, 115, 101, 116, 40, 102, 105, 101, 108, 100, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 99, 111, 110, 115, 116, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_6[48] = {105, 110, 116, 32, 102, 105, 101, 108, 100, 95, 116, 101, 110, 115, 111, 114, 40, 102, 105, 101, 108, 100, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 100, 111, 117, 98, 108, 101, 32, 40, 42, 41, 91, 51, 93, 41, 0};
.global .align 1 .b8 __unnamed_7[52] = {105, 110, 116, 32, 102, 105, 101, 108, 100, 95, 116, 101, 110, 115, 111, 114, 95, 115, 101, 116, 40, 102, 105, 101, 108, 100, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 100, 111, 117, 98, 108, 101, 32, 40, 42, 41, 91, 51, 93, 41, 0};
.global .align 1 .b8 __unnamed_8[49] = {105, 110, 116, 32, 102, 105, 101, 108, 100, 95, 115, 99, 97, 108, 97, 114, 95, 97, 114, 114, 97, 121, 40, 102, 105, 101, 108, 100, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 __unnamed_9[59] = {105, 110, 116, 32, 102, 105, 101, 108, 100, 95, 115, 99, 97, 108, 97, 114, 95, 97, 114, 114, 97, 121, 95, 115, 101, 116, 40, 102, 105, 101, 108, 100, 95, 115, 32, 42, 44, 32, 105, 110, 116, 44, 32, 99, 111, 110, 115, 116, 32, 100, 111, 117, 98, 108, 101, 32, 42, 41, 0};
.global .align 1 .b8 $str[4] = {111, 98, 106, 0};
.global .align 1 .b8 $str1[8] = {102, 105, 101, 108, 100, 46, 99, 0};
.global .align 1 .b8 $str2[3] = {110, 102, 0};
.global .align 1 .b8 $str3[13] = {111, 98, 106, 45, 62, 110, 102, 32, 61, 61, 32, 49, 0};
.global .align 1 .b8 $str4[10] = {111, 98, 106, 45, 62, 100, 97, 116, 97, 0};
.global .align 1 .b8 $str5[4] = {112, 104, 105, 0};
.global .align 1 .b8 $str6[13] = {111, 98, 106, 45, 62, 110, 102, 32, 61, 61, 32, 51, 0};
.global .align 1 .b8 $str7[2] = {112, 0};
.global .align 1 .b8 $str8[13] = {111, 98, 106, 45, 62, 110, 102, 32, 61, 61, 32, 53, 0};
.global .align 1 .b8 $str9[2] = {113, 0};
.global .align 1 .b8 $str10[6] = {97, 114, 114, 97, 121, 0};

.visible .func  (.param .b32 func_retval0) _Z8field_nfP7field_sPi(
	.param .b64 _Z8field_nfP7field_sPi_param_0,
	.param .b64 _Z8field_nfP7field_sPi_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd1, [_Z8field_nfP7field_sPi_param_0];
	ld.param.u64 	%rd2, [_Z8field_nfP7field_sPi_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB0_2;

	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, $str1;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, __unnamed_1;
	cvta.global.u64 	%rd8, %rd7;
	mov.u32 	%r1, 248;
	mov.u64 	%rd9, 1;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 param2;
	st.param.b32	[param2+0], %r1;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd8;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd9;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB0_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB0_4;

	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	mov.u64 	%rd12, $str1;
	cvta.global.u64 	%rd13, %rd12;
	mov.u64 	%rd14, __unnamed_1;
	cvta.global.u64 	%rd15, %rd14;
	mov.u32 	%r2, 249;
	mov.u64 	%rd16, 1;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd15;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd16;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB0_4:
	ld.u32 	%r3, [%rd1];
	st.u32 	[%rd2], %r3;
	mov.u32 	%r4, 0;
	st.param.b32	[func_retval0+0], %r4;
	ret;
}

	// .globl	_Z12field_scalarP7field_siPd
.visible .func  (.param .b32 func_retval0) _Z12field_scalarP7field_siPd(
	.param .b64 _Z12field_scalarP7field_siPd_param_0,
	.param .b32 _Z12field_scalarP7field_siPd_param_1,
	.param .b64 _Z12field_scalarP7field_siPd_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<12>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<38>;


	ld.param.u64 	%rd2, [_Z12field_scalarP7field_siPd_param_0];
	ld.param.u32 	%r1, [_Z12field_scalarP7field_siPd_param_1];
	ld.param.u64 	%rd3, [_Z12field_scalarP7field_siPd_param_2];
	setp.ne.s64	%p1, %rd2, 0;
	@%p1 bra 	BB1_2;

	mov.u64 	%rd4, $str;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, __unnamed_2;
	cvta.global.u64 	%rd9, %rd8;
	mov.u32 	%r2, 659;
	mov.u64 	%rd10, 1;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd9;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd10;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB1_2:
	ld.u32 	%r3, [%rd2];
	setp.eq.s32	%p2, %r3, 1;
	@%p2 bra 	BB1_4;

	mov.u64 	%rd11, $str3;
	cvta.global.u64 	%rd12, %rd11;
	mov.u64 	%rd13, $str1;
	cvta.global.u64 	%rd14, %rd13;
	mov.u64 	%rd15, __unnamed_2;
	cvta.global.u64 	%rd16, %rd15;
	mov.u32 	%r4, 660;
	mov.u64 	%rd17, 1;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd14;
	.param .b32 param2;
	st.param.b32	[param2+0], %r4;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd16;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd17;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB1_4:
	ld.u64 	%rd18, [%rd2+16];
	setp.ne.s64	%p3, %rd18, 0;
	@%p3 bra 	BB1_6;

	mov.u64 	%rd19, $str4;
	cvta.global.u64 	%rd20, %rd19;
	mov.u64 	%rd21, $str1;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, __unnamed_2;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r5, 661;
	mov.u64 	%rd25, 1;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd20;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd22;
	.param .b32 param2;
	st.param.b32	[param2+0], %r5;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd24;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd25;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 4

BB1_6:
	setp.ne.s64	%p4, %rd3, 0;
	@%p4 bra 	BB1_8;

	mov.u64 	%rd26, $str5;
	cvta.global.u64 	%rd27, %rd26;
	mov.u64 	%rd28, $str1;
	cvta.global.u64 	%rd29, %rd28;
	mov.u64 	%rd30, __unnamed_2;
	cvta.global.u64 	%rd31, %rd30;
	mov.u32 	%r6, 662;
	mov.u64 	%rd32, 1;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd27;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r6;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 5

BB1_8:
	ld.u64 	%rd33, [%rd2+16];
	ld.u32 	%r7, [%rd2+8];
	mov.u64 	%rd34, $str1;
	cvta.global.u64 	%rd35, %rd34;
	mov.u32 	%r8, 664;
	mov.u32 	%r9, 1;
	mov.u32 	%r10, 0;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r7;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r10;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 6
	mul.wide.s32 	%rd36, %r11, 8;
	add.s64 	%rd37, %rd33, %rd36;
	ld.f64 	%fd1, [%rd37];
	st.f64 	[%rd3], %fd1;
	st.param.b32	[func_retval0+0], %r10;
	ret;
}

	// .globl	_Z16field_scalar_setP7field_sid
.visible .func  (.param .b32 func_retval0) _Z16field_scalar_setP7field_sid(
	.param .b64 _Z16field_scalar_setP7field_sid_param_0,
	.param .b32 _Z16field_scalar_setP7field_sid_param_1,
	.param .b64 _Z16field_scalar_setP7field_sid_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<32>;


	ld.param.u64 	%rd5, [_Z16field_scalar_setP7field_sid_param_0];
	ld.param.u32 	%r1, [_Z16field_scalar_setP7field_sid_param_1];
	ld.param.f64 	%fd1, [_Z16field_scalar_setP7field_sid_param_2];
	setp.ne.s64	%p1, %rd5, 0;
	@%p1 bra 	BB2_2;

	mov.u64 	%rd6, $str;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, $str1;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, __unnamed_3;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r2, 678;
	mov.u64 	%rd12, 1;
	// Callseq Start 7
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd11;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd12;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 7

BB2_2:
	ld.u32 	%r3, [%rd5];
	setp.eq.s32	%p2, %r3, 1;
	@%p2 bra 	BB2_4;

	mov.u64 	%rd13, $str3;
	cvta.global.u64 	%rd14, %rd13;
	mov.u64 	%rd15, $str1;
	cvta.global.u64 	%rd16, %rd15;
	mov.u64 	%rd17, __unnamed_3;
	cvta.global.u64 	%rd18, %rd17;
	mov.u32 	%r4, 679;
	mov.u64 	%rd19, 1;
	// Callseq Start 8
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd14;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd16;
	.param .b32 param2;
	st.param.b32	[param2+0], %r4;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd18;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd19;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 8

BB2_4:
	ld.u64 	%rd31, [%rd5+16];
	setp.ne.s64	%p3, %rd31, 0;
	@%p3 bra 	BB2_6;

	mov.u64 	%rd20, $str4;
	cvta.global.u64 	%rd21, %rd20;
	mov.u64 	%rd22, $str1;
	cvta.global.u64 	%rd23, %rd22;
	mov.u64 	%rd24, __unnamed_3;
	cvta.global.u64 	%rd25, %rd24;
	mov.u32 	%r5, 680;
	mov.u64 	%rd26, 1;
	// Callseq Start 9
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd21;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd23;
	.param .b32 param2;
	st.param.b32	[param2+0], %r5;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd25;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd26;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 9
	ld.u64 	%rd31, [%rd5+16];

BB2_6:
	ld.u32 	%r6, [%rd5+8];
	mov.u64 	%rd27, $str1;
	cvta.global.u64 	%rd28, %rd27;
	mov.u32 	%r7, 682;
	mov.u32 	%r8, 1;
	mov.u32 	%r9, 0;
	// Callseq Start 10
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd28;
	.param .b32 param2;
	st.param.b32	[param2+0], %r6;
	.param .b32 param3;
	st.param.b32	[param3+0], %r8;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r9;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r10, [retval0+0];
	
	//{
	}// Callseq End 10
	mul.wide.s32 	%rd29, %r10, 8;
	add.s64 	%rd30, %rd31, %rd29;
	st.f64 	[%rd30], %fd1;
	st.param.b32	[func_retval0+0], %r9;
	ret;
}

	// .globl	_Z12field_vectorP7field_siPd
.visible .func  (.param .b32 func_retval0) _Z12field_vectorP7field_siPd(
	.param .b64 _Z12field_vectorP7field_siPd_param_0,
	.param .b32 _Z12field_vectorP7field_siPd_param_1,
	.param .b64 _Z12field_vectorP7field_siPd_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<17>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<39>;


	ld.param.u64 	%rd5, [_Z12field_vectorP7field_siPd_param_0];
	ld.param.u32 	%r1, [_Z12field_vectorP7field_siPd_param_1];
	ld.param.u64 	%rd6, [_Z12field_vectorP7field_siPd_param_2];
	setp.ne.s64	%p1, %rd5, 0;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd7, $str;
	cvta.global.u64 	%rd8, %rd7;
	mov.u64 	%rd9, $str1;
	cvta.global.u64 	%rd10, %rd9;
	mov.u64 	%rd11, __unnamed_4;
	cvta.global.u64 	%rd12, %rd11;
	mov.u32 	%r2, 698;
	mov.u64 	%rd13, 1;
	// Callseq Start 11
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd10;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd12;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd13;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 11

BB3_2:
	ld.u32 	%r3, [%rd5];
	setp.eq.s32	%p2, %r3, 3;
	@%p2 bra 	BB3_4;

	mov.u64 	%rd14, $str6;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str1;
	cvta.global.u64 	%rd17, %rd16;
	mov.u64 	%rd18, __unnamed_4;
	cvta.global.u64 	%rd19, %rd18;
	mov.u32 	%r4, 699;
	mov.u64 	%rd20, 1;
	// Callseq Start 12
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r4;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 12

BB3_4:
	ld.u64 	%rd38, [%rd5+16];
	setp.ne.s64	%p3, %rd38, 0;
	@%p3 bra 	BB3_6;

	mov.u64 	%rd21, $str4;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str1;
	cvta.global.u64 	%rd24, %rd23;
	mov.u64 	%rd25, __unnamed_4;
	cvta.global.u64 	%rd26, %rd25;
	mov.u32 	%r5, 700;
	mov.u64 	%rd27, 1;
	// Callseq Start 13
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r5;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd26;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd27;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 13
	ld.u64 	%rd38, [%rd5+16];

BB3_6:
	ld.u32 	%r6, [%rd5+8];
	mov.u64 	%rd28, $str1;
	cvta.global.u64 	%rd29, %rd28;
	mov.u32 	%r7, 703;
	mov.u32 	%r8, 3;
	mov.u32 	%r9, 0;
	// Callseq Start 14
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r6;
	.param .b32 param3;
	st.param.b32	[param3+0], %r8;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r9;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r10, [retval0+0];
	
	//{
	}// Callseq End 14
	mul.wide.s32 	%rd30, %r10, 8;
	add.s64 	%rd31, %rd38, %rd30;
	ld.f64 	%fd1, [%rd31];
	st.f64 	[%rd6], %fd1;
	ld.u64 	%rd32, [%rd5+16];
	ld.u32 	%r11, [%rd5+8];
	mov.u32 	%r12, 1;
	// Callseq Start 15
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r11;
	.param .b32 param3;
	st.param.b32	[param3+0], %r8;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r12;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r13, [retval0+0];
	
	//{
	}// Callseq End 15
	mul.wide.s32 	%rd33, %r13, 8;
	add.s64 	%rd34, %rd32, %rd33;
	ld.f64 	%fd2, [%rd34];
	st.f64 	[%rd6+8], %fd2;
	ld.u64 	%rd35, [%rd5+16];
	ld.u32 	%r14, [%rd5+8];
	mov.u32 	%r15, 2;
	// Callseq Start 16
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r14;
	.param .b32 param3;
	st.param.b32	[param3+0], %r8;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r15;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r16, [retval0+0];
	
	//{
	}// Callseq End 16
	mul.wide.s32 	%rd36, %r16, 8;
	add.s64 	%rd37, %rd35, %rd36;
	ld.f64 	%fd3, [%rd37];
	st.f64 	[%rd6+16], %fd3;
	st.param.b32	[func_retval0+0], %r9;
	ret;
}

	// .globl	_Z16field_vector_setP7field_siPKd
.visible .func  (.param .b32 func_retval0) _Z16field_vector_setP7field_siPKd(
	.param .b64 _Z16field_vector_setP7field_siPKd_param_0,
	.param .b32 _Z16field_vector_setP7field_siPKd_param_1,
	.param .b64 _Z16field_vector_setP7field_siPKd_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<18>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<44>;


	ld.param.u64 	%rd2, [_Z16field_vector_setP7field_siPKd_param_0];
	ld.param.u32 	%r1, [_Z16field_vector_setP7field_siPKd_param_1];
	ld.param.u64 	%rd3, [_Z16field_vector_setP7field_siPKd_param_2];
	setp.ne.s64	%p1, %rd2, 0;
	@%p1 bra 	BB4_2;

	mov.u64 	%rd4, $str;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, __unnamed_5;
	cvta.global.u64 	%rd9, %rd8;
	mov.u32 	%r2, 720;
	mov.u64 	%rd10, 1;
	// Callseq Start 17
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd9;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd10;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 17

BB4_2:
	ld.u32 	%r3, [%rd2];
	setp.eq.s32	%p2, %r3, 3;
	@%p2 bra 	BB4_4;

	mov.u64 	%rd11, $str6;
	cvta.global.u64 	%rd12, %rd11;
	mov.u64 	%rd13, $str1;
	cvta.global.u64 	%rd14, %rd13;
	mov.u64 	%rd15, __unnamed_5;
	cvta.global.u64 	%rd16, %rd15;
	mov.u32 	%r4, 721;
	mov.u64 	%rd17, 1;
	// Callseq Start 18
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd14;
	.param .b32 param2;
	st.param.b32	[param2+0], %r4;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd16;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd17;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 18

BB4_4:
	ld.u64 	%rd18, [%rd2+16];
	setp.ne.s64	%p3, %rd18, 0;
	@%p3 bra 	BB4_6;

	mov.u64 	%rd19, $str4;
	cvta.global.u64 	%rd20, %rd19;
	mov.u64 	%rd21, $str1;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, __unnamed_5;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r5, 722;
	mov.u64 	%rd25, 1;
	// Callseq Start 19
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd20;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd22;
	.param .b32 param2;
	st.param.b32	[param2+0], %r5;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd24;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd25;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 19

BB4_6:
	setp.ne.s64	%p4, %rd3, 0;
	@%p4 bra 	BB4_8;

	mov.u64 	%rd26, $str7;
	cvta.global.u64 	%rd27, %rd26;
	mov.u64 	%rd28, $str1;
	cvta.global.u64 	%rd29, %rd28;
	mov.u64 	%rd30, __unnamed_5;
	cvta.global.u64 	%rd31, %rd30;
	mov.u32 	%r6, 723;
	mov.u64 	%rd32, 1;
	// Callseq Start 20
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd27;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r6;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 20

BB4_8:
	ld.f64 	%fd1, [%rd3];
	ld.u64 	%rd33, [%rd2+16];
	ld.u32 	%r7, [%rd2+8];
	mov.u64 	%rd34, $str1;
	cvta.global.u64 	%rd35, %rd34;
	mov.u32 	%r8, 726;
	mov.u32 	%r9, 3;
	mov.u32 	%r10, 0;
	// Callseq Start 21
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r7;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r10;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 21
	mul.wide.s32 	%rd36, %r11, 8;
	add.s64 	%rd37, %rd33, %rd36;
	st.f64 	[%rd37], %fd1;
	ld.f64 	%fd2, [%rd3+8];
	ld.u64 	%rd38, [%rd2+16];
	ld.u32 	%r12, [%rd2+8];
	mov.u32 	%r13, 1;
	// Callseq Start 22
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r12;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r13;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r14, [retval0+0];
	
	//{
	}// Callseq End 22
	mul.wide.s32 	%rd39, %r14, 8;
	add.s64 	%rd40, %rd38, %rd39;
	st.f64 	[%rd40], %fd2;
	ld.f64 	%fd3, [%rd3+16];
	ld.u64 	%rd41, [%rd2+16];
	ld.u32 	%r15, [%rd2+8];
	mov.u32 	%r16, 2;
	// Callseq Start 23
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r15;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r16;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r17, [retval0+0];
	
	//{
	}// Callseq End 23
	mul.wide.s32 	%rd42, %r17, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.f64 	[%rd43], %fd3;
	st.param.b32	[func_retval0+0], %r10;
	ret;
}

	// .globl	_Z12field_tensorP7field_siPA3_d
.visible .func  (.param .b32 func_retval0) _Z12field_tensorP7field_siPA3_d(
	.param .b64 _Z12field_tensorP7field_siPA3_d_param_0,
	.param .b32 _Z12field_tensorP7field_siPA3_d_param_1,
	.param .b64 _Z12field_tensorP7field_siPA3_d_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<28>;
	.reg .f64 	%fd<13>;
	.reg .b64 	%rd<50>;


	ld.param.u64 	%rd2, [_Z12field_tensorP7field_siPA3_d_param_0];
	ld.param.u32 	%r1, [_Z12field_tensorP7field_siPA3_d_param_1];
	ld.param.u64 	%rd3, [_Z12field_tensorP7field_siPA3_d_param_2];
	setp.ne.s64	%p1, %rd2, 0;
	@%p1 bra 	BB5_2;

	mov.u64 	%rd4, $str;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, __unnamed_6;
	cvta.global.u64 	%rd9, %rd8;
	mov.u32 	%r2, 743;
	mov.u64 	%rd10, 1;
	// Callseq Start 24
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd9;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd10;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 24

BB5_2:
	ld.u32 	%r3, [%rd2];
	setp.eq.s32	%p2, %r3, 5;
	@%p2 bra 	BB5_4;

	mov.u64 	%rd11, $str8;
	cvta.global.u64 	%rd12, %rd11;
	mov.u64 	%rd13, $str1;
	cvta.global.u64 	%rd14, %rd13;
	mov.u64 	%rd15, __unnamed_6;
	cvta.global.u64 	%rd16, %rd15;
	mov.u32 	%r4, 744;
	mov.u64 	%rd17, 1;
	// Callseq Start 25
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd14;
	.param .b32 param2;
	st.param.b32	[param2+0], %r4;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd16;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd17;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 25

BB5_4:
	ld.u64 	%rd18, [%rd2+16];
	setp.ne.s64	%p3, %rd18, 0;
	@%p3 bra 	BB5_6;

	mov.u64 	%rd19, $str4;
	cvta.global.u64 	%rd20, %rd19;
	mov.u64 	%rd21, $str1;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, __unnamed_6;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r5, 745;
	mov.u64 	%rd25, 1;
	// Callseq Start 26
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd20;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd22;
	.param .b32 param2;
	st.param.b32	[param2+0], %r5;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd24;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd25;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 26

BB5_6:
	setp.ne.s64	%p4, %rd3, 0;
	@%p4 bra 	BB5_8;

	mov.u64 	%rd26, $str9;
	cvta.global.u64 	%rd27, %rd26;
	mov.u64 	%rd28, $str1;
	cvta.global.u64 	%rd29, %rd28;
	mov.u64 	%rd30, __unnamed_6;
	cvta.global.u64 	%rd31, %rd30;
	mov.u32 	%r6, 746;
	mov.u64 	%rd32, 1;
	// Callseq Start 27
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd27;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r6;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 27

BB5_8:
	ld.u64 	%rd33, [%rd2+16];
	ld.u32 	%r7, [%rd2+8];
	mov.u64 	%rd34, $str1;
	cvta.global.u64 	%rd35, %rd34;
	mov.u32 	%r8, 748;
	mov.u32 	%r9, 5;
	mov.u32 	%r10, 0;
	// Callseq Start 28
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r7;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r10;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 28
	mul.wide.s32 	%rd36, %r11, 8;
	add.s64 	%rd37, %rd33, %rd36;
	ld.f64 	%fd1, [%rd37];
	st.f64 	[%rd3], %fd1;
	ld.u64 	%rd38, [%rd2+16];
	ld.u32 	%r12, [%rd2+8];
	mov.u32 	%r13, 749;
	mov.u32 	%r14, 1;
	// Callseq Start 29
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r13;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r12;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r14;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r15, [retval0+0];
	
	//{
	}// Callseq End 29
	mul.wide.s32 	%rd39, %r15, 8;
	add.s64 	%rd40, %rd38, %rd39;
	ld.f64 	%fd2, [%rd40];
	st.f64 	[%rd3+8], %fd2;
	ld.u64 	%rd41, [%rd2+16];
	ld.u32 	%r16, [%rd2+8];
	mov.u32 	%r17, 750;
	mov.u32 	%r18, 2;
	// Callseq Start 30
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r17;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r16;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r18;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r19, [retval0+0];
	
	//{
	}// Callseq End 30
	mul.wide.s32 	%rd42, %r19, 8;
	add.s64 	%rd43, %rd41, %rd42;
	ld.f64 	%fd3, [%rd43];
	st.f64 	[%rd3+16], %fd3;
	ld.f64 	%fd4, [%rd3+8];
	st.f64 	[%rd3+24], %fd4;
	ld.u64 	%rd44, [%rd2+16];
	ld.u32 	%r20, [%rd2+8];
	mov.u32 	%r21, 752;
	mov.u32 	%r22, 3;
	// Callseq Start 31
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r21;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r20;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r22;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r23, [retval0+0];
	
	//{
	}// Callseq End 31
	mul.wide.s32 	%rd45, %r23, 8;
	add.s64 	%rd46, %rd44, %rd45;
	ld.f64 	%fd5, [%rd46];
	st.f64 	[%rd3+32], %fd5;
	ld.u64 	%rd47, [%rd2+16];
	ld.u32 	%r24, [%rd2+8];
	mov.u32 	%r25, 753;
	mov.u32 	%r26, 4;
	// Callseq Start 32
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r25;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r24;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r26;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r27, [retval0+0];
	
	//{
	}// Callseq End 32
	mul.wide.s32 	%rd48, %r27, 8;
	add.s64 	%rd49, %rd47, %rd48;
	ld.f64 	%fd6, [%rd49];
	st.f64 	[%rd3+40], %fd6;
	st.f64 	[%rd3+56], %fd6;
	ld.f64 	%fd7, [%rd3+16];
	ld.f64 	%fd8, [%rd3];
	ld.f64 	%fd9, [%rd3+32];
	st.f64 	[%rd3+48], %fd7;
	mov.f64 	%fd10, 0d0000000000000000;
	sub.f64 	%fd11, %fd10, %fd8;
	sub.f64 	%fd12, %fd11, %fd9;
	st.f64 	[%rd3+64], %fd12;
	st.param.b32	[func_retval0+0], %r10;
	ret;
}

	// .globl	_Z16field_tensor_setP7field_siPA3_d
.visible .func  (.param .b32 func_retval0) _Z16field_tensor_setP7field_siPA3_d(
	.param .b64 _Z16field_tensor_setP7field_siPA3_d_param_0,
	.param .b32 _Z16field_tensor_setP7field_siPA3_d_param_1,
	.param .b64 _Z16field_tensor_setP7field_siPA3_d_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<28>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<50>;


	ld.param.u64 	%rd2, [_Z16field_tensor_setP7field_siPA3_d_param_0];
	ld.param.u32 	%r1, [_Z16field_tensor_setP7field_siPA3_d_param_1];
	ld.param.u64 	%rd3, [_Z16field_tensor_setP7field_siPA3_d_param_2];
	setp.ne.s64	%p1, %rd2, 0;
	@%p1 bra 	BB6_2;

	mov.u64 	%rd4, $str;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, $str1;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, __unnamed_7;
	cvta.global.u64 	%rd9, %rd8;
	mov.u32 	%r2, 773;
	mov.u64 	%rd10, 1;
	// Callseq Start 33
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 param2;
	st.param.b32	[param2+0], %r2;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd9;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd10;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 33

BB6_2:
	ld.u32 	%r3, [%rd2];
	setp.eq.s32	%p2, %r3, 5;
	@%p2 bra 	BB6_4;

	mov.u64 	%rd11, $str8;
	cvta.global.u64 	%rd12, %rd11;
	mov.u64 	%rd13, $str1;
	cvta.global.u64 	%rd14, %rd13;
	mov.u64 	%rd15, __unnamed_7;
	cvta.global.u64 	%rd16, %rd15;
	mov.u32 	%r4, 774;
	mov.u64 	%rd17, 1;
	// Callseq Start 34
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd14;
	.param .b32 param2;
	st.param.b32	[param2+0], %r4;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd16;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd17;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 34

BB6_4:
	ld.u64 	%rd18, [%rd2+16];
	setp.ne.s64	%p3, %rd18, 0;
	@%p3 bra 	BB6_6;

	mov.u64 	%rd19, $str4;
	cvta.global.u64 	%rd20, %rd19;
	mov.u64 	%rd21, $str1;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, __unnamed_7;
	cvta.global.u64 	%rd24, %rd23;
	mov.u32 	%r5, 775;
	mov.u64 	%rd25, 1;
	// Callseq Start 35
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd20;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd22;
	.param .b32 param2;
	st.param.b32	[param2+0], %r5;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd24;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd25;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 35

BB6_6:
	setp.ne.s64	%p4, %rd3, 0;
	@%p4 bra 	BB6_8;

	mov.u64 	%rd26, $str9;
	cvta.global.u64 	%rd27, %rd26;
	mov.u64 	%rd28, $str1;
	cvta.global.u64 	%rd29, %rd28;
	mov.u64 	%rd30, __unnamed_7;
	cvta.global.u64 	%rd31, %rd30;
	mov.u32 	%r6, 776;
	mov.u64 	%rd32, 1;
	// Callseq Start 36
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd27;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r6;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 36

BB6_8:
	ld.f64 	%fd1, [%rd3];
	ld.u64 	%rd33, [%rd2+16];
	ld.u32 	%r7, [%rd2+8];
	mov.u64 	%rd34, $str1;
	cvta.global.u64 	%rd35, %rd34;
	mov.u32 	%r8, 778;
	mov.u32 	%r9, 5;
	mov.u32 	%r10, 0;
	// Callseq Start 37
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r7;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r10;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r11, [retval0+0];
	
	//{
	}// Callseq End 37
	mul.wide.s32 	%rd36, %r11, 8;
	add.s64 	%rd37, %rd33, %rd36;
	st.f64 	[%rd37], %fd1;
	ld.f64 	%fd2, [%rd3+8];
	ld.u64 	%rd38, [%rd2+16];
	ld.u32 	%r12, [%rd2+8];
	mov.u32 	%r13, 779;
	mov.u32 	%r14, 1;
	// Callseq Start 38
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r13;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r12;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r14;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r15, [retval0+0];
	
	//{
	}// Callseq End 38
	mul.wide.s32 	%rd39, %r15, 8;
	add.s64 	%rd40, %rd38, %rd39;
	st.f64 	[%rd40], %fd2;
	ld.f64 	%fd3, [%rd3+16];
	ld.u64 	%rd41, [%rd2+16];
	ld.u32 	%r16, [%rd2+8];
	mov.u32 	%r17, 780;
	mov.u32 	%r18, 2;
	// Callseq Start 39
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r17;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r16;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r18;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r19, [retval0+0];
	
	//{
	}// Callseq End 39
	mul.wide.s32 	%rd42, %r19, 8;
	add.s64 	%rd43, %rd41, %rd42;
	st.f64 	[%rd43], %fd3;
	ld.f64 	%fd4, [%rd3+32];
	ld.u64 	%rd44, [%rd2+16];
	ld.u32 	%r20, [%rd2+8];
	mov.u32 	%r21, 781;
	mov.u32 	%r22, 3;
	// Callseq Start 40
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r21;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r20;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r22;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r23, [retval0+0];
	
	//{
	}// Callseq End 40
	mul.wide.s32 	%rd45, %r23, 8;
	add.s64 	%rd46, %rd44, %rd45;
	st.f64 	[%rd46], %fd4;
	ld.f64 	%fd5, [%rd3+40];
	ld.u64 	%rd47, [%rd2+16];
	ld.u32 	%r24, [%rd2+8];
	mov.u32 	%r25, 782;
	mov.u32 	%r26, 4;
	// Callseq Start 41
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r25;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd35;
	.param .b32 param2;
	st.param.b32	[param2+0], %r24;
	.param .b32 param3;
	st.param.b32	[param3+0], %r9;
	.param .b32 param4;
	st.param.b32	[param4+0], %r1;
	.param .b32 param5;
	st.param.b32	[param5+0], %r26;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r27, [retval0+0];
	
	//{
	}// Callseq End 41
	mul.wide.s32 	%rd48, %r27, 8;
	add.s64 	%rd49, %rd47, %rd48;
	st.f64 	[%rd49], %fd5;
	st.param.b32	[func_retval0+0], %r10;
	ret;
}

	// .globl	_Z18field_scalar_arrayP7field_siPd
.visible .func  (.param .b32 func_retval0) _Z18field_scalar_arrayP7field_siPd(
	.param .b64 _Z18field_scalar_arrayP7field_siPd_param_0,
	.param .b32 _Z18field_scalar_arrayP7field_siPd_param_1,
	.param .b64 _Z18field_scalar_arrayP7field_siPd_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<17>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<34>;


	ld.param.u64 	%rd4, [_Z18field_scalar_arrayP7field_siPd_param_0];
	ld.param.u32 	%r6, [_Z18field_scalar_arrayP7field_siPd_param_1];
	ld.param.u64 	%rd33, [_Z18field_scalar_arrayP7field_siPd_param_2];
	setp.ne.s64	%p1, %rd4, 0;
	@%p1 bra 	BB7_2;

	mov.u64 	%rd6, $str;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, $str1;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, __unnamed_8;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r7, 803;
	mov.u64 	%rd12, 1;
	// Callseq Start 42
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r7;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd11;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd12;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 42

BB7_2:
	add.s64 	%rd1, %rd4, 16;
	ld.u64 	%rd13, [%rd4+16];
	setp.ne.s64	%p2, %rd13, 0;
	@%p2 bra 	BB7_4;

	mov.u64 	%rd14, $str4;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str1;
	cvta.global.u64 	%rd17, %rd16;
	mov.u64 	%rd18, __unnamed_8;
	cvta.global.u64 	%rd19, %rd18;
	mov.u32 	%r8, 804;
	mov.u64 	%rd20, 1;
	// Callseq Start 43
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r8;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 43

BB7_4:
	setp.ne.s64	%p3, %rd33, 0;
	@%p3 bra 	BB7_6;

	mov.u64 	%rd21, $str10;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str1;
	cvta.global.u64 	%rd24, %rd23;
	mov.u64 	%rd25, __unnamed_8;
	cvta.global.u64 	%rd26, %rd25;
	mov.u32 	%r9, 805;
	mov.u64 	%rd27, 1;
	// Callseq Start 44
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r9;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd26;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd27;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 44

BB7_6:
	ld.u32 	%r15, [%rd1+-16];
	setp.lt.s32	%p4, %r15, 1;
	@%p4 bra 	BB7_9;

	mov.u32 	%r16, 0;

BB7_8:
	ld.u64 	%rd28, [%rd1];
	ld.u32 	%r11, [%rd1+-8];
	mov.u64 	%rd29, $str1;
	cvta.global.u64 	%rd30, %rd29;
	mov.u32 	%r12, 808;
	// Callseq Start 45
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd30;
	.param .b32 param2;
	st.param.b32	[param2+0], %r11;
	.param .b32 param3;
	st.param.b32	[param3+0], %r15;
	.param .b32 param4;
	st.param.b32	[param4+0], %r6;
	.param .b32 param5;
	st.param.b32	[param5+0], %r16;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r13, [retval0+0];
	
	//{
	}// Callseq End 45
	mul.wide.s32 	%rd31, %r13, 8;
	add.s64 	%rd32, %rd28, %rd31;
	ld.f64 	%fd1, [%rd32];
	st.f64 	[%rd33], %fd1;
	add.s64 	%rd33, %rd33, 8;
	ld.u32 	%r15, [%rd1+-16];
	add.s32 	%r16, %r16, 1;
	setp.lt.s32	%p5, %r16, %r15;
	@%p5 bra 	BB7_8;

BB7_9:
	mov.u32 	%r14, 0;
	st.param.b32	[func_retval0+0], %r14;
	ret;
}

	// .globl	_Z22field_scalar_array_setP7field_siPKd
.visible .func  (.param .b32 func_retval0) _Z22field_scalar_array_setP7field_siPKd(
	.param .b64 _Z22field_scalar_array_setP7field_siPKd_param_0,
	.param .b32 _Z22field_scalar_array_setP7field_siPKd_param_1,
	.param .b64 _Z22field_scalar_array_setP7field_siPKd_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<17>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<34>;


	ld.param.u64 	%rd4, [_Z22field_scalar_array_setP7field_siPKd_param_0];
	ld.param.u32 	%r6, [_Z22field_scalar_array_setP7field_siPKd_param_1];
	ld.param.u64 	%rd33, [_Z22field_scalar_array_setP7field_siPKd_param_2];
	setp.ne.s64	%p1, %rd4, 0;
	@%p1 bra 	BB8_2;

	mov.u64 	%rd6, $str;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, $str1;
	cvta.global.u64 	%rd9, %rd8;
	mov.u64 	%rd10, __unnamed_9;
	cvta.global.u64 	%rd11, %rd10;
	mov.u32 	%r7, 825;
	mov.u64 	%rd12, 1;
	// Callseq Start 46
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 param2;
	st.param.b32	[param2+0], %r7;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd11;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd12;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 46

BB8_2:
	add.s64 	%rd1, %rd4, 16;
	ld.u64 	%rd13, [%rd4+16];
	setp.ne.s64	%p2, %rd13, 0;
	@%p2 bra 	BB8_4;

	mov.u64 	%rd14, $str4;
	cvta.global.u64 	%rd15, %rd14;
	mov.u64 	%rd16, $str1;
	cvta.global.u64 	%rd17, %rd16;
	mov.u64 	%rd18, __unnamed_9;
	cvta.global.u64 	%rd19, %rd18;
	mov.u32 	%r8, 826;
	mov.u64 	%rd20, 1;
	// Callseq Start 47
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd17;
	.param .b32 param2;
	st.param.b32	[param2+0], %r8;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd19;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd20;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 47

BB8_4:
	setp.ne.s64	%p3, %rd33, 0;
	@%p3 bra 	BB8_6;

	mov.u64 	%rd21, $str10;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str1;
	cvta.global.u64 	%rd24, %rd23;
	mov.u64 	%rd25, __unnamed_9;
	cvta.global.u64 	%rd26, %rd25;
	mov.u32 	%r9, 827;
	mov.u64 	%rd27, 1;
	// Callseq Start 48
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r9;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd26;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd27;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 48

BB8_6:
	ld.u32 	%r15, [%rd1+-16];
	setp.lt.s32	%p4, %r15, 1;
	@%p4 bra 	BB8_9;

	mov.u32 	%r16, 0;

BB8_8:
	ld.f64 	%fd1, [%rd33];
	ld.u64 	%rd28, [%rd1];
	ld.u32 	%r11, [%rd1+-8];
	mov.u64 	%rd29, $str1;
	cvta.global.u64 	%rd30, %rd29;
	mov.u32 	%r12, 830;
	// Callseq Start 49
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.b32	[param0+0], %r12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd30;
	.param .b32 param2;
	st.param.b32	[param2+0], %r11;
	.param .b32 param3;
	st.param.b32	[param3+0], %r15;
	.param .b32 param4;
	st.param.b32	[param4+0], %r6;
	.param .b32 param5;
	st.param.b32	[param5+0], %r16;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z25reverse_addr_rank1_assertiPKciiii, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r13, [retval0+0];
	
	//{
	}// Callseq End 49
	mul.wide.s32 	%rd31, %r13, 8;
	add.s64 	%rd32, %rd28, %rd31;
	st.f64 	[%rd32], %fd1;
	add.s64 	%rd33, %rd33, 8;
	ld.u32 	%r15, [%rd1+-16];
	add.s32 	%r16, %r16, 1;
	setp.lt.s32	%p5, %r16, %r15;
	@%p5 bra 	BB8_8;

BB8_9:
	mov.u32 	%r14, 0;
	st.param.b32	[func_retval0+0], %r14;
	ret;
}


