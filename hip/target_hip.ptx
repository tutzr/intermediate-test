//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	_Z15tdpAtomicAddIntPii
.func  (.param .b64 func_retval0) __internal_accurate_pow
(
	.param .b64 __internal_accurate_pow_param_0
)
;

.visible .func  (.param .b32 func_retval0) _Z15tdpAtomicAddIntPii(
	.param .b64 _Z15tdpAtomicAddIntPii_param_0,
	.param .b32 _Z15tdpAtomicAddIntPii_param_1
)
{
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<2>;


	ld.param.u64 	%rd1, [_Z15tdpAtomicAddIntPii_param_0];
	ld.param.u32 	%r1, [_Z15tdpAtomicAddIntPii_param_1];
	atom.add.u32 	%r2, [%rd1], %r1;
	st.param.b32	[func_retval0+0], %r2;
	ret;
}

	// .globl	_Z18tdpAtomicAddDoublePdd
.visible .func  (.param .b64 func_retval0) _Z18tdpAtomicAddDoublePdd(
	.param .b64 _Z18tdpAtomicAddDoublePdd_param_0,
	.param .b64 _Z18tdpAtomicAddDoublePdd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd4, [_Z18tdpAtomicAddDoublePdd_param_0];
	ld.param.f64 	%fd2, [_Z18tdpAtomicAddDoublePdd_param_1];
	ld.u64 	%rd6, [%rd4];

BB1_1:
	mov.b64 	 %fd1, %rd6;
	add.f64 	%fd3, %fd1, %fd2;
	mov.b64 	 %rd5, %fd3;
	atom.cas.b64 	%rd3, [%rd4], %rd6, %rd5;
	setp.ne.s64	%p1, %rd6, %rd3;
	mov.u64 	%rd6, %rd3;
	@%p1 bra 	BB1_1;

	st.param.f64	[func_retval0+0], %fd1;
	ret;
}

	// .globl	_Z18tdpAtomicMinDoublePdd
.visible .func  (.param .b64 func_retval0) _Z18tdpAtomicMinDoublePdd(
	.param .b64 _Z18tdpAtomicMinDoublePdd_param_0,
	.param .b64 _Z18tdpAtomicMinDoublePdd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd4, [_Z18tdpAtomicMinDoublePdd_param_0];
	ld.param.f64 	%fd2, [_Z18tdpAtomicMinDoublePdd_param_1];
	ld.u64 	%rd6, [%rd4];
	cvt.rn.f32.f64	%f1, %fd2;

BB2_1:
	mov.b64 	 %fd1, %rd6;
	cvt.rn.f32.f64	%f2, %fd1;
	min.f32 	%f3, %f1, %f2;
	cvt.f64.f32	%fd3, %f3;
	mov.b64 	 %rd5, %fd3;
	atom.cas.b64 	%rd3, [%rd4], %rd6, %rd5;
	setp.ne.s64	%p1, %rd6, %rd3;
	mov.u64 	%rd6, %rd3;
	@%p1 bra 	BB2_1;

	st.param.f64	[func_retval0+0], %fd1;
	ret;
}

	// .globl	_Z20tdpAtomicBlockAddIntPi
.visible .func  (.param .b32 func_retval0) _Z20tdpAtomicBlockAddIntPi(
	.param .b64 _Z20tdpAtomicBlockAddIntPi_param_0
)
{
	.reg .pred 	%p<21>;
	.reg .b32 	%r<36>;
	.reg .f64 	%fd<20>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd2, [_Z20tdpAtomicBlockAddIntPi_param_0];
	mov.u32 	%r1, %tid.x;
	mov.f64 	%fd11, 0d401C000000000000;
	cvt.rpi.f64.f64	%fd1, %fd11;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2}, %fd1;
	}
	bfe.u32 	%r8, %r2, 20, 11;
	add.s32 	%r9, %r8, -1012;
	mov.b64 	 %rd3, %fd1;
	shl.b64 	%rd4, %rd3, %r9;
	setp.ne.s64	%p2, %rd4, -9223372036854775808;
	setp.eq.s64	%p3, %rd4, -9223372036854775808;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd1;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0
	);
	ld.param.f64	%fd6, [retval0+0];
	
	//{
	}// Callseq End 0
	mov.f64 	%fd12, 0d4000000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r3}, %fd12;
	}
	setp.gt.s32	%p4, %r3, -1;
	setp.lt.s32	%p5, %r3, 0;
	and.pred  	%p1, %p5, %p3;
	or.pred  	%p6, %p4, %p2;
	@%p6 bra 	BB3_2;

	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r10}, %fd6;
	}
	xor.b32  	%r11, %r10, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r12, %temp}, %fd6;
	}
	mov.b64 	%fd6, {%r12, %r11};

BB3_2:
	@%p4 bra 	BB3_4;

	cvt.rzi.f64.f64	%fd13, %fd1;
	setp.neu.f64	%p8, %fd13, %fd1;
	selp.f64	%fd6, 0dFFF8000000000000, %fd6, %p8;

BB3_4:
	add.f64 	%fd19, %fd1, 0d4000000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r13}, %fd19;
	}
	and.b32  	%r14, %r13, 2146435072;
	setp.ne.s32	%p9, %r14, 2146435072;
	@%p9 bra 	BB3_5;

	abs.f64 	%fd14, %fd1;
	setp.gtu.f64	%p10, %fd14, 0d7FF0000000000000;
	@%p10 bra 	BB3_14;

	and.b32  	%r15, %r2, 2147483647;
	setp.ne.s32	%p11, %r15, 2146435072;
	@%p11 bra 	BB3_9;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r16, %temp}, %fd1;
	}
	setp.eq.s32	%p12, %r16, 0;
	@%p12 bra 	BB3_13;

BB3_9:
	and.b32  	%r17, %r3, 2147483647;
	setp.ne.s32	%p13, %r17, 2146435072;
	@%p13 bra 	BB3_10;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r18, %temp}, %fd12;
	}
	setp.ne.s32	%p14, %r18, 0;
	mov.f64 	%fd19, %fd6;
	@%p14 bra 	BB3_14;

	shr.s32 	%r19, %r2, 31;
	and.b32  	%r20, %r19, -2146435072;
	add.s32 	%r21, %r20, 2146435072;
	or.b32  	%r22, %r21, -2147483648;
	selp.b32	%r23, %r22, %r21, %p1;
	mov.u32 	%r24, 0;
	mov.b64 	%fd19, {%r24, %r23};
	bra.uni 	BB3_14;

BB3_5:
	mov.f64 	%fd19, %fd6;
	bra.uni 	BB3_14;

BB3_10:
	mov.f64 	%fd19, %fd6;
	bra.uni 	BB3_14;

BB3_13:
	shr.s32 	%r25, %r2, 31;
	and.b32  	%r26, %r25, -2146435072;
	add.s32 	%r27, %r26, 2146435072;
	mov.u32 	%r28, 0;
	mov.b64 	%fd19, {%r28, %r27};

BB3_14:
	setp.eq.f64	%p15, %fd1, 0d0000000000000000;
	selp.f64	%fd16, 0d3FF0000000000000, %fd19, %p15;
	cvt.rzi.s32.f64	%r35, %fd16;
	setp.lt.s32	%p16, %r35, 2;
	@%p16 bra 	BB3_19;

	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd1, %rd2, %rd5;

BB3_16:
	mov.u32 	%r5, %r35;
	bar.sync 	0;
	shr.u32 	%r29, %r5, 31;
	add.s32 	%r30, %r5, %r29;
	shr.s32 	%r35, %r30, 1;
	setp.ge.s32	%p17, %r1, %r35;
	add.s32 	%r7, %r35, %r1;
	setp.gt.s32	%p18, %r7, 127;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	BB3_18;

	mul.wide.s32 	%rd6, %r7, 4;
	add.s64 	%rd7, %rd2, %rd6;
	ld.u32 	%r31, [%rd1];
	ld.u32 	%r32, [%rd7];
	add.s32 	%r33, %r31, %r32;
	st.u32 	[%rd1], %r33;

BB3_18:
	setp.gt.s32	%p20, %r5, 3;
	@%p20 bra 	BB3_16;

BB3_19:
	ld.u32 	%r34, [%rd2];
	st.param.b32	[func_retval0+0], %r34;
	ret;
}

	// .globl	_Z23tdpAtomicBlockAddDoublePd
.visible .func  (.param .b64 func_retval0) _Z23tdpAtomicBlockAddDoublePd(
	.param .b64 _Z23tdpAtomicBlockAddDoublePd_param_0
)
{
	.reg .pred 	%p<21>;
	.reg .b32 	%r<32>;
	.reg .f64 	%fd<24>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd2, [_Z23tdpAtomicBlockAddDoublePd_param_0];
	mov.u32 	%r1, %tid.x;
	mov.f64 	%fd11, 0d401C000000000000;
	cvt.rpi.f64.f64	%fd1, %fd11;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2}, %fd1;
	}
	bfe.u32 	%r8, %r2, 20, 11;
	add.s32 	%r9, %r8, -1012;
	mov.b64 	 %rd3, %fd1;
	shl.b64 	%rd4, %rd3, %r9;
	setp.ne.s64	%p2, %rd4, -9223372036854775808;
	setp.eq.s64	%p3, %rd4, -9223372036854775808;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd1;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0
	);
	ld.param.f64	%fd6, [retval0+0];
	
	//{
	}// Callseq End 1
	mov.f64 	%fd12, 0d4000000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r3}, %fd12;
	}
	setp.gt.s32	%p4, %r3, -1;
	setp.lt.s32	%p5, %r3, 0;
	and.pred  	%p1, %p5, %p3;
	or.pred  	%p6, %p4, %p2;
	@%p6 bra 	BB4_2;

	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r10}, %fd6;
	}
	xor.b32  	%r11, %r10, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r12, %temp}, %fd6;
	}
	mov.b64 	%fd6, {%r12, %r11};

BB4_2:
	@%p4 bra 	BB4_4;

	cvt.rzi.f64.f64	%fd13, %fd1;
	setp.neu.f64	%p8, %fd13, %fd1;
	selp.f64	%fd6, 0dFFF8000000000000, %fd6, %p8;

BB4_4:
	add.f64 	%fd23, %fd1, 0d4000000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r13}, %fd23;
	}
	and.b32  	%r14, %r13, 2146435072;
	setp.ne.s32	%p9, %r14, 2146435072;
	@%p9 bra 	BB4_5;

	abs.f64 	%fd14, %fd1;
	setp.gtu.f64	%p10, %fd14, 0d7FF0000000000000;
	@%p10 bra 	BB4_14;

	and.b32  	%r15, %r2, 2147483647;
	setp.ne.s32	%p11, %r15, 2146435072;
	@%p11 bra 	BB4_9;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r16, %temp}, %fd1;
	}
	setp.eq.s32	%p12, %r16, 0;
	@%p12 bra 	BB4_13;

BB4_9:
	and.b32  	%r17, %r3, 2147483647;
	setp.ne.s32	%p13, %r17, 2146435072;
	@%p13 bra 	BB4_10;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r18, %temp}, %fd12;
	}
	setp.ne.s32	%p14, %r18, 0;
	mov.f64 	%fd23, %fd6;
	@%p14 bra 	BB4_14;

	shr.s32 	%r19, %r2, 31;
	and.b32  	%r20, %r19, -2146435072;
	add.s32 	%r21, %r20, 2146435072;
	or.b32  	%r22, %r21, -2147483648;
	selp.b32	%r23, %r22, %r21, %p1;
	mov.u32 	%r24, 0;
	mov.b64 	%fd23, {%r24, %r23};
	bra.uni 	BB4_14;

BB4_5:
	mov.f64 	%fd23, %fd6;
	bra.uni 	BB4_14;

BB4_10:
	mov.f64 	%fd23, %fd6;
	bra.uni 	BB4_14;

BB4_13:
	shr.s32 	%r25, %r2, 31;
	and.b32  	%r26, %r25, -2146435072;
	add.s32 	%r27, %r26, 2146435072;
	mov.u32 	%r28, 0;
	mov.b64 	%fd23, {%r28, %r27};

BB4_14:
	setp.eq.f64	%p15, %fd1, 0d0000000000000000;
	selp.f64	%fd16, 0d3FF0000000000000, %fd23, %p15;
	cvt.rzi.s32.f64	%r31, %fd16;
	setp.lt.s32	%p16, %r31, 2;
	@%p16 bra 	BB4_19;

	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd1, %rd2, %rd5;

BB4_16:
	mov.u32 	%r5, %r31;
	bar.sync 	0;
	shr.u32 	%r29, %r5, 31;
	add.s32 	%r30, %r5, %r29;
	shr.s32 	%r31, %r30, 1;
	setp.ge.s32	%p17, %r1, %r31;
	add.s32 	%r7, %r31, %r1;
	setp.gt.s32	%p18, %r7, 127;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	BB4_18;

	mul.wide.s32 	%rd6, %r7, 8;
	add.s64 	%rd7, %rd2, %rd6;
	ld.f64 	%fd17, [%rd1];
	ld.f64 	%fd18, [%rd7];
	add.f64 	%fd19, %fd18, %fd17;
	st.f64 	[%rd1], %fd19;

BB4_18:
	setp.gt.s32	%p20, %r5, 3;
	@%p20 bra 	BB4_16;

BB4_19:
	ld.f64 	%fd20, [%rd2];
	st.param.f64	[func_retval0+0], %fd20;
	ret;
}

	// .globl	_Z15tdpErrorHandler10hipError_tPKcii
.visible .func _Z15tdpErrorHandler10hipError_tPKcii(
	.param .b32 _Z15tdpErrorHandler10hipError_tPKcii_param_0,
	.param .b64 _Z15tdpErrorHandler10hipError_tPKcii_param_1,
	.param .b32 _Z15tdpErrorHandler10hipError_tPKcii_param_2,
	.param .b32 _Z15tdpErrorHandler10hipError_tPKcii_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;


	ld.param.u32 	%r1, [_Z15tdpErrorHandler10hipError_tPKcii_param_0];
	setp.eq.s32	%p1, %r1, 0;
	@%p1 bra 	BB5_2;
	bra.uni 	BB5_1;

BB5_2:
	ret;

BB5_1:
	trap;
}

	// .globl	_Z21tdpDeviceGetAttributePi20hipDeviceAttribute_ti
.visible .func  (.param .b32 func_retval0) _Z21tdpDeviceGetAttributePi20hipDeviceAttribute_ti(
	.param .b64 _Z21tdpDeviceGetAttributePi20hipDeviceAttribute_ti_param_0,
	.param .b32 _Z21tdpDeviceGetAttributePi20hipDeviceAttribute_ti_param_1,
	.param .b32 _Z21tdpDeviceGetAttributePi20hipDeviceAttribute_ti_param_2
)
{



	trap;
}

	// .globl	_Z23tdpDeviceGetCacheConfigP13cudaFuncCache
.visible .func  (.param .b32 func_retval0) _Z23tdpDeviceGetCacheConfigP13cudaFuncCache(
	.param .b64 _Z23tdpDeviceGetCacheConfigP13cudaFuncCache_param_0
)
{



	trap;
}

	// .globl	_Z20tdpDeviceSynchronizev
.visible .func  (.param .b32 func_retval0) _Z20tdpDeviceSynchronizev(

)
{



	trap;
}

	// .globl	_Z12tdpGetDevicePi
.visible .func  (.param .b32 func_retval0) _Z12tdpGetDevicePi(
	.param .b64 _Z12tdpGetDevicePi_param_0
)
{



	trap;
}

	// .globl	_Z17tdpGetDeviceCountPi
.visible .func  (.param .b32 func_retval0) _Z17tdpGetDeviceCountPi(
	.param .b64 _Z17tdpGetDeviceCountPi_param_0
)
{



	trap;
}

	// .globl	_Z15tdpGetErrorName10hipError_t
.visible .func  (.param .b64 func_retval0) _Z15tdpGetErrorName10hipError_t(
	.param .b32 _Z15tdpGetErrorName10hipError_t_param_0
)
{



	trap;
}

	// .globl	_Z17tdpGetErrorString10hipError_t
.visible .func  (.param .b64 func_retval0) _Z17tdpGetErrorString10hipError_t(
	.param .b32 _Z17tdpGetErrorString10hipError_t_param_0
)
{



	trap;
}

	// .globl	_Z15tdpGetLastErrorv
.visible .func  (.param .b32 func_retval0) _Z15tdpGetLastErrorv(

)
{



	trap;
}

	// .globl	_Z18tdpPeekAtLastErrorv
.visible .func  (.param .b32 func_retval0) _Z18tdpPeekAtLastErrorv(

)
{



	trap;
}

	// .globl	_Z9tdpMallocPPvm
.visible .func  (.param .b32 func_retval0) _Z9tdpMallocPPvm(
	.param .b64 _Z9tdpMallocPPvm_param_0,
	.param .b64 _Z9tdpMallocPPvm_param_1
)
{



	trap;
}

	// .globl	_Z7tdpFreePv
.visible .func  (.param .b32 func_retval0) _Z7tdpFreePv(
	.param .b64 _Z7tdpFreePv_param_0
)
{



	trap;
}

.func  (.param .b64 func_retval0) __internal_accurate_pow(
	.param .b64 __internal_accurate_pow_param_0
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<53>;
	.reg .f64 	%fd<138>;


	ld.param.f64 	%fd12, [__internal_accurate_pow_param_0];
	mov.f64 	%fd13, 0d4000000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r50}, %fd13;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r49, %temp}, %fd13;
	}
	shr.u32 	%r51, %r50, 20;
	setp.ne.s32	%p1, %r51, 0;
	@%p1 bra 	BB17_2;

	mov.f64 	%fd14, 0d4360000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r50}, %fd14;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r49, %temp}, %fd14;
	}
	shr.u32 	%r16, %r50, 20;
	add.s32 	%r51, %r16, -54;

BB17_2:
	add.s32 	%r52, %r51, -1023;
	and.b32  	%r17, %r50, -2146435073;
	or.b32  	%r18, %r17, 1072693248;
	mov.b64 	%fd135, {%r49, %r18};
	setp.lt.u32	%p2, %r18, 1073127583;
	@%p2 bra 	BB17_4;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r19, %temp}, %fd135;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r20}, %fd135;
	}
	add.s32 	%r21, %r20, -1048576;
	mov.b64 	%fd135, {%r19, %r21};
	add.s32 	%r52, %r51, -1022;

BB17_4:
	add.f64 	%fd15, %fd135, 0d3FF0000000000000;
	rcp.approx.ftz.f64 	%fd16, %fd15;
	neg.f64 	%fd17, %fd15;
	mov.f64 	%fd18, 0d3FF0000000000000;
	fma.rn.f64 	%fd19, %fd17, %fd16, %fd18;
	fma.rn.f64 	%fd20, %fd19, %fd19, %fd19;
	fma.rn.f64 	%fd21, %fd20, %fd16, %fd16;
	add.f64 	%fd22, %fd135, 0dBFF0000000000000;
	mul.f64 	%fd23, %fd22, %fd21;
	fma.rn.f64 	%fd24, %fd22, %fd21, %fd23;
	mul.f64 	%fd25, %fd24, %fd24;
	mov.f64 	%fd26, 0d3ED0F5D241AD3B5A;
	mov.f64 	%fd27, 0d3EB0F5FF7D2CAFE2;
	fma.rn.f64 	%fd28, %fd27, %fd25, %fd26;
	mov.f64 	%fd29, 0d3EF3B20A75488A3F;
	fma.rn.f64 	%fd30, %fd28, %fd25, %fd29;
	mov.f64 	%fd31, 0d3F1745CDE4FAECD5;
	fma.rn.f64 	%fd32, %fd30, %fd25, %fd31;
	mov.f64 	%fd33, 0d3F3C71C7258A578B;
	fma.rn.f64 	%fd34, %fd32, %fd25, %fd33;
	mov.f64 	%fd35, 0d3F6249249242B910;
	fma.rn.f64 	%fd36, %fd34, %fd25, %fd35;
	mov.f64 	%fd37, 0d3F89999999999DFB;
	fma.rn.f64 	%fd38, %fd36, %fd25, %fd37;
	sub.f64 	%fd39, %fd22, %fd24;
	add.f64 	%fd40, %fd39, %fd39;
	neg.f64 	%fd41, %fd24;
	fma.rn.f64 	%fd42, %fd41, %fd22, %fd40;
	mul.f64 	%fd43, %fd21, %fd42;
	fma.rn.f64 	%fd44, %fd25, %fd38, 0d3FB5555555555555;
	mov.f64 	%fd45, 0d3FB5555555555555;
	sub.f64 	%fd46, %fd45, %fd44;
	fma.rn.f64 	%fd47, %fd25, %fd38, %fd46;
	add.f64 	%fd48, %fd47, 0d0000000000000000;
	add.f64 	%fd49, %fd48, 0dBC46A4CB00B9E7B0;
	add.f64 	%fd50, %fd44, %fd49;
	sub.f64 	%fd51, %fd44, %fd50;
	add.f64 	%fd52, %fd49, %fd51;
	mul.rn.f64 	%fd53, %fd24, %fd24;
	neg.f64 	%fd54, %fd53;
	fma.rn.f64 	%fd55, %fd24, %fd24, %fd54;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %fd43;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r23}, %fd43;
	}
	add.s32 	%r24, %r23, 1048576;
	mov.b64 	%fd56, {%r22, %r24};
	fma.rn.f64 	%fd57, %fd24, %fd56, %fd55;
	mul.rn.f64 	%fd58, %fd53, %fd24;
	neg.f64 	%fd59, %fd58;
	fma.rn.f64 	%fd60, %fd53, %fd24, %fd59;
	fma.rn.f64 	%fd61, %fd53, %fd43, %fd60;
	fma.rn.f64 	%fd62, %fd57, %fd24, %fd61;
	mul.rn.f64 	%fd63, %fd50, %fd58;
	neg.f64 	%fd64, %fd63;
	fma.rn.f64 	%fd65, %fd50, %fd58, %fd64;
	fma.rn.f64 	%fd66, %fd50, %fd62, %fd65;
	fma.rn.f64 	%fd67, %fd52, %fd58, %fd66;
	add.f64 	%fd68, %fd63, %fd67;
	sub.f64 	%fd69, %fd63, %fd68;
	add.f64 	%fd70, %fd67, %fd69;
	add.f64 	%fd71, %fd24, %fd68;
	sub.f64 	%fd72, %fd24, %fd71;
	add.f64 	%fd73, %fd68, %fd72;
	add.f64 	%fd74, %fd70, %fd73;
	add.f64 	%fd75, %fd43, %fd74;
	add.f64 	%fd76, %fd71, %fd75;
	sub.f64 	%fd77, %fd71, %fd76;
	add.f64 	%fd78, %fd75, %fd77;
	xor.b32  	%r25, %r52, -2147483648;
	mov.u32 	%r26, -2147483648;
	mov.u32 	%r27, 1127219200;
	mov.b64 	%fd79, {%r25, %r27};
	mov.b64 	%fd80, {%r26, %r27};
	sub.f64 	%fd81, %fd79, %fd80;
	mov.f64 	%fd82, 0d3FE62E42FEFA39EF;
	fma.rn.f64 	%fd83, %fd81, %fd82, %fd76;
	neg.f64 	%fd84, %fd81;
	fma.rn.f64 	%fd85, %fd84, %fd82, %fd83;
	sub.f64 	%fd86, %fd85, %fd76;
	sub.f64 	%fd87, %fd78, %fd86;
	mov.f64 	%fd88, 0d3C7ABC9E3B39803F;
	fma.rn.f64 	%fd89, %fd81, %fd88, %fd87;
	add.f64 	%fd90, %fd83, %fd89;
	sub.f64 	%fd91, %fd83, %fd90;
	add.f64 	%fd92, %fd89, %fd91;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r28}, %fd12;
	}
	add.s32 	%r29, %r28, %r28;
	setp.gt.u32	%p3, %r29, -33554433;
	and.b32  	%r30, %r28, -15728641;
	selp.b32	%r31, %r30, %r28, %p3;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r32, %temp}, %fd12;
	}
	mov.b64 	%fd93, {%r32, %r31};
	mul.rn.f64 	%fd94, %fd90, %fd93;
	neg.f64 	%fd95, %fd94;
	fma.rn.f64 	%fd96, %fd90, %fd93, %fd95;
	fma.rn.f64 	%fd97, %fd92, %fd93, %fd96;
	add.f64 	%fd4, %fd94, %fd97;
	sub.f64 	%fd98, %fd94, %fd4;
	add.f64 	%fd5, %fd97, %fd98;
	mov.f64 	%fd99, 0d4338000000000000;
	mov.f64 	%fd100, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd101, %fd4, %fd100, %fd99;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r13, %temp}, %fd101;
	}
	mov.f64 	%fd102, 0dC338000000000000;
	add.rn.f64 	%fd103, %fd101, %fd102;
	mov.f64 	%fd104, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd105, %fd103, %fd104, %fd4;
	mov.f64 	%fd106, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd107, %fd103, %fd106, %fd105;
	mov.f64 	%fd108, 0d3E928AF3FCA213EA;
	mov.f64 	%fd109, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd110, %fd109, %fd107, %fd108;
	mov.f64 	%fd111, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd112, %fd110, %fd107, %fd111;
	mov.f64 	%fd113, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd114, %fd112, %fd107, %fd113;
	mov.f64 	%fd115, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd116, %fd114, %fd107, %fd115;
	mov.f64 	%fd117, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd118, %fd116, %fd107, %fd117;
	mov.f64 	%fd119, 0d3F81111111122322;
	fma.rn.f64 	%fd120, %fd118, %fd107, %fd119;
	mov.f64 	%fd121, 0d3FA55555555502A1;
	fma.rn.f64 	%fd122, %fd120, %fd107, %fd121;
	mov.f64 	%fd123, 0d3FC5555555555511;
	fma.rn.f64 	%fd124, %fd122, %fd107, %fd123;
	mov.f64 	%fd125, 0d3FE000000000000B;
	fma.rn.f64 	%fd126, %fd124, %fd107, %fd125;
	fma.rn.f64 	%fd127, %fd126, %fd107, %fd18;
	fma.rn.f64 	%fd128, %fd127, %fd107, %fd18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r14, %temp}, %fd128;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r15}, %fd128;
	}
	shl.b32 	%r33, %r13, 20;
	add.s32 	%r34, %r15, %r33;
	mov.b64 	%fd136, {%r14, %r34};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r35}, %fd4;
	}
	mov.b32 	 %f2, %r35;
	abs.f32 	%f1, %f2;
	setp.lt.f32	%p4, %f1, 0f4086232B;
	@%p4 bra 	BB17_7;

	setp.lt.f64	%p5, %fd4, 0d0000000000000000;
	add.f64 	%fd129, %fd4, 0d7FF0000000000000;
	selp.f64	%fd136, 0d0000000000000000, %fd129, %p5;
	setp.geu.f32	%p6, %f1, 0f40874800;
	@%p6 bra 	BB17_7;

	mov.f64 	%fd134, 0d4338000000000000;
	mov.f64 	%fd133, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd132, %fd4, %fd133, %fd134;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r48, %temp}, %fd132;
	}
	shr.u32 	%r36, %r48, 31;
	add.s32 	%r37, %r48, %r36;
	shr.s32 	%r38, %r37, 1;
	shl.b32 	%r39, %r38, 20;
	add.s32 	%r40, %r39, %r15;
	mov.b64 	%fd130, {%r14, %r40};
	sub.s32 	%r41, %r48, %r38;
	shl.b32 	%r42, %r41, 20;
	add.s32 	%r43, %r42, 1072693248;
	mov.u32 	%r44, 0;
	mov.b64 	%fd131, {%r44, %r43};
	mul.f64 	%fd136, %fd130, %fd131;

BB17_7:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r45}, %fd136;
	}
	and.b32  	%r46, %r45, 2147483647;
	setp.ne.s32	%p7, %r46, 2146435072;
	@%p7 bra 	BB17_9;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r47, %temp}, %fd136;
	}
	setp.eq.s32	%p8, %r47, 0;
	@%p8 bra 	BB17_10;

BB17_9:
	fma.rn.f64 	%fd136, %fd136, %fd5, %fd136;

BB17_10:
	st.param.f64	[func_retval0+0], %fd136;
	ret;
}


