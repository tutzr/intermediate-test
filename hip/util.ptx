//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	_Z11dot_productPKdS0_
.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
.const .align 8 .b8 __cudart_sin_cos_coeffs[128] = {186, 94, 120, 249, 101, 219, 229, 61, 70, 210, 176, 44, 241, 229, 90, 190, 146, 227, 172, 105, 227, 29, 199, 62, 161, 98, 219, 25, 160, 1, 42, 191, 24, 8, 17, 17, 17, 17, 129, 63, 84, 85, 85, 85, 85, 85, 197, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 129, 253, 32, 131, 255, 168, 189, 40, 133, 239, 193, 167, 238, 33, 62, 217, 230, 6, 142, 79, 126, 146, 190, 233, 188, 221, 25, 160, 1, 250, 62, 71, 93, 193, 22, 108, 193, 86, 191, 81, 85, 85, 85, 85, 85, 165, 63, 0, 0, 0, 0, 0, 0, 224, 191, 0, 0, 0, 0, 0, 0, 240, 63};

.visible .func  (.param .b64 func_retval0) _Z11dot_productPKdS0_(
	.param .b64 _Z11dot_productPKdS0__param_0,
	.param .b64 _Z11dot_productPKdS0__param_1
)
{
	.reg .f64 	%fd<10>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z11dot_productPKdS0__param_0];
	ld.param.u64 	%rd2, [_Z11dot_productPKdS0__param_1];
	ld.f64 	%fd1, [%rd1];
	ld.f64 	%fd2, [%rd2];
	ld.f64 	%fd3, [%rd1+8];
	ld.f64 	%fd4, [%rd2+8];
	mul.f64 	%fd5, %fd3, %fd4;
	fma.rn.f64 	%fd6, %fd1, %fd2, %fd5;
	ld.f64 	%fd7, [%rd1+16];
	ld.f64 	%fd8, [%rd2+16];
	fma.rn.f64 	%fd9, %fd7, %fd8, %fd6;
	st.param.f64	[func_retval0+0], %fd9;
	ret;
}

	// .globl	_Z13cross_productPKdS0_Pd
.visible .func _Z13cross_productPKdS0_Pd(
	.param .b64 _Z13cross_productPKdS0_Pd_param_0,
	.param .b64 _Z13cross_productPKdS0_Pd_param_1,
	.param .b64 _Z13cross_productPKdS0_Pd_param_2
)
{
	.reg .f64 	%fd<22>;
	.reg .b64 	%rd<4>;


	ld.param.u64 	%rd1, [_Z13cross_productPKdS0_Pd_param_0];
	ld.param.u64 	%rd2, [_Z13cross_productPKdS0_Pd_param_1];
	ld.param.u64 	%rd3, [_Z13cross_productPKdS0_Pd_param_2];
	ld.f64 	%fd1, [%rd1+8];
	ld.f64 	%fd2, [%rd2+16];
	mul.f64 	%fd3, %fd1, %fd2;
	ld.f64 	%fd4, [%rd1+16];
	ld.f64 	%fd5, [%rd2+8];
	mul.f64 	%fd6, %fd4, %fd5;
	sub.f64 	%fd7, %fd3, %fd6;
	st.f64 	[%rd3], %fd7;
	ld.f64 	%fd8, [%rd1+16];
	ld.f64 	%fd9, [%rd2];
	mul.f64 	%fd10, %fd8, %fd9;
	ld.f64 	%fd11, [%rd1];
	ld.f64 	%fd12, [%rd2+16];
	mul.f64 	%fd13, %fd11, %fd12;
	sub.f64 	%fd14, %fd10, %fd13;
	st.f64 	[%rd3+8], %fd14;
	ld.f64 	%fd15, [%rd1];
	ld.f64 	%fd16, [%rd2+8];
	mul.f64 	%fd17, %fd15, %fd16;
	ld.f64 	%fd18, [%rd1+8];
	ld.f64 	%fd19, [%rd2];
	mul.f64 	%fd20, %fd18, %fd19;
	sub.f64 	%fd21, %fd17, %fd20;
	st.f64 	[%rd3+16], %fd21;
	ret;
}

	// .globl	_Z7modulusPKd
.visible .func  (.param .b64 func_retval0) _Z7modulusPKd(
	.param .b64 _Z7modulusPKd_param_0
)
{
	.reg .f64 	%fd<8>;
	.reg .b64 	%rd<2>;


	ld.param.u64 	%rd1, [_Z7modulusPKd_param_0];
	ld.f64 	%fd1, [%rd1];
	ld.f64 	%fd2, [%rd1+8];
	mul.f64 	%fd3, %fd2, %fd2;
	fma.rn.f64 	%fd4, %fd1, %fd1, %fd3;
	ld.f64 	%fd5, [%rd1+16];
	fma.rn.f64 	%fd6, %fd5, %fd5, %fd4;
	sqrt.rn.f64 	%fd7, %fd6;
	st.param.f64	[func_retval0+0], %fd7;
	ret;
}

	// .globl	_Z13rotate_vectorPdPKd
.visible .func _Z13rotate_vectorPdPKd(
	.param .b64 _Z13rotate_vectorPdPKd_param_0,
	.param .b64 _Z13rotate_vectorPdPKd_param_1
)
{
	.local .align 4 .b8 	__local_depot3[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<12>;
	.reg .b32 	%r<26>;
	.reg .f64 	%fd<118>;
	.reg .b64 	%rd<16>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [_Z13rotate_vectorPdPKd_param_0];
	ld.param.u64 	%rd3, [_Z13rotate_vectorPdPKd_param_1];
	add.u64 	%rd4, %SP, 4;
	add.u64 	%rd1, %SPL, 4;
	ld.f64 	%fd1, [%rd3];
	ld.f64 	%fd2, [%rd3+8];
	mul.f64 	%fd32, %fd2, %fd2;
	fma.rn.f64 	%fd33, %fd1, %fd1, %fd32;
	ld.f64 	%fd3, [%rd3+16];
	fma.rn.f64 	%fd34, %fd3, %fd3, %fd33;
	sqrt.rn.f64 	%fd4, %fd34;
	setp.eq.f64	%p1, %fd4, 0d0000000000000000;
	@%p1 bra 	BB3_20;

	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r9}, %fd4;
	}
	and.b32  	%r1, %r9, 2147483647;
	setp.ne.s32	%p2, %r1, 2146435072;
	mov.f64 	%fd110, %fd4;
	@%p2 bra 	BB3_4;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r10, %temp}, %fd4;
	}
	setp.ne.s32	%p3, %r10, 0;
	mov.f64 	%fd110, %fd4;
	@%p3 bra 	BB3_4;

	mov.f64 	%fd35, 0d0000000000000000;
	mul.rn.f64 	%fd110, %fd4, %fd35;

BB3_4:
	mul.f64 	%fd36, %fd110, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r24, %fd36;
	st.local.u32 	[%rd1], %r24;
	cvt.rn.f64.s32	%fd37, %r24;
	neg.f64 	%fd38, %fd37;
	mov.f64 	%fd39, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd40, %fd38, %fd39, %fd110;
	mov.f64 	%fd41, 0d3C91A62633145C00;
	fma.rn.f64 	%fd42, %fd38, %fd41, %fd40;
	mov.f64 	%fd43, 0d397B839A252049C0;
	fma.rn.f64 	%fd111, %fd38, %fd43, %fd42;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r11}, %fd110;
	}
	and.b32  	%r12, %r11, 2145386496;
	setp.lt.u32	%p4, %r12, 1105199104;
	@%p4 bra 	BB3_6;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd110;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd4;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd111, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.local.u32 	%r24, [%rd1];

BB3_6:
	and.b32  	%r13, %r24, 1;
	shl.b32 	%r14, %r13, 3;
	setp.eq.s32	%p5, %r13, 0;
	selp.f64	%fd44, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p5;
	add.s32 	%r15, %r14, 1;
	mul.wide.s32 	%rd6, %r15, 8;
	mov.u64 	%rd7, __cudart_sin_cos_coeffs;
	add.s64 	%rd8, %rd7, %rd6;
	ld.const.f64 	%fd45, [%rd8];
	mul.rn.f64 	%fd10, %fd111, %fd111;
	fma.rn.f64 	%fd46, %fd44, %fd10, %fd45;
	ld.const.f64 	%fd47, [%rd8+8];
	fma.rn.f64 	%fd48, %fd46, %fd10, %fd47;
	ld.const.f64 	%fd49, [%rd8+16];
	fma.rn.f64 	%fd50, %fd48, %fd10, %fd49;
	ld.const.f64 	%fd51, [%rd8+24];
	fma.rn.f64 	%fd52, %fd50, %fd10, %fd51;
	ld.const.f64 	%fd53, [%rd8+32];
	fma.rn.f64 	%fd54, %fd52, %fd10, %fd53;
	ld.const.f64 	%fd55, [%rd8+40];
	fma.rn.f64 	%fd11, %fd54, %fd10, %fd55;
	fma.rn.f64 	%fd112, %fd11, %fd111, %fd111;
	@%p5 bra 	BB3_8;

	mov.f64 	%fd56, 0d3FF0000000000000;
	fma.rn.f64 	%fd112, %fd11, %fd10, %fd56;

BB3_8:
	and.b32  	%r16, %r24, 2;
	setp.eq.s32	%p6, %r16, 0;
	@%p6 bra 	BB3_10;

	mov.f64 	%fd57, 0d0000000000000000;
	mov.f64 	%fd58, 0dBFF0000000000000;
	fma.rn.f64 	%fd112, %fd112, %fd58, %fd57;

BB3_10:
	mov.f64 	%fd114, %fd4;
	@%p2 bra 	BB3_13;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r17, %temp}, %fd4;
	}
	setp.ne.s32	%p8, %r17, 0;
	mov.f64 	%fd114, %fd4;
	@%p8 bra 	BB3_13;

	mov.f64 	%fd59, 0d0000000000000000;
	mul.rn.f64 	%fd114, %fd4, %fd59;

BB3_13:
	div.rn.f64 	%fd19, %fd1, %fd4;
	div.rn.f64 	%fd20, %fd2, %fd4;
	div.rn.f64 	%fd21, %fd3, %fd4;
	mul.f64 	%fd60, %fd114, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r25, %fd60;
	add.u64 	%rd9, %SP, 0;
	add.u64 	%rd10, %SPL, 0;
	st.local.u32 	[%rd10], %r25;
	cvt.rn.f64.s32	%fd61, %r25;
	neg.f64 	%fd62, %fd61;
	fma.rn.f64 	%fd64, %fd62, %fd39, %fd114;
	fma.rn.f64 	%fd66, %fd62, %fd41, %fd64;
	fma.rn.f64 	%fd115, %fd62, %fd43, %fd66;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r18}, %fd114;
	}
	and.b32  	%r19, %r18, 2145386496;
	setp.lt.u32	%p9, %r19, 1105199104;
	@%p9 bra 	BB3_15;

	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd114;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd115, [retval0+0];
	
	//{
	}// Callseq End 1
	ld.local.u32 	%r25, [%rd10];

BB3_15:
	add.s32 	%r8, %r25, 1;
	and.b32  	%r20, %r8, 1;
	shl.b32 	%r21, %r20, 3;
	setp.eq.s32	%p10, %r20, 0;
	selp.f64	%fd68, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p10;
	add.s32 	%r22, %r21, 1;
	mul.wide.s32 	%rd13, %r22, 8;
	add.s64 	%rd15, %rd7, %rd13;
	ld.const.f64 	%fd69, [%rd15];
	mul.rn.f64 	%fd25, %fd115, %fd115;
	fma.rn.f64 	%fd70, %fd68, %fd25, %fd69;
	ld.const.f64 	%fd71, [%rd15+8];
	fma.rn.f64 	%fd72, %fd70, %fd25, %fd71;
	ld.const.f64 	%fd73, [%rd15+16];
	fma.rn.f64 	%fd74, %fd72, %fd25, %fd73;
	ld.const.f64 	%fd75, [%rd15+24];
	fma.rn.f64 	%fd76, %fd74, %fd25, %fd75;
	ld.const.f64 	%fd77, [%rd15+32];
	fma.rn.f64 	%fd78, %fd76, %fd25, %fd77;
	ld.const.f64 	%fd79, [%rd15+40];
	fma.rn.f64 	%fd26, %fd78, %fd25, %fd79;
	fma.rn.f64 	%fd116, %fd26, %fd115, %fd115;
	@%p10 bra 	BB3_17;

	mov.f64 	%fd80, 0d3FF0000000000000;
	fma.rn.f64 	%fd116, %fd26, %fd25, %fd80;

BB3_17:
	and.b32  	%r23, %r8, 2;
	setp.eq.s32	%p11, %r23, 0;
	@%p11 bra 	BB3_19;

	mov.f64 	%fd81, 0d0000000000000000;
	mov.f64 	%fd82, 0dBFF0000000000000;
	fma.rn.f64 	%fd116, %fd116, %fd82, %fd81;

BB3_19:
	ld.f64 	%fd83, [%rd2];
	ld.f64 	%fd84, [%rd2+8];
	mul.f64 	%fd85, %fd20, %fd84;
	fma.rn.f64 	%fd86, %fd19, %fd83, %fd85;
	ld.f64 	%fd87, [%rd2+16];
	fma.rn.f64 	%fd88, %fd21, %fd87, %fd86;
	mul.f64 	%fd89, %fd20, %fd87;
	mul.f64 	%fd90, %fd21, %fd84;
	sub.f64 	%fd91, %fd89, %fd90;
	mul.f64 	%fd92, %fd112, %fd91;
	fma.rn.f64 	%fd93, %fd116, %fd83, %fd92;
	mul.f64 	%fd94, %fd21, %fd83;
	mul.f64 	%fd95, %fd19, %fd87;
	sub.f64 	%fd96, %fd94, %fd95;
	mul.f64 	%fd97, %fd112, %fd96;
	fma.rn.f64 	%fd98, %fd116, %fd84, %fd97;
	mul.f64 	%fd99, %fd19, %fd84;
	mul.f64 	%fd100, %fd20, %fd83;
	sub.f64 	%fd101, %fd99, %fd100;
	mul.f64 	%fd102, %fd112, %fd101;
	fma.rn.f64 	%fd103, %fd116, %fd87, %fd102;
	mov.f64 	%fd104, 0d3FF0000000000000;
	sub.f64 	%fd105, %fd104, %fd116;
	mul.f64 	%fd106, %fd105, %fd88;
	fma.rn.f64 	%fd107, %fd19, %fd106, %fd93;
	st.f64 	[%rd2], %fd107;
	fma.rn.f64 	%fd108, %fd20, %fd106, %fd98;
	st.f64 	[%rd2+8], %fd108;
	fma.rn.f64 	%fd109, %fd21, %fd106, %fd103;
	st.f64 	[%rd2+16], %fd109;

BB3_20:
	ret;
}

	// .globl	_Z4iminii
.visible .func  (.param .b32 func_retval0) _Z4iminii(
	.param .b32 _Z4iminii_param_0,
	.param .b32 _Z4iminii_param_1
)
{
	.reg .b32 	%r<4>;


	ld.param.u32 	%r1, [_Z4iminii_param_0];
	ld.param.u32 	%r2, [_Z4iminii_param_1];
	min.s32 	%r3, %r1, %r2;
	st.param.b32	[func_retval0+0], %r3;
	ret;
}

	// .globl	_Z4imaxii
.visible .func  (.param .b32 func_retval0) _Z4imaxii(
	.param .b32 _Z4imaxii_param_0,
	.param .b32 _Z4imaxii_param_1
)
{
	.reg .b32 	%r<4>;


	ld.param.u32 	%r1, [_Z4imaxii_param_0];
	ld.param.u32 	%r2, [_Z4imaxii_param_1];
	max.s32 	%r3, %r1, %r2;
	st.param.b32	[func_retval0+0], %r3;
	ret;
}

	// .globl	_Z4dmindd
.visible .func  (.param .b64 func_retval0) _Z4dmindd(
	.param .b64 _Z4dmindd_param_0,
	.param .b64 _Z4dmindd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .f64 	%fd<4>;


	ld.param.f64 	%fd1, [_Z4dmindd_param_0];
	ld.param.f64 	%fd2, [_Z4dmindd_param_1];
	setp.lt.f64	%p1, %fd1, %fd2;
	selp.f64	%fd3, %fd1, %fd2, %p1;
	st.param.f64	[func_retval0+0], %fd3;
	ret;
}

	// .globl	_Z4dmaxdd
.visible .func  (.param .b64 func_retval0) _Z4dmaxdd(
	.param .b64 _Z4dmaxdd_param_0,
	.param .b64 _Z4dmaxdd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .f64 	%fd<4>;


	ld.param.f64 	%fd1, [_Z4dmaxdd_param_0];
	ld.param.f64 	%fd2, [_Z4dmaxdd_param_1];
	setp.gt.f64	%p1, %fd1, %fd2;
	selp.f64	%fd3, %fd1, %fd2, %p1;
	st.param.f64	[func_retval0+0], %fd3;
	ret;
}

	// .globl	_Z12util_dpythagddPd
.visible .func  (.param .b32 func_retval0) _Z12util_dpythagddPd(
	.param .b64 _Z12util_dpythagddPd_param_0,
	.param .b64 _Z12util_dpythagddPd_param_1,
	.param .b64 _Z12util_dpythagddPd_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<16>;
	.reg .b64 	%rd<2>;


	ld.param.f64 	%fd6, [_Z12util_dpythagddPd_param_0];
	ld.param.f64 	%fd7, [_Z12util_dpythagddPd_param_1];
	ld.param.u64 	%rd1, [_Z12util_dpythagddPd_param_2];
	abs.f64 	%fd1, %fd6;
	abs.f64 	%fd2, %fd7;
	setp.gt.f64	%p1, %fd1, %fd2;
	@%p1 bra 	BB8_3;
	bra.uni 	BB8_1;

BB8_3:
	div.rn.f64 	%fd12, %fd2, %fd1;
	fma.rn.f64 	%fd13, %fd12, %fd12, 0d3FF0000000000000;
	sqrt.rn.f64 	%fd14, %fd13;
	mul.f64 	%fd15, %fd1, %fd14;
	bra.uni 	BB8_4;

BB8_1:
	setp.eq.f64	%p2, %fd2, 0d0000000000000000;
	mov.f64 	%fd15, 0d0000000000000000;
	@%p2 bra 	BB8_4;

	div.rn.f64 	%fd9, %fd1, %fd2;
	fma.rn.f64 	%fd10, %fd9, %fd9, 0d3FF0000000000000;
	sqrt.rn.f64 	%fd11, %fd10;
	mul.f64 	%fd15, %fd2, %fd11;

BB8_4:
	st.f64 	[%rd1], %fd15;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot9[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<101>;


	mov.u64 	%SPL, __local_depot9;
	ld.param.f64 	%fd4, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd37, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd1, %SPL, 0;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd4;
	}
	and.b32  	%r40, %r1, -2147483648;
	shr.u32 	%r3, %r1, 20;
	bfe.u32 	%r4, %r1, 20, 11;
	setp.eq.s32	%p1, %r4, 2047;
	@%p1 bra 	BB9_13;

	add.s32 	%r15, %r4, -1024;
	shr.u32 	%r16, %r15, 6;
	mov.u32 	%r17, 15;
	sub.s32 	%r5, %r17, %r16;
	mov.u32 	%r18, 19;
	sub.s32 	%r19, %r18, %r16;
	mov.u32 	%r20, 18;
	min.s32 	%r6, %r20, %r19;
	mov.u64 	%rd94, 0;
	setp.ge.s32	%p2, %r5, %r6;
	mov.u64 	%rd93, %rd1;
	@%p2 bra 	BB9_4;

	bfe.u32 	%r21, %r1, 20, 11;
	add.s32 	%r22, %r21, -1024;
	shr.u32 	%r23, %r22, 6;
	sub.s32 	%r25, %r17, %r23;
	mul.wide.s32 	%rd41, %r25, 8;
	mov.u64 	%rd42, __cudart_i2opi_d;
	add.s64 	%rd89, %rd42, %rd41;
	mov.b64 	 %rd43, %fd4;
	shl.b64 	%rd44, %rd43, 11;
	or.b64  	%rd5, %rd44, -9223372036854775808;
	mov.u64 	%rd94, 0;
	mov.u64 	%rd93, %rd1;
	mov.u64 	%rd91, %rd1;
	mov.u32 	%r39, %r5;

BB9_3:
	.pragma "nounroll";
	ld.const.u64 	%rd47, [%rd89];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd47;    
	mov.b64         {blo,bhi}, %rd5;    
	mov.b64         {clo,chi}, %rd94;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd45, {r0,r1};      
	mov.b64         %rd94, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd91], %rd45;
	add.s32 	%r39, %r39, 1;
	sub.s32 	%r26, %r39, %r5;
	mul.wide.s32 	%rd50, %r26, 8;
	add.s64 	%rd91, %rd1, %rd50;
	add.s64 	%rd93, %rd93, 8;
	add.s64 	%rd89, %rd89, 8;
	setp.lt.s32	%p3, %r39, %r6;
	@%p3 bra 	BB9_3;

BB9_4:
	st.local.u64 	[%rd93], %rd94;
	ld.local.u64 	%rd95, [%rd1+16];
	ld.local.u64 	%rd96, [%rd1+24];
	and.b32  	%r9, %r3, 63;
	setp.eq.s32	%p4, %r9, 0;
	@%p4 bra 	BB9_6;

	mov.u32 	%r27, 64;
	sub.s32 	%r28, %r27, %r9;
	shl.b64 	%rd51, %rd96, %r9;
	shr.u64 	%rd52, %rd95, %r28;
	or.b64  	%rd96, %rd51, %rd52;
	shl.b64 	%rd53, %rd95, %r9;
	ld.local.u64 	%rd54, [%rd1+8];
	shr.u64 	%rd55, %rd54, %r28;
	or.b64  	%rd95, %rd55, %rd53;

BB9_6:
	shr.u64 	%rd56, %rd96, 62;
	cvt.u32.u64	%r29, %rd56;
	shr.u64 	%rd57, %rd95, 62;
	shl.b64 	%rd58, %rd96, 2;
	or.b64  	%rd98, %rd58, %rd57;
	shl.b64 	%rd97, %rd95, 2;
	shr.u64 	%rd59, %rd96, 61;
	cvt.u32.u64	%r30, %rd59;
	and.b32  	%r31, %r30, 1;
	add.s32 	%r32, %r31, %r29;
	neg.s32 	%r33, %r32;
	setp.eq.s32	%p5, %r40, 0;
	selp.b32	%r34, %r32, %r33, %p5;
	cvta.to.local.u64 	%rd60, %rd37;
	st.local.u32 	[%rd60], %r34;
	setp.eq.s32	%p6, %r31, 0;
	@%p6 bra 	BB9_8;

	mov.u64 	%rd64, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd64;
	mov.b64         {a2,a3}, %rd64;
	mov.b64         {b0,b1}, %rd97;
	mov.b64         {b2,b3}, %rd98;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd97, {r0,r1};
	mov.b64         %rd98, {r2,r3};
	}
	// inline asm
	xor.b32  	%r40, %r40, -2147483648;

BB9_8:
	clz.b64 	%r41, %rd98;
	setp.eq.s32	%p7, %r41, 0;
	@%p7 bra 	BB9_10;

	shl.b64 	%rd67, %rd98, %r41;
	mov.u32 	%r35, 64;
	sub.s32 	%r36, %r35, %r41;
	shr.u64 	%rd68, %rd97, %r36;
	or.b64  	%rd98, %rd68, %rd67;

BB9_10:
	mov.u64 	%rd72, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd98;   
	mov.b64         {blo,bhi}, %rd72;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd69, {r0,r1};     
	mov.b64         %rd100, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd100, 1;
	@%p8 bra 	BB9_12;

	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd69;
	mov.b64         {a2,a3}, %rd100;
	mov.b64         {b0,b1}, %rd69;
	mov.b64         {b2,b3}, %rd100;
	add.cc.u32      r0, a0, b0; 
	addc.cc.u32     r1, a1, b1; 
	addc.cc.u32     r2, a2, b2; 
	addc.u32        r3, a3, b3; 
	mov.b64         %rd73, {r0,r1};
	mov.b64         %rd100, {r2,r3};
	}
	// inline asm
	add.s32 	%r41, %r41, 1;

BB9_12:
	cvt.u64.u32	%rd79, %r40;
	shl.b64 	%rd80, %rd79, 32;
	mov.u32 	%r37, 1022;
	sub.s32 	%r38, %r37, %r41;
	cvt.u64.u32	%rd81, %r38;
	shl.b64 	%rd82, %rd81, 52;
	add.s64 	%rd83, %rd100, 1;
	shr.u64 	%rd84, %rd83, 10;
	add.s64 	%rd85, %rd84, 1;
	shr.u64 	%rd86, %rd85, 1;
	add.s64 	%rd87, %rd86, %rd82;
	or.b64  	%rd88, %rd87, %rd80;
	mov.b64 	 %fd4, %rd88;

BB9_13:
	st.param.f64	[func_retval0+0], %fd4;
	ret;
}


