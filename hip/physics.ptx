//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	_Z11physics_refPP9physics_s
.const .align 8 .b8 __nv_static_28__15_physics_cpp1_ii_93368647_const_phys[232];

.visible .func  (.param .b32 func_retval0) _Z11physics_refPP9physics_s(
	.param .b64 _Z11physics_refPP9physics_s_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<4>;


	ld.param.u64 	%rd1, [_Z11physics_refPP9physics_s_param_0];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB0_2;

	// inline asm
	trap;
	// inline asm

BB0_2:
	mov.u64 	%rd2, __nv_static_28__15_physics_cpp1_ii_93368647_const_phys;
	cvta.const.u64 	%rd3, %rd2;
	st.u64 	[%rd1], %rd3;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z17physics_eta_shearP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z17physics_eta_shearP9physics_sPd(
	.param .b64 _Z17physics_eta_shearP9physics_sPd_param_0,
	.param .b64 _Z17physics_eta_shearP9physics_sPd_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z17physics_eta_shearP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z17physics_eta_shearP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB1_2;

	// inline asm
	trap;
	// inline asm

BB1_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB1_4;

	// inline asm
	trap;
	// inline asm

BB1_4:
	ld.f64 	%fd1, [%rd1];
	st.f64 	[%rd2], %fd1;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z16physics_eta_bulkP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z16physics_eta_bulkP9physics_sPd(
	.param .b64 _Z16physics_eta_bulkP9physics_sPd_param_0,
	.param .b64 _Z16physics_eta_bulkP9physics_sPd_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z16physics_eta_bulkP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z16physics_eta_bulkP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB2_2;

	// inline asm
	trap;
	// inline asm

BB2_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB2_4;

	// inline asm
	trap;
	// inline asm

BB2_4:
	ld.f64 	%fd1, [%rd1+8];
	st.f64 	[%rd2], %fd1;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z12physics_rho0P9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z12physics_rho0P9physics_sPd(
	.param .b64 _Z12physics_rho0P9physics_sPd_param_0,
	.param .b64 _Z12physics_rho0P9physics_sPd_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z12physics_rho0P9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z12physics_rho0P9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB3_2;

	// inline asm
	trap;
	// inline asm

BB3_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB3_4;

	// inline asm
	trap;
	// inline asm

BB3_4:
	ld.f64 	%fd1, [%rd1+24];
	st.f64 	[%rd2], %fd1;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z10physics_ktP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z10physics_ktP9physics_sPd(
	.param .b64 _Z10physics_ktP9physics_sPd_param_0,
	.param .b64 _Z10physics_ktP9physics_sPd_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z10physics_ktP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z10physics_ktP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB4_2;

	// inline asm
	trap;
	// inline asm

BB4_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB4_4;

	// inline asm
	trap;
	// inline asm

BB4_4:
	ld.f64 	%fd1, [%rd1+16];
	st.f64 	[%rd2], %fd1;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z12physics_phi0P9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z12physics_phi0P9physics_sPd(
	.param .b64 _Z12physics_phi0P9physics_sPd_param_0,
	.param .b64 _Z12physics_phi0P9physics_sPd_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z12physics_phi0P9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z12physics_phi0P9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB5_2;

	// inline asm
	trap;
	// inline asm

BB5_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB5_4;

	// inline asm
	trap;
	// inline asm

BB5_4:
	ld.f64 	%fd1, [%rd1+32];
	st.f64 	[%rd2], %fd1;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z10physics_b0P9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z10physics_b0P9physics_sPd(
	.param .b64 _Z10physics_b0P9physics_sPd_param_0,
	.param .b64 _Z10physics_b0P9physics_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z10physics_b0P9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z10physics_b0P9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB6_2;

	// inline asm
	trap;
	// inline asm

BB6_2:
	ld.f64 	%fd1, [%rd1+104];
	st.f64 	[%rd2], %fd1;
	ld.f64 	%fd2, [%rd1+112];
	st.f64 	[%rd2+8], %fd2;
	ld.f64 	%fd3, [%rd1+120];
	st.f64 	[%rd2+16], %fd3;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z10physics_e0P9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z10physics_e0P9physics_sPd(
	.param .b64 _Z10physics_e0P9physics_sPd_param_0,
	.param .b64 _Z10physics_e0P9physics_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z10physics_e0P9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z10physics_e0P9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB7_2;

	// inline asm
	trap;
	// inline asm

BB7_2:
	ld.f64 	%fd1, [%rd1+72];
	st.f64 	[%rd2], %fd1;
	ld.f64 	%fd2, [%rd1+80];
	st.f64 	[%rd2+8], %fd2;
	ld.f64 	%fd3, [%rd1+88];
	st.f64 	[%rd2+16], %fd3;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z15physics_e0_flagP9physics_s
.visible .func  (.param .b32 func_retval0) _Z15physics_e0_flagP9physics_s(
	.param .b64 _Z15physics_e0_flagP9physics_s_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<2>;


	ld.param.u64 	%rd1, [_Z15physics_e0_flagP9physics_s_param_0];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB8_2;

	// inline asm
	trap;
	// inline asm

BB8_2:
	ld.u32 	%r1, [%rd1+172];
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z20physics_e0_frequencyP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z20physics_e0_frequencyP9physics_sPd(
	.param .b64 _Z20physics_e0_frequencyP9physics_sPd_param_0,
	.param .b64 _Z20physics_e0_frequencyP9physics_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z20physics_e0_frequencyP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z20physics_e0_frequencyP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB9_2;

	// inline asm
	trap;
	// inline asm

BB9_2:
	ld.f64 	%fd1, [%rd1+96];
	st.f64 	[%rd2], %fd1;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z13physics_fbodyP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z13physics_fbodyP9physics_sPd(
	.param .b64 _Z13physics_fbodyP9physics_sPd_param_0,
	.param .b64 _Z13physics_fbodyP9physics_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z13physics_fbodyP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z13physics_fbodyP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB10_2;

	// inline asm
	trap;
	// inline asm

BB10_2:
	ld.f64 	%fd1, [%rd1+48];
	st.f64 	[%rd2], %fd1;
	ld.f64 	%fd2, [%rd1+56];
	st.f64 	[%rd2+8], %fd2;
	ld.f64 	%fd3, [%rd1+64];
	st.f64 	[%rd2+16], %fd3;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z14physics_fpulseP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z14physics_fpulseP9physics_sPd(
	.param .b64 _Z14physics_fpulseP9physics_sPd_param_0,
	.param .b64 _Z14physics_fpulseP9physics_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z14physics_fpulseP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z14physics_fpulseP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB11_2;

	// inline asm
	trap;
	// inline asm

BB11_2:
	ld.f64 	%fd1, [%rd1+184];
	st.f64 	[%rd2], %fd1;
	ld.f64 	%fd2, [%rd1+192];
	st.f64 	[%rd2+8], %fd2;
	ld.f64 	%fd3, [%rd1+200];
	st.f64 	[%rd2+16], %fd3;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z24physics_fpulse_frequencyP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z24physics_fpulse_frequencyP9physics_sPd(
	.param .b64 _Z24physics_fpulse_frequencyP9physics_sPd_param_0,
	.param .b64 _Z24physics_fpulse_frequencyP9physics_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z24physics_fpulse_frequencyP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z24physics_fpulse_frequencyP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB12_2;

	// inline asm
	trap;
	// inline asm

BB12_2:
	ld.f64 	%fd1, [%rd1+176];
	st.f64 	[%rd2], %fd1;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z16physics_mobilityP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z16physics_mobilityP9physics_sPd(
	.param .b64 _Z16physics_mobilityP9physics_sPd_param_0,
	.param .b64 _Z16physics_mobilityP9physics_sPd_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z16physics_mobilityP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z16physics_mobilityP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB13_2;

	// inline asm
	trap;
	// inline asm

BB13_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB13_4;

	// inline asm
	trap;
	// inline asm

BB13_4:
	ld.f64 	%fd1, [%rd1+152];
	st.f64 	[%rd2], %fd1;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z13physics_fgravP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z13physics_fgravP9physics_sPd(
	.param .b64 _Z13physics_fgravP9physics_sPd_param_0,
	.param .b64 _Z13physics_fgravP9physics_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z13physics_fgravP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z13physics_fgravP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB14_2;

	// inline asm
	trap;
	// inline asm

BB14_2:
	ld.f64 	%fd1, [%rd1+128];
	st.f64 	[%rd2], %fd1;
	ld.f64 	%fd2, [%rd1+136];
	st.f64 	[%rd2+8], %fd2;
	ld.f64 	%fd3, [%rd1+144];
	st.f64 	[%rd2+16], %fd3;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z15physics_grad_muP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z15physics_grad_muP9physics_sPd(
	.param .b64 _Z15physics_grad_muP9physics_sPd_param_0,
	.param .b64 _Z15physics_grad_muP9physics_sPd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z15physics_grad_muP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z15physics_grad_muP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB15_2;

	// inline asm
	trap;
	// inline asm

BB15_2:
	ld.f64 	%fd1, [%rd1+208];
	st.f64 	[%rd2], %fd1;
	ld.f64 	%fd2, [%rd1+216];
	st.f64 	[%rd2+8], %fd2;
	ld.f64 	%fd3, [%rd1+224];
	st.f64 	[%rd2+16], %fd3;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z24physics_control_timestepP9physics_s
.visible .func  (.param .b32 func_retval0) _Z24physics_control_timestepP9physics_s(
	.param .b64 _Z24physics_control_timestepP9physics_s_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<2>;


	ld.param.u64 	%rd1, [_Z24physics_control_timestepP9physics_s_param_0];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB16_2;

	// inline asm
	trap;
	// inline asm

BB16_2:
	ld.u32 	%r1, [%rd1+168];
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z20physics_control_timeP9physics_sPd
.visible .func  (.param .b32 func_retval0) _Z20physics_control_timeP9physics_sPd(
	.param .b64 _Z20physics_control_timeP9physics_sPd_param_0,
	.param .b64 _Z20physics_control_timeP9physics_sPd_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<7>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z20physics_control_timeP9physics_sPd_param_0];
	ld.param.u64 	%rd2, [_Z20physics_control_timeP9physics_sPd_param_1];
	setp.ne.s64	%p1, %rd1, 0;
	@%p1 bra 	BB17_2;

	// inline asm
	trap;
	// inline asm

BB17_2:
	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB17_4;

	// inline asm
	trap;
	// inline asm

BB17_4:
	ld.v2.u32 	{%r1, %r2}, [%rd1+160];
	mov.u32 	%r4, 0;
	ld.u32 	%r5, [%rd1+168];
	add.s32 	%r6, %r5, %r1;
	cvt.rn.f64.s32	%fd1, %r6;
	add.f64 	%fd2, %fd1, 0dBFF0000000000000;
	st.f64 	[%rd2], %fd2;
	st.param.b32	[func_retval0+0], %r4;
	ret;
}


